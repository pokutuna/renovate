{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/datasource/git-tags/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,gEAAkD;AAElD,qDAAuC;AAE1B,QAAA,EAAE,GAAG,UAAU,CAAC;AAEtB,KAAK,UAAU,WAAW,CAAC,EAChC,UAAU,GACQ;IAClB,MAAM,OAAO,GAAsB,MAAM,OAAO,CAAC,UAAU,CAAC,EAAE,UAAU,EAAE,CAAC,CAAC;IAE5E,IAAI,OAAO,KAAK,IAAI,EAAE;QACpB,OAAO,IAAI,CAAC;KACb;IACD,MAAM,QAAQ,GAAG,OAAO;SACrB,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,KAAK,MAAM,CAAC;SACpC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;SAC5C,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;QACb,OAAO,EAAE,GAAG,CAAC,KAAK;QAClB,MAAM,EAAE,GAAG,CAAC,KAAK;QACjB,SAAS,EAAE,GAAG,CAAC,IAAI;KACpB,CAAC,CAAC,CAAC;IAEN,MAAM,SAAS,GAAG,UAAU,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;IAEtE,MAAM,MAAM,GAAkB;QAC5B,SAAS;QACT,QAAQ;KACT,CAAC;IAEF,OAAO,MAAM,CAAC;AAChB,CAAC;AAzBD,kCAyBC;AAEM,KAAK,UAAU,SAAS,CAC7B,EAAE,UAAU,EAAyB,EACrC,QAAiB;IAEjB,MAAM,OAAO,GAAsB,MAAM,OAAO,CAAC,UAAU,CAAC,EAAE,UAAU,EAAE,CAAC,CAAC;IAC5E,MAAM,SAAS,GAAG,QAAQ,IAAI,MAAM,CAAC;IACrC,MAAM,GAAG,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,KAAK,KAAK,SAAS,CAAC,CAAC;IACjE,IAAI,GAAG,EAAE;QACP,OAAO,GAAG,CAAC,IAAI,CAAC;KACjB;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAXD,8BAWC","sourcesContent":["import * as semver from '../../versioning/semver';\nimport { DigestConfig, GetReleasesConfig, ReleaseResult } from '../common';\nimport * as gitRefs from '../git-refs';\n\nexport const id = 'git-tags';\n\nexport async function getReleases({\n  lookupName,\n}: GetReleasesConfig): Promise<ReleaseResult | null> {\n  const rawRefs: gitRefs.RawRefs[] = await gitRefs.getRawRefs({ lookupName });\n\n  if (rawRefs === null) {\n    return null;\n  }\n  const releases = rawRefs\n    .filter((ref) => ref.type === 'tags')\n    .filter((ref) => semver.isVersion(ref.value))\n    .map((ref) => ({\n      version: ref.value,\n      gitRef: ref.value,\n      newDigest: ref.hash,\n    }));\n\n  const sourceUrl = lookupName.replace(/\\.git$/, '').replace(/\\/$/, '');\n\n  const result: ReleaseResult = {\n    sourceUrl,\n    releases,\n  };\n\n  return result;\n}\n\nexport async function getDigest(\n  { lookupName }: Partial<DigestConfig>,\n  newValue?: string\n): Promise<string | null> {\n  const rawRefs: gitRefs.RawRefs[] = await gitRefs.getRawRefs({ lookupName });\n  const findValue = newValue || 'HEAD';\n  const ref = rawRefs.find((rawRef) => rawRef.value === findValue);\n  if (ref) {\n    return ref.hash;\n  }\n  return null;\n}\n"]}