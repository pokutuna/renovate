{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/datasource/hex/index.ts"],"names":[],"mappings":";;;AAAA,yCAAsC;AACtC,gFAA2E;AAC3E,0CAAuC;AAG1B,QAAA,EAAE,GAAG,KAAK,CAAC;AAExB,MAAM,IAAI,GAAG,IAAI,WAAI,CAAC,UAAE,CAAC,CAAC;AAWnB,KAAK,UAAU,WAAW,CAAC,EAChC,UAAU,GACQ;;IAClB,uCAAuC;IACvC,mFAAmF;IACnF,kCAAkC;IAClC,mDAAmD;IACnD,yDAAyD;IACzD,MAAM,cAAc,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAChD,MAAM,MAAM,GAAG,+BAA+B,cAAc,EAAE,CAAC;IAC/D,IAAI;QACF,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,OAAO,CAAa,MAAM,CAAC,CAAC;QAExD,MAAM,UAAU,GAAe,QAAQ,CAAC,IAAI,CAAC;QAE7C,IAAI,CAAC,UAAU,EAAE;YACf,eAAM,CAAC,IAAI,CAAC,EAAE,UAAU,EAAE,KAAK,EAAE,UAAU,EAAE,EAAE,uBAAuB,CAAC,CAAC;YACxE,OAAO,IAAI,CAAC;SACb;QAED,MAAM,EAAE,QAAQ,GAAG,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAE,GAAG,UAAU,CAAC;QAE/D,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;YACzB,eAAM,CAAC,KAAK,CAAC,yBAAyB,cAAc,KAAK,MAAM,GAAG,CAAC,CAAC,CAAC,kBAAkB;YACvF,OAAO,IAAI,CAAC;SACb;QAED,MAAM,MAAM,GAAkB;YAC5B,QAAQ,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,OAAO,EAAE,WAAW,EAAE,EAAE,EAAE,CAClD,WAAW;gBACT,CAAC,CAAC;oBACE,OAAO;oBACP,gBAAgB,EAAE,WAAW;iBAC9B;gBACH,CAAC,CAAC,EAAE,OAAO,EAAE,CAChB;SACF,CAAC;QAEF,IAAI,QAAQ,EAAE;YACZ,MAAM,CAAC,QAAQ,GAAG,QAAQ,CAAC;SAC5B;QAED,UAAI,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,KAAK,0CAAE,MAAM,EAAE;YACvB,MAAM,CAAC,SAAS,GAAG,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;SACjD;QAED,OAAO,MAAM,CAAC;KACf;IAAC,OAAO,GAAG,EAAE;QACZ,IACE,GAAG,CAAC,UAAU,KAAK,GAAG;YACtB,CAAC,GAAG,CAAC,UAAU,IAAI,GAAG,IAAI,GAAG,CAAC,UAAU,GAAG,GAAG,CAAC,EAC/C;YACA,MAAM,IAAI,uCAAiB,CAAC,GAAG,CAAC,CAAC;SAClC;QACD,MAAM,GAAG,CAAC;KACX;AACH,CAAC;AAxDD,kCAwDC","sourcesContent":["import { logger } from '../../logger';\nimport { ExternalHostError } from '../../types/errors/external-host-error';\nimport { Http } from '../../util/http';\nimport { GetReleasesConfig, ReleaseResult } from '../common';\n\nexport const id = 'hex';\n\nconst http = new Http(id);\n\ninterface HexRelease {\n  html_url: string;\n  meta?: { links?: Record<string, string> };\n  releases?: {\n    version: string;\n    inserted_at?: string;\n  }[];\n}\n\nexport async function getReleases({\n  lookupName,\n}: GetReleasesConfig): Promise<ReleaseResult | null> {\n  // Get dependency name from lookupName.\n  // If the dependency is private lookupName contains organization name as following:\n  // hexPackageName:organizationName\n  // hexPackageName is used to pass it in hex dep url\n  // organizationName is used for accessing to private deps\n  const hexPackageName = lookupName.split(':')[0];\n  const hexUrl = `https://hex.pm/api/packages/${hexPackageName}`;\n  try {\n    const response = await http.getJson<HexRelease>(hexUrl);\n\n    const hexRelease: HexRelease = response.body;\n\n    if (!hexRelease) {\n      logger.warn({ datasource: 'hex', lookupName }, `Invalid response body`);\n      return null;\n    }\n\n    const { releases = [], html_url: homepage, meta } = hexRelease;\n\n    if (releases.length === 0) {\n      logger.debug(`No versions found for ${hexPackageName} (${hexUrl})`); // prettier-ignore\n      return null;\n    }\n\n    const result: ReleaseResult = {\n      releases: releases.map(({ version, inserted_at }) =>\n        inserted_at\n          ? {\n              version,\n              releaseTimestamp: inserted_at,\n            }\n          : { version }\n      ),\n    };\n\n    if (homepage) {\n      result.homepage = homepage;\n    }\n\n    if (meta?.links?.Github) {\n      result.sourceUrl = hexRelease.meta.links.Github;\n    }\n\n    return result;\n  } catch (err) {\n    if (\n      err.statusCode === 429 ||\n      (err.statusCode >= 500 && err.statusCode < 600)\n    ) {\n      throw new ExternalHostError(err);\n    }\n    throw err;\n  }\n}\n"]}