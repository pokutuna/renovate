{"version":3,"file":"util.js","sourceRoot":"","sources":["../../../lib/datasource/maven/util.ts"],"names":[],"mappings":"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","sourcesContent":["import url from 'url';\nimport { HOST_DISABLED } from '../../constants/error-messages';\nimport { logger } from '../../logger';\nimport { ExternalHostError } from '../../types/errors/external-host-error';\nimport { Http } from '../../util/http';\n\nimport { MAVEN_REPO, id } from './common';\n\nconst http: Record<string, Http> = {};\n\nfunction httpByHostType(hostType: string): Http {\n  if (!http[hostType]) {\n    http[hostType] = new Http(hostType);\n  }\n  return http[hostType];\n}\n\nconst getHost = (x: string): string => new url.URL(x).host;\n\nfunction isMavenCentral(pkgUrl: url.URL | string): boolean {\n  const host = typeof pkgUrl === 'string' ? pkgUrl : pkgUrl.host;\n  return getHost(MAVEN_REPO) === host;\n}\n\nfunction isTemporalError(err: { code: string; statusCode: number }): boolean {\n  return (\n    err.code === 'ECONNRESET' ||\n    err.statusCode === 429 ||\n    (err.statusCode >= 500 && err.statusCode < 600)\n  );\n}\n\nfunction isHostError(err: { code: string }): boolean {\n  return err.code === 'ETIMEDOUT';\n}\n\nfunction isNotFoundError(err: { code: string; statusCode: number }): boolean {\n  return err.code === 'ENOTFOUND' || err.statusCode === 404;\n}\n\nfunction isPermissionsIssue(err: { statusCode: number }): boolean {\n  return err.statusCode === 401 || err.statusCode === 403;\n}\n\nfunction isConnectionError(err: { code: string }): boolean {\n  return (\n    err.code === 'EAI_AGAIN' ||\n    err.code === 'ERR_TLS_CERT_ALTNAME_INVALID' ||\n    err.code === 'ECONNREFUSED'\n  );\n}\n\nfunction isUnsupportedHostError(err: { name: string }): boolean {\n  return err.name === 'UnsupportedProtocolError';\n}\n\nexport async function downloadHttpProtocol(\n  pkgUrl: url.URL | string,\n  hostType = id\n): Promise<string | null> {\n  let raw: { body: string };\n  try {\n    const httpClient = httpByHostType(hostType);\n    raw = await httpClient.get(pkgUrl.toString());\n    return raw.body;\n  } catch (err) {\n    const failedUrl = pkgUrl.toString();\n    if (err.message === HOST_DISABLED) {\n      // istanbul ignore next\n      logger.trace({ failedUrl }, 'Host disabled');\n    } else if (isNotFoundError(err)) {\n      logger.trace({ failedUrl }, `Url not found`);\n    } else if (isHostError(err)) {\n      // istanbul ignore next\n      logger.debug({ failedUrl }, `Cannot connect to ${hostType} host`);\n    } else if (isPermissionsIssue(err)) {\n      logger.debug(\n        { failedUrl },\n        'Dependency lookup unauthorized. Please add authentication with a hostRule'\n      );\n    } else if (isTemporalError(err)) {\n      logger.debug({ failedUrl, err }, 'Temporary error');\n      if (isMavenCentral(pkgUrl)) {\n        throw new ExternalHostError(err);\n      }\n    } else if (isConnectionError(err)) {\n      // istanbul ignore next\n      logger.debug({ failedUrl }, 'Connection refused to maven registry');\n    } else if (isUnsupportedHostError(err)) {\n      // istanbul ignore next\n      logger.debug({ failedUrl }, 'Unsupported host');\n    } else {\n      logger.info({ failedUrl, err }, 'Unknown error');\n    }\n    return null;\n  }\n}\n\nexport async function isHttpResourceExists(\n  pkgUrl: url.URL | string,\n  hostType = id\n): Promise<boolean | null> {\n  try {\n    const httpClient = httpByHostType(hostType);\n    await httpClient.head(pkgUrl.toString());\n    return true;\n  } catch (err) {\n    if (isNotFoundError(err)) {\n      return false;\n    }\n\n    const failedUrl = pkgUrl.toString();\n    logger.debug({ failedUrl }, `Can't check HTTP resource existence`);\n    return null;\n  }\n}\n"]}