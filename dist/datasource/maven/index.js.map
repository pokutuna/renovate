{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/datasource/maven/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,8CAAsB;AACtB,wDAA0B;AAC1B,kDAAyB;AACzB,mCAAqC;AACrC,yCAAsC;AACtC,uEAAyD;AACzD,mEAAkD;AAClD,4DAAyD;AAEzD,qCAAsC;AACtC,iCAAoE;AAEpE,mCAA8B;AAArB,4FAAA,EAAE,OAAA;AAEE,QAAA,mBAAmB,GAAG,CAAC,mBAAU,CAAC,CAAC;AACnC,QAAA,gBAAgB,GAAG,OAAO,CAAC;AAExC,SAAS,mBAAmB,CAAC,GAAW;IACtC,OAAO,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAC9B,CAAC;AAED,KAAK,UAAU,oBAAoB,CAAC,MAAe;IACjD,MAAM,OAAO,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;IACzD,IAAI,CAAC,CAAC,MAAM,kBAAE,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,EAAE;QAC/B,OAAO,IAAI,CAAC;KACb;IACD,OAAO,kBAAE,CAAC,QAAQ,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;AACtC,CAAC;AAED,SAAS,WAAW,CAClB,UAA2B,EAC3B,OAAe,EACf,IAAY;IAEZ,OAAO,IAAI,aAAG,CAAC,GAAG,CAAC,GAAG,UAAU,CAAC,aAAa,IAAI,IAAI,EAAE,EAAE,OAAO,CAAC,CAAC;AACrE,CAAC;AAED,KAAK,UAAU,gBAAgB,CAC7B,MAAsB;IAEtB,wBAAwB;IACxB,IAAI,CAAC,MAAM,EAAE;QACX,OAAO,IAAI,CAAC;KACb;IACD,IAAI,UAAkB,CAAC;IACvB,QAAQ,MAAM,CAAC,QAAQ,EAAE;QACvB,KAAK,OAAO;YACV,UAAU,GAAG,MAAM,oBAAoB,CAAC,MAAM,CAAC,CAAC;YAChD,MAAM;QACR,KAAK,OAAO,CAAC;QACb,KAAK,QAAQ;YACX,UAAU,GAAG,MAAM,2BAAoB,CAAC,MAAM,CAAC,CAAC;YAChD,MAAM;QACR,KAAK,KAAK;YACR,eAAM,CAAC,KAAK,CAAC,wBAAwB,CAAC,CAAC;YACvC,OAAO,IAAI,CAAC;QACd;YACE,eAAM,CAAC,IAAI,CACT,qBAAqB,MAAM,CAAC,QAAQ,oBAAoB,MAAM,EAAE,CACjE,CAAC;YACF,OAAO,IAAI,CAAC;KACf;IAED,IAAI,CAAC,UAAU,EAAE;QACf,eAAM,CAAC,KAAK,CAAC,uCAAuC,MAAM,EAAE,CAAC,CAAC;QAC9D,OAAO,IAAI,CAAC;KACb;IAED,OAAO,IAAI,oBAAW,CAAC,UAAU,CAAC,CAAC;AACrC,CAAC;AAED,KAAK,UAAU,iBAAiB,CAC9B,UAA2B,EAC3B,OAAe,EACf,OAAe;IAEf,MAAM,MAAM,GAA2B,EAAE,CAAC;IAC1C,MAAM,IAAI,GAAG,GAAG,OAAO,IAAI,UAAU,CAAC,IAAI,IAAI,OAAO,MAAM,CAAC;IAE5D,MAAM,MAAM,GAAG,WAAW,CAAC,UAAU,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;IACtD,MAAM,UAAU,GAAG,MAAM,gBAAgB,CAAC,MAAM,CAAC,CAAC;IAClD,IAAI,CAAC,UAAU,EAAE;QACf,OAAO,MAAM,CAAC;KACf;IAED,MAAM,QAAQ,GAAG,UAAU,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IACjD,IAAI,QAAQ,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,EAAE;QAC9C,MAAM,CAAC,QAAQ,GAAG,QAAQ,CAAC;KAC5B;IAED,MAAM,SAAS,GAAG,UAAU,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;IACtD,IAAI,SAAS,IAAI,CAAC,mBAAmB,CAAC,SAAS,CAAC,EAAE;QAChD,MAAM,CAAC,SAAS,GAAG,SAAS,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;KACnD;IAED,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,SAAS,sBAAsB,CAAC,QAAkB;IAChD,MAAM,EAAE,QAAQ,EAAE,GAAG,eAAY,CAAC,CAAC,iBAAiB;IACpD,MAAM,cAAc,GAAG,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IACjD,IAAI,cAAc,CAAC,MAAM,EAAE;QACzB,OAAO,cAAc,CAAC,MAAM,CAAC,CAAC,aAAa,EAAE,OAAO,EAAE,EAAE,CACtD,iBAAO,CAAC,OAAO,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,aAAa,CAChE,CAAC;KACH;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AASD,SAAS,kBAAkB,CAAC,UAAkB;IAC5C,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAC5C,MAAM,aAAa,GAAG,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,IAAI,IAAI,EAAE,CAAC;IAC7D,OAAO;QACL,OAAO,EAAE,UAAU;QACnB,KAAK;QACL,IAAI;QACJ,aAAa;KACd,CAAC;AACJ,CAAC;AAED,SAAS,eAAe,CAAC,QAAqB;IAC5C,MAAM,QAAQ,GAAG,QAAQ,CAAC,kBAAkB,CAAC,qBAAqB,CAAC,CAAC;IACpE,MAAM,QAAQ,GAAG,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,aAAa,CAAC,SAAS,CAAC,CAAC;IACpD,IAAI,CAAC,QAAQ,EAAE;QACb,OAAO,EAAE,CAAC;KACX;IACD,OAAO,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;AACtC,CAAC;AAED,KAAK,UAAU,uBAAuB,CACpC,UAA2B,EAC3B,OAAe;IAEf,MAAM,WAAW,GAAG,WAAW,CAAC,UAAU,EAAE,OAAO,EAAE,oBAAoB,CAAC,CAAC;IAE3E,MAAM,cAAc,GAAG,2BAA2B,CAAC;IACnD,MAAM,QAAQ,GAAG,WAAW,CAAC,QAAQ,EAAE,CAAC;IACxC,MAAM,cAAc,GAAG,MAAM,YAAY,CAAC,GAAG,CAC3C,cAAc,EACd,QAAQ,CACT,CAAC;IACF,wBAAwB;IACxB,IAAI,cAAc,EAAE;QAClB,OAAO,cAAc,CAAC;KACvB;IAED,MAAM,aAAa,GAAG,MAAM,gBAAgB,CAAC,WAAW,CAAC,CAAC;IAC1D,IAAI,CAAC,aAAa,EAAE;QAClB,OAAO,IAAI,CAAC;KACb;IAED,MAAM,QAAQ,GAAG,eAAe,CAAC,aAAa,CAAC,CAAC;IAChD,MAAM,YAAY,CAAC,GAAG,CAAC,cAAc,EAAE,QAAQ,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC;IAC/D,OAAO,QAAQ,CAAC;AAClB,CAAC;AAID,uBAAuB;AACvB,SAAS,oBAAoB,CAC3B,IAA0B,EAC1B,QAAkB;IAElB,IAAI,CAAC,IAAI,EAAE;QACT,OAAO,KAAK,CAAC;KACd;IACD,OAAO,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,SAAS,CAAC,CAAC;AACtD,CAAC;AAID,KAAK,UAAU,eAAe,CAC5B,OAAe,EACf,WAAoB;IAEpB,MAAM,KAAK,GAAG,WAAW,CAAC,QAAQ,CAAC;IACnC,IAAI,KAAK,KAAK,OAAO,IAAI,KAAK,KAAK,QAAQ,EAAE;QAC3C,MAAM,MAAM,GAAG,MAAM,2BAAoB,CAAC,WAAW,CAAC,CAAC;QACvD,OAAO,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;KAC1B;IACD,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;AACzB,CAAC;AAED,KAAK,UAAU,sBAAsB,CACnC,UAA2B,EAC3B,OAAe,EACf,QAAkB;IAElB,MAAM,cAAc,GAAG,2BAA2B,CAAC;IACnD,MAAM,QAAQ,GAAG,UAAU,CAAC,aAAa,CAAC;IAC1C,IAAI,aAAa,GAAyB,MAAM,YAAY,CAAC,GAAG,CAE9D,cAAc,EAAE,QAAQ,CAAC,CAAC;IAE5B,IAAI,CAAC,oBAAoB,CAAC,aAAa,EAAE,QAAQ,CAAC,EAAE;QAClD,MAAM,KAAK,GAAG,QAAQ;aACnB,GAAG,CAAC,CAAC,OAAO,EAA4B,EAAE;YACzC,MAAM,WAAW,GAAG,WAAW,CAC7B,UAAU,EACV,OAAO,EACP,GAAG,OAAO,IAAI,UAAU,CAAC,IAAI,IAAI,OAAO,MAAM,CAC/C,CAAC;YACF,OAAO,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;QAChC,CAAC,CAAC;aACD,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,WAAW,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;aAClD,GAAG,CAAC,CAAC,CAAC,OAAO,EAAE,WAAW,CAAC,EAAE,EAAE,CAAC,GAAgC,EAAE,CACjE,eAAe,CAAC,OAAO,EAAE,WAAW,CAAC,CACtC,CAAC;QACJ,MAAM,OAAO,GAAG,MAAM,eAAI,CAAC,KAAK,EAAE,EAAE,WAAW,EAAE,CAAC,EAAE,CAAC,CAAC;QACtD,aAAa,GAAG,OAAO,CAAC,MAAM,CAC5B,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC;YACtB,GAAG,GAAG;YACN,CAAC,GAAG,CAAC,EAAE,KAAK;SACb,CAAC,EACF,EAAE,CACH,CAAC;QAEF,0CAA0C;QAC1C,MAAM,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC;YACnE,CAAC,CAAC,EAAE;YACJ,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC;QAEZ,MAAM,YAAY,CAAC,GAAG,CAAC,cAAc,EAAE,QAAQ,EAAE,aAAa,EAAE,QAAQ,CAAC,CAAC;KAC3E;IAED,OAAO,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;AAClD,CAAC;AAEM,KAAK,UAAU,WAAW,CAAC,EAChC,UAAU,EACV,WAAW,GACO;IAClB,MAAM,UAAU,GAAG,kBAAkB,CAAC,UAAU,CAAC,CAAC;IAClD,MAAM,QAAQ,GAAa,EAAE,CAAC;IAC9B,MAAM,eAAe,GAAG,EAAE,CAAC;IAC3B,MAAM,OAAO,GAAG,WAAW,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;IACjD,eAAM,CAAC,KAAK,CAAC,cAAc,UAAU,CAAC,OAAO,kBAAkB,OAAO,EAAE,CAAC,CAAC;IAC1E,MAAM,gBAAgB,GAAG,MAAM,uBAAuB,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;IAC5E,IAAI,gBAAgB,EAAE;QACpB,IAAI,iBAAiB,GAAG,gBAAgB,CAAC;QACzC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,wCAAwC,EAAE;YACzD,iBAAiB,GAAG,MAAM,sBAAsB,CAC9C,UAAU,EACV,OAAO,EACP,gBAAgB,CACjB,CAAC;SACH;QACD,MAAM,gBAAgB,GAAG,iBAAiB,CAAC,MAAM,CAC/C,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,CACzC,CAAC;QACF,QAAQ,CAAC,IAAI,CAAC,GAAG,gBAAgB,CAAC,CAAC;QAEnC,MAAM,aAAa,GAAG,sBAAsB,CAAC,gBAAgB,CAAC,CAAC;QAC/D,IAAI,aAAa,EAAE;YACjB,eAAe,CAAC,aAAa,CAAC,GAAG,OAAO,CAAC;SAC1C;QAED,eAAM,CAAC,KAAK,CAAC,SAAS,iBAAiB,CAAC,MAAM,qBAAqB,UAAU,CAAC,OAAO,kBAAkB,OAAO,EAAE,CAAC,CAAC,CAAC,kBAAkB;KACtI;IAED,IAAI,EAAC,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,MAAM,CAAA,EAAE;QACrB,OAAO,IAAI,CAAC;KACb;IAED,IAAI,cAAc,GAAG,EAAE,CAAC;IACxB,MAAM,aAAa,GAAG,sBAAsB,CAAC,QAAQ,CAAC,CAAC;IACvD,IAAI,aAAa,EAAE;QACjB,cAAc,GAAG,MAAM,iBAAiB,CACtC,UAAU,EACV,eAAe,CAAC,aAAa,CAAC,EAC9B,aAAa,CACd,CAAC;KACH;IAED,OAAO;QACL,GAAG,UAAU;QACb,GAAG,cAAc;QACjB,QAAQ,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC;KAChD,CAAC;AACJ,CAAC;AAnDD,kCAmDC","sourcesContent":["import url from 'url';\nimport fs from 'fs-extra';\nimport pAll from 'p-all';\nimport { XmlDocument } from 'xmldoc';\nimport { logger } from '../../logger';\nimport * as packageCache from '../../util/cache/package';\nimport mavenVersion from '../../versioning/maven';\nimport { compare } from '../../versioning/maven/compare';\nimport { GetReleasesConfig, ReleaseResult } from '../common';\nimport { MAVEN_REPO } from './common';\nimport { downloadHttpProtocol, isHttpResourceExists } from './util';\n\nexport { id } from './common';\n\nexport const defaultRegistryUrls = [MAVEN_REPO];\nexport const registryStrategy = 'merge';\n\nfunction containsPlaceholder(str: string): boolean {\n  return /\\${.*?}/g.test(str);\n}\n\nasync function downloadFileProtocol(pkgUrl: url.URL): Promise<string | null> {\n  const pkgPath = pkgUrl.toString().replace('file://', '');\n  if (!(await fs.exists(pkgPath))) {\n    return null;\n  }\n  return fs.readFile(pkgPath, 'utf8');\n}\n\nfunction getMavenUrl(\n  dependency: MavenDependency,\n  repoUrl: string,\n  path: string\n): url.URL | null {\n  return new url.URL(`${dependency.dependencyUrl}/${path}`, repoUrl);\n}\n\nasync function downloadMavenXml(\n  pkgUrl: url.URL | null\n): Promise<XmlDocument | null> {\n  /* istanbul ignore if */\n  if (!pkgUrl) {\n    return null;\n  }\n  let rawContent: string;\n  switch (pkgUrl.protocol) {\n    case 'file:':\n      rawContent = await downloadFileProtocol(pkgUrl);\n      break;\n    case 'http:':\n    case 'https:':\n      rawContent = await downloadHttpProtocol(pkgUrl);\n      break;\n    case 's3:':\n      logger.debug('Skipping s3 dependency');\n      return null;\n    default:\n      logger.warn(\n        `Invalid protocol '${pkgUrl.protocol}' for Maven url: ${pkgUrl}`\n      );\n      return null;\n  }\n\n  if (!rawContent) {\n    logger.debug(`Content is not found for Maven url: ${pkgUrl}`);\n    return null;\n  }\n\n  return new XmlDocument(rawContent);\n}\n\nasync function getDependencyInfo(\n  dependency: MavenDependency,\n  repoUrl: string,\n  version: string\n): Promise<Partial<ReleaseResult>> {\n  const result: Partial<ReleaseResult> = {};\n  const path = `${version}/${dependency.name}-${version}.pom`;\n\n  const pomUrl = getMavenUrl(dependency, repoUrl, path);\n  const pomContent = await downloadMavenXml(pomUrl);\n  if (!pomContent) {\n    return result;\n  }\n\n  const homepage = pomContent.valueWithPath('url');\n  if (homepage && !containsPlaceholder(homepage)) {\n    result.homepage = homepage;\n  }\n\n  const sourceUrl = pomContent.valueWithPath('scm.url');\n  if (sourceUrl && !containsPlaceholder(sourceUrl)) {\n    result.sourceUrl = sourceUrl.replace(/^scm:/, '');\n  }\n\n  return result;\n}\n\nfunction getLatestStableVersion(versions: string[]): string | null {\n  const { isStable } = mavenVersion; // auto this bind\n  const stableVersions = versions.filter(isStable);\n  if (stableVersions.length) {\n    return stableVersions.reduce((latestVersion, version) =>\n      compare(version, latestVersion) === 1 ? version : latestVersion\n    );\n  }\n  return null;\n}\n\ninterface MavenDependency {\n  display: string;\n  group?: string;\n  name?: string;\n  dependencyUrl: string;\n}\n\nfunction getDependencyParts(lookupName: string): MavenDependency {\n  const [group, name] = lookupName.split(':');\n  const dependencyUrl = `${group.replace(/\\./g, '/')}/${name}`;\n  return {\n    display: lookupName,\n    group,\n    name,\n    dependencyUrl,\n  };\n}\n\nfunction extractVersions(metadata: XmlDocument): string[] {\n  const versions = metadata.descendantWithPath('versioning.versions');\n  const elements = versions?.childrenNamed('version');\n  if (!elements) {\n    return [];\n  }\n  return elements.map((el) => el.val);\n}\n\nasync function getVersionsFromMetadata(\n  dependency: MavenDependency,\n  repoUrl: string\n): Promise<string[] | null> {\n  const metadataUrl = getMavenUrl(dependency, repoUrl, 'maven-metadata.xml');\n\n  const cacheNamespace = 'datasource-maven-metadata';\n  const cacheKey = metadataUrl.toString();\n  const cachedVersions = await packageCache.get<string[]>(\n    cacheNamespace,\n    cacheKey\n  );\n  /* istanbul ignore if */\n  if (cachedVersions) {\n    return cachedVersions;\n  }\n\n  const mavenMetadata = await downloadMavenXml(metadataUrl);\n  if (!mavenMetadata) {\n    return null;\n  }\n\n  const versions = extractVersions(mavenMetadata);\n  await packageCache.set(cacheNamespace, cacheKey, versions, 30);\n  return versions;\n}\n\ntype ArtifactsInfo = Record<string, boolean | null>;\n\n// istanbul ignore next\nfunction isValidArtifactsInfo(\n  info: ArtifactsInfo | null,\n  versions: string[]\n): boolean {\n  if (!info) {\n    return false;\n  }\n  return versions.every((v) => info[v] !== undefined);\n}\n\ntype ArtifactInfoResult = [string, boolean | null];\n\nasync function getArtifactInfo(\n  version: string,\n  artifactUrl: url.URL\n): Promise<ArtifactInfoResult> {\n  const proto = artifactUrl.protocol;\n  if (proto === 'http:' || proto === 'https:') {\n    const result = await isHttpResourceExists(artifactUrl);\n    return [version, result];\n  }\n  return [version, true];\n}\n\nasync function filterMissingArtifacts(\n  dependency: MavenDependency,\n  repoUrl: string,\n  versions: string[]\n): Promise<string[]> {\n  const cacheNamespace = 'datasource-maven-metadata';\n  const cacheKey = dependency.dependencyUrl;\n  let artifactsInfo: ArtifactsInfo | null = await packageCache.get<\n    ArtifactsInfo\n  >(cacheNamespace, cacheKey);\n\n  if (!isValidArtifactsInfo(artifactsInfo, versions)) {\n    const queue = versions\n      .map((version): [string, url.URL | null] => {\n        const artifactUrl = getMavenUrl(\n          dependency,\n          repoUrl,\n          `${version}/${dependency.name}-${version}.pom`\n        );\n        return [version, artifactUrl];\n      })\n      .filter(([_, artifactUrl]) => Boolean(artifactUrl))\n      .map(([version, artifactUrl]) => (): Promise<ArtifactInfoResult> =>\n        getArtifactInfo(version, artifactUrl)\n      );\n    const results = await pAll(queue, { concurrency: 5 });\n    artifactsInfo = results.reduce(\n      (acc, [key, value]) => ({\n        ...acc,\n        [key]: value,\n      }),\n      {}\n    );\n\n    // Retry earlier for status other than 404\n    const cacheTTL = Object.values(artifactsInfo).some((x) => x === null)\n      ? 60\n      : 24 * 60;\n\n    await packageCache.set(cacheNamespace, cacheKey, artifactsInfo, cacheTTL);\n  }\n\n  return versions.filter((v) => artifactsInfo[v]);\n}\n\nexport async function getReleases({\n  lookupName,\n  registryUrl,\n}: GetReleasesConfig): Promise<ReleaseResult | null> {\n  const dependency = getDependencyParts(lookupName);\n  const versions: string[] = [];\n  const repoForVersions = {};\n  const repoUrl = registryUrl.replace(/\\/?$/, '/');\n  logger.debug(`Looking up ${dependency.display} in repository ${repoUrl}`);\n  const metadataVersions = await getVersionsFromMetadata(dependency, repoUrl);\n  if (metadataVersions) {\n    let availableVersions = metadataVersions;\n    if (!process.env.RENOVATE_EXPERIMENTAL_NO_MAVEN_POM_CHECK) {\n      availableVersions = await filterMissingArtifacts(\n        dependency,\n        repoUrl,\n        metadataVersions\n      );\n    }\n    const filteredVersions = availableVersions.filter(\n      (version) => !versions.includes(version)\n    );\n    versions.push(...filteredVersions);\n\n    const latestVersion = getLatestStableVersion(filteredVersions);\n    if (latestVersion) {\n      repoForVersions[latestVersion] = repoUrl;\n    }\n\n    logger.debug(`Found ${availableVersions.length} new versions for ${dependency.display} in repository ${repoUrl}`); // prettier-ignore\n  }\n\n  if (!versions?.length) {\n    return null;\n  }\n\n  let dependencyInfo = {};\n  const latestVersion = getLatestStableVersion(versions);\n  if (latestVersion) {\n    dependencyInfo = await getDependencyInfo(\n      dependency,\n      repoForVersions[latestVersion],\n      latestVersion\n    );\n  }\n\n  return {\n    ...dependency,\n    ...dependencyInfo,\n    releases: versions.map((v) => ({ version: v })),\n  };\n}\n"]}