{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/datasource/git-submodules/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,6BAA0B;AAC1B,4DAA6B;AAE7B,uEAAyD;AAG5C,QAAA,EAAE,GAAG,gBAAgB,CAAC;AAEtB,QAAA,aAAa,GAAG;IAC3B,UAAU,EAAE,KAAK;CAClB,CAAC;AAEK,KAAK,UAAU,WAAW,CAAC,EAChC,UAAU,EACV,YAAY,GACM;IAClB,MAAM,cAAc,GAAG,2BAA2B,CAAC;IACnD,MAAM,QAAQ,GAAG,GAAG,YAAY,CAAC,CAAC,CAAC,IAAI,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC;IACzD,MAAM,YAAY,GAAG,MAAM,YAAY,CAAC,GAAG,CACzC,cAAc,EACd,QAAQ,CACT,CAAC;IACF,qBAAqB;IACrB,IAAI,YAAY,EAAE;QAChB,OAAO,YAAY,CAAC;KACrB;IAED,MAAM,GAAG,GAAG,oBAAG,EAAE,CAAC;IAClB,MAAM,OAAO,GAAG,CACd,MAAM,GAAG,CAAC,UAAU,CAAC,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CACnE;SACE,IAAI,EAAE;SACN,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAElB,MAAM,SAAS,GAAG,IAAI,SAAG,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;IAC3C,SAAS,CAAC,QAAQ,GAAG,EAAE,CAAC;IAExB,MAAM,MAAM,GAAG;QACb,SAAS,EAAE,SAAS,CAAC,IAAI;QACzB,QAAQ,EAAE;YACR;gBACE,OAAO,EAAE,OAAO;aACjB;SACF;KACF,CAAC;IACF,MAAM,YAAY,GAAG,EAAE,CAAC;IACxB,MAAM,YAAY,CAAC,GAAG,CAAC,cAAc,EAAE,QAAQ,EAAE,MAAM,EAAE,YAAY,CAAC,CAAC;IACvE,OAAO,MAAM,CAAC;AAChB,CAAC;AApCD,kCAoCC;AAEY,QAAA,SAAS,GAAG,CACvB,MAAoB,EACpB,QAAiB,EACA,EAAE,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC","sourcesContent":["import { URL } from 'url';\nimport Git from 'simple-git';\n\nimport * as packageCache from '../../util/cache/package';\nimport { DigestConfig, GetReleasesConfig, ReleaseResult } from '../common';\n\nexport const id = 'git-submodules';\n\nexport const defaultConfig = {\n  pinDigests: false,\n};\n\nexport async function getReleases({\n  lookupName,\n  registryUrls,\n}: GetReleasesConfig): Promise<ReleaseResult | null> {\n  const cacheNamespace = 'datasource-git-submodules';\n  const cacheKey = `${registryUrls[0]}-${registryUrls[1]}`;\n  const cachedResult = await packageCache.get<ReleaseResult>(\n    cacheNamespace,\n    cacheKey\n  );\n  // istanbul ignore if\n  if (cachedResult) {\n    return cachedResult;\n  }\n\n  const git = Git();\n  const newHash = (\n    await git.listRemote(['--refs', registryUrls[0], registryUrls[1]])\n  )\n    .trim()\n    .split(/\\t/)[0];\n\n  const sourceUrl = new URL(registryUrls[0]);\n  sourceUrl.username = '';\n\n  const result = {\n    sourceUrl: sourceUrl.href,\n    releases: [\n      {\n        version: newHash,\n      },\n    ],\n  };\n  const cacheMinutes = 60;\n  await packageCache.set(cacheNamespace, cacheKey, result, cacheMinutes);\n  return result;\n}\n\nexport const getDigest = (\n  config: DigestConfig,\n  newValue?: string\n): Promise<string> => new Promise((resolve) => resolve(newValue));\n"]}