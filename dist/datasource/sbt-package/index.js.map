{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/datasource/sbt-package/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { XmlDocument } from 'xmldoc';\nimport { logger } from '../../logger';\nimport { compare } from '../../versioning/maven/compare';\nimport { GetReleasesConfig, ReleaseResult } from '../common';\nimport { MAVEN_REPO } from '../maven/common';\nimport { downloadHttpProtocol } from '../maven/util';\nimport { parseIndexDir } from '../sbt-plugin/util';\n\nexport const id = 'sbt-package';\n\nexport const defaultRegistryUrls = [MAVEN_REPO];\nexport const registryStrategy = 'hunt';\n\nconst ensureTrailingSlash = (str: string): string => str.replace(/\\/?$/, '/');\n\nexport async function getArtifactSubdirs(\n  searchRoot: string,\n  artifact: string,\n  scalaVersion: string\n): Promise<string[]> {\n  const indexContent = await downloadHttpProtocol(\n    ensureTrailingSlash(searchRoot),\n    'sbt'\n  );\n  if (indexContent) {\n    const parseSubdirs = (content: string): string[] =>\n      parseIndexDir(content, (x) => {\n        if (x === artifact) {\n          return true;\n        }\n        if (x.startsWith(`${artifact}_native`)) {\n          return false;\n        }\n        if (x.startsWith(`${artifact}_sjs`)) {\n          return false;\n        }\n        return x.startsWith(`${artifact}_`);\n      });\n    let artifactSubdirs = parseSubdirs(indexContent);\n    if (\n      scalaVersion &&\n      artifactSubdirs.includes(`${artifact}_${scalaVersion}`)\n    ) {\n      artifactSubdirs = [`${artifact}_${scalaVersion}`];\n    }\n    return artifactSubdirs;\n  }\n\n  return null;\n}\n\nexport async function getPackageReleases(\n  searchRoot: string,\n  artifactSubdirs: string[]\n): Promise<string[]> {\n  if (artifactSubdirs) {\n    const releases: string[] = [];\n    const parseReleases = (content: string): string[] =>\n      parseIndexDir(content, (x) => !/^\\.+$/.test(x));\n    for (const searchSubdir of artifactSubdirs) {\n      const content = await downloadHttpProtocol(\n        ensureTrailingSlash(`${searchRoot}/${searchSubdir}`),\n        'sbt'\n      );\n      if (content) {\n        const subdirReleases = parseReleases(content);\n        subdirReleases.forEach((x) => releases.push(x));\n      }\n    }\n    if (releases.length) {\n      return [...new Set(releases)].sort(compare);\n    }\n  }\n\n  return null;\n}\n\nexport function getLatestVersion(versions: string[]): string | null {\n  if (versions?.length) {\n    return versions.reduce((latestVersion, version) =>\n      compare(version, latestVersion) === 1 ? version : latestVersion\n    );\n  }\n  return null;\n}\n\nexport async function getUrls(\n  searchRoot: string,\n  artifactDirs: string[],\n  version: string\n): Promise<Partial<ReleaseResult>> {\n  const result: Partial<ReleaseResult> = {};\n\n  if (!artifactDirs?.length) {\n    return result;\n  }\n\n  if (!version) {\n    return result;\n  }\n\n  for (const artifactDir of artifactDirs) {\n    const [artifact] = artifactDir.split('_');\n    const pomFileNames = [\n      `${artifactDir}-${version}.pom`,\n      `${artifact}-${version}.pom`,\n    ];\n\n    for (const pomFileName of pomFileNames) {\n      const pomUrl = `${searchRoot}/${artifactDir}/${version}/${pomFileName}`;\n      const content = await downloadHttpProtocol(pomUrl, 'sbt');\n\n      if (content) {\n        const pomXml = new XmlDocument(content);\n\n        const homepage = pomXml.valueWithPath('url');\n        if (homepage) {\n          result.homepage = homepage;\n        }\n\n        const sourceUrl = pomXml.valueWithPath('scm.url');\n        if (sourceUrl) {\n          result.sourceUrl = sourceUrl\n            .replace(/^scm:/, '')\n            .replace(/^git:/, '')\n            .replace(/^git@github.com:/, 'https://github.com/')\n            .replace(/\\.git$/, '');\n        }\n\n        return result;\n      }\n    }\n  }\n\n  return result;\n}\n\nexport async function getReleases({\n  lookupName,\n  registryUrl,\n}: GetReleasesConfig): Promise<ReleaseResult | null> {\n  const [groupId, artifactId] = lookupName.split(':');\n  const groupIdSplit = groupId.split('.');\n  const artifactIdSplit = artifactId.split('_');\n  const [artifact, scalaVersion] = artifactIdSplit;\n\n  const repoRoot = ensureTrailingSlash(registryUrl);\n  const searchRoots: string[] = [];\n  // Optimize lookup order\n  searchRoots.push(`${repoRoot}${groupIdSplit.join('/')}`);\n  searchRoots.push(`${repoRoot}${groupIdSplit.join('.')}`);\n\n  for (let idx = 0; idx < searchRoots.length; idx += 1) {\n    const searchRoot = searchRoots[idx];\n    const artifactSubdirs = await getArtifactSubdirs(\n      searchRoot,\n      artifact,\n      scalaVersion\n    );\n    const versions = await getPackageReleases(searchRoot, artifactSubdirs);\n    const latestVersion = getLatestVersion(versions);\n    const urls = await getUrls(searchRoot, artifactSubdirs, latestVersion);\n\n    const dependencyUrl = searchRoot;\n\n    if (versions) {\n      return {\n        ...urls,\n        display: lookupName,\n        group: groupId,\n        name: artifactId,\n        dependencyUrl,\n        releases: versions.map((v) => ({ version: v })),\n      };\n    }\n  }\n\n  logger.debug(\n    `No versions found for ${lookupName} in ${searchRoots.length} repositories`\n  );\n  return null;\n}\n"]}