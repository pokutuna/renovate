{"version":3,"file":"cache.js","sourceRoot":"","sources":["../../lib/datasource/cache.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,sCAAmC;AACnC,oEAAsD;AA+CtD;;;GAGG;AACI,KAAK,UAAU,SAAS,CAA0B,EACvD,EAAE,EACF,MAAM,EACN,EAAE,EACF,OAAO,GAAG,EAAE,GACe;IAC3B,MAAM,cAAc,GAAG,cAAc,EAAE,EAAE,CAAC;IAC1C,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;IACxC,MAAM,YAAY,GAAG,MAAM,YAAY,CAAC,GAAG,CACzC,cAAc,EACd,QAAQ,CACT,CAAC;IACF,qBAAqB;IACrB,IAAI,YAAY,EAAE;QAChB,eAAM,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,yBAAyB,CAAC,CAAC;QACxD,OAAO,YAAY,CAAC;KACrB;IACD,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,GAAG,MAAM,EAAE,CAAC,MAAM,CAAC,CAAC;IAC7C,qBAAqB;IACrB,IAAI,SAAS,EAAE;QACb,eAAM,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,4CAA4C,CAAC,CAAC;KAC5E;SAAM;QACL,MAAM,YAAY,CAAC,GAAG,CAAC,cAAc,EAAE,QAAQ,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;KACjE;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAzBD,8BAyBC","sourcesContent":["import { logger } from '../logger';\nimport * as packageCache from '../util/cache/package';\n\n/**\n * Cache callback result which has to be returned by the `CacheCallback` function.\n */\nexport interface CacheResult<TResult = unknown> {\n  /**\n   * The data which should be added to the cache\n   */\n  data: TResult;\n  /**\n   * `data` can only be cached if this is not `true`\n   */\n  isPrivate?: boolean;\n}\n\n/**\n * Simple helper type for defining the `CacheCallback` function return type\n */\nexport type CachePromise<TResult = unknown> = Promise<CacheResult<TResult>>;\n\n/**\n * The callback function which is called on cache miss.\n */\nexport type CacheCallback<TArg, TResult = unknown> = (\n  lookup: TArg\n) => CachePromise<TResult>;\n\nexport type CacheConfig<TArg, TResult> = {\n  /**\n   * Datasource id\n   */\n  id: string;\n  /**\n   * Cache key\n   */\n  lookup: TArg;\n  /**\n   * Callback to use on cache miss to load result\n   */\n  cb: CacheCallback<TArg, TResult>;\n  /**\n   * Time to cache result in minutes\n   */\n  minutes?: number;\n};\n\n/**\n * Loads result from cache or from passed callback on cache miss.\n * @param param0 Cache config args\n */\nexport async function cacheAble<TArg, TResult = unknown>({\n  id,\n  lookup,\n  cb,\n  minutes = 60,\n}: CacheConfig<TArg, TResult>): Promise<TResult> {\n  const cacheNamespace = `datasource-${id}`;\n  const cacheKey = JSON.stringify(lookup);\n  const cachedResult = await packageCache.get<TResult>(\n    cacheNamespace,\n    cacheKey\n  );\n  // istanbul ignore if\n  if (cachedResult) {\n    logger.trace({ id, lookup }, 'datasource cachedResult');\n    return cachedResult;\n  }\n  const { data, isPrivate } = await cb(lookup);\n  // istanbul ignore if\n  if (isPrivate) {\n    logger.trace({ id, lookup }, 'Skipping datasource cache for private data');\n  } else {\n    await packageCache.set(cacheNamespace, cacheKey, data, minutes);\n  }\n  return data;\n}\n"]}