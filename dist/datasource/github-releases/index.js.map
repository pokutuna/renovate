{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/datasource/github-releases/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,uEAAyD;AACzD,mDAAoD;AAGvC,QAAA,EAAE,GAAG,iBAAiB,CAAC;AAEpC,MAAM,cAAc,GAAG,4BAA4B,CAAC;AAEpD,MAAM,IAAI,GAAG,IAAI,mBAAU,EAAE,CAAC;AAO9B;;;;;;;;;GASG;AACI,KAAK,UAAU,WAAW,CAAC,EAChC,UAAU,EAAE,IAAI,GACE;IAClB,MAAM,YAAY,GAAG,MAAM,YAAY,CAAC,GAAG,CACzC,cAAc,EACd,IAAI,CACL,CAAC;IACF,qBAAqB;IACrB,IAAI,YAAY,EAAE;QAChB,OAAO,YAAY,CAAC;KACrB;IACD,MAAM,GAAG,GAAG,gCAAgC,IAAI,wBAAwB,CAAC;IACzE,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,OAAO,CAAkB,GAAG,EAAE;QACnD,QAAQ,EAAE,IAAI;KACf,CAAC,CAAC;IACH,MAAM,cAAc,GAAG,GAAG,CAAC,IAAI,CAAC;IAChC,MAAM,UAAU,GAAkB;QAChC,SAAS,EAAE,qBAAqB,GAAG,IAAI;QACvC,QAAQ,EAAE,IAAI;KACf,CAAC;IACF,UAAU,CAAC,QAAQ,GAAG,cAAc,CAAC,GAAG,CAAC,CAAC,EAAE,QAAQ,EAAE,YAAY,EAAE,EAAE,EAAE,CAAC,CAAC;QACxE,OAAO,EAAE,QAAQ;QACjB,MAAM,EAAE,QAAQ;QAChB,gBAAgB,EAAE,YAAY;KAC/B,CAAC,CAAC,CAAC;IACJ,MAAM,YAAY,GAAG,EAAE,CAAC;IACxB,MAAM,YAAY,CAAC,GAAG,CAAC,cAAc,EAAE,IAAI,EAAE,UAAU,EAAE,YAAY,CAAC,CAAC;IACvE,OAAO,UAAU,CAAC;AACpB,CAAC;AA5BD,kCA4BC","sourcesContent":["import * as packageCache from '../../util/cache/package';\nimport { GithubHttp } from '../../util/http/github';\nimport { GetReleasesConfig, ReleaseResult } from '../common';\n\nexport const id = 'github-releases';\n\nconst cacheNamespace = 'datasource-github-releases';\n\nconst http = new GithubHttp();\n\ntype GithubRelease = {\n  tag_name: string;\n  published_at: string;\n};\n\n/**\n * github.getReleases\n *\n * This function can be used to fetch releases with a customisable versioning (e.g. semver) and with releases.\n *\n * This function will:\n *  - Fetch all releases\n *  - Sanitize the versions if desired (e.g. strip out leading 'v')\n *  - Return a dependency object containing sourceUrl string and releases array\n */\nexport async function getReleases({\n  lookupName: repo,\n}: GetReleasesConfig): Promise<ReleaseResult | null> {\n  const cachedResult = await packageCache.get<ReleaseResult>(\n    cacheNamespace,\n    repo\n  );\n  // istanbul ignore if\n  if (cachedResult) {\n    return cachedResult;\n  }\n  const url = `https://api.github.com/repos/${repo}/releases?per_page=100`;\n  const res = await http.getJson<GithubRelease[]>(url, {\n    paginate: true,\n  });\n  const githubReleases = res.body;\n  const dependency: ReleaseResult = {\n    sourceUrl: 'https://github.com/' + repo,\n    releases: null,\n  };\n  dependency.releases = githubReleases.map(({ tag_name, published_at }) => ({\n    version: tag_name,\n    gitRef: tag_name,\n    releaseTimestamp: published_at,\n  }));\n  const cacheMinutes = 10;\n  await packageCache.set(cacheNamespace, repo, dependency, cacheMinutes);\n  return dependency;\n}\n"]}