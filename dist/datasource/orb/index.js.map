{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/datasource/orb/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,yCAAsC;AACtC,uEAAyD;AACzD,0CAAuC;AAG1B,QAAA,EAAE,GAAG,KAAK,CAAC;AAExB,MAAM,IAAI,GAAG,IAAI,WAAI,CAAC,UAAE,CAAC,CAAC;AAU1B;;;;GAIG;AACI,KAAK,UAAU,WAAW,CAAC,EAChC,UAAU,GACQ;;IAClB,eAAM,CAAC,KAAK,CAAC,EAAE,UAAU,EAAE,EAAE,mBAAmB,CAAC,CAAC;IAClD,MAAM,cAAc,GAAG,KAAK,CAAC;IAC7B,MAAM,QAAQ,GAAG,UAAU,CAAC;IAC5B,MAAM,YAAY,GAAG,MAAM,YAAY,CAAC,GAAG,CACzC,cAAc,EACd,QAAQ,CACT,CAAC;IACF,qBAAqB;IACrB,IAAI,YAAY,EAAE;QAChB,OAAO,YAAY,CAAC;KACrB;IACD,MAAM,GAAG,GAAG,uCAAuC,CAAC;IACpD,MAAM,IAAI,GAAG;QACX,KAAK,EAAE,cAAc,UAAU,mDAAmD;QAClF,SAAS,EAAE,EAAE;KACd,CAAC;IACF,MAAM,GAAG,GAAe,CACtB,MAAM,IAAI,CAAC,QAAQ,CAAgC,GAAG,EAAE;QACtD,IAAI;KACL,CAAC,CACH,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;IAChB,IAAI,CAAC,GAAG,EAAE;QACR,eAAM,CAAC,KAAK,CAAC,EAAE,UAAU,EAAE,EAAE,uBAAuB,CAAC,CAAC;QACtD,OAAO,IAAI,CAAC;KACb;IACD,iDAAiD;IACjD,MAAM,GAAG,GAAkB;QACzB,IAAI,EAAE,UAAU;QAChB,QAAQ,EAAE,EAAE;QACZ,QAAQ,EAAE,IAAI;KACf,CAAC;IACF,UAAI,GAAG,CAAC,OAAO,0CAAE,MAAM,EAAE;QACvB,GAAG,CAAC,QAAQ,GAAG,GAAG,CAAC,OAAO,CAAC;KAC5B;IACD,GAAG,CAAC,QAAQ;QACV,GAAG,CAAC,QAAQ,IAAI,0CAA0C,UAAU,EAAE,CAAC;IACzE,GAAG,CAAC,QAAQ,GAAG,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,OAAO,EAAE,SAAS,EAAE,EAAE,EAAE,CAAC,CAAC;QAC3D,OAAO;QACP,gBAAgB,EAAE,SAAS,IAAI,IAAI;KACpC,CAAC,CAAC,CAAC;IACJ,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,EAAE,KAAK,CAAC,CAAC;IAC7B,MAAM,YAAY,GAAG,EAAE,CAAC;IACxB,MAAM,YAAY,CAAC,GAAG,CAAC,cAAc,EAAE,QAAQ,EAAE,GAAG,EAAE,YAAY,CAAC,CAAC;IACpE,OAAO,GAAG,CAAC;AACb,CAAC;AA/CD,kCA+CC","sourcesContent":["import { logger } from '../../logger';\nimport * as packageCache from '../../util/cache/package';\nimport { Http } from '../../util/http';\nimport { GetReleasesConfig, ReleaseResult } from '../common';\n\nexport const id = 'orb';\n\nconst http = new Http(id);\n\ninterface OrbRelease {\n  homeUrl?: string;\n  versions: {\n    version: string;\n    createdAt?: string;\n  }[];\n}\n\n/**\n * orb.getReleases\n *\n * This function will fetch an orb from CircleCI and return all semver versions.\n */\nexport async function getReleases({\n  lookupName,\n}: GetReleasesConfig): Promise<ReleaseResult | null> {\n  logger.debug({ lookupName }, 'orb.getReleases()');\n  const cacheNamespace = 'orb';\n  const cacheKey = lookupName;\n  const cachedResult = await packageCache.get<ReleaseResult>(\n    cacheNamespace,\n    cacheKey\n  );\n  // istanbul ignore if\n  if (cachedResult) {\n    return cachedResult;\n  }\n  const url = 'https://circleci.com/graphql-unstable';\n  const body = {\n    query: `{orb(name:\"${lookupName}\"){name, homeUrl, versions {version, createdAt}}}`,\n    variables: {},\n  };\n  const res: OrbRelease = (\n    await http.postJson<{ data: { orb: OrbRelease } }>(url, {\n      body,\n    })\n  ).body.data.orb;\n  if (!res) {\n    logger.debug({ lookupName }, 'Failed to look up orb');\n    return null;\n  }\n  // Simplify response before caching and returning\n  const dep: ReleaseResult = {\n    name: lookupName,\n    versions: {},\n    releases: null,\n  };\n  if (res.homeUrl?.length) {\n    dep.homepage = res.homeUrl;\n  }\n  dep.homepage =\n    dep.homepage || `https://circleci.com/orbs/registry/orb/${lookupName}`;\n  dep.releases = res.versions.map(({ version, createdAt }) => ({\n    version,\n    releaseTimestamp: createdAt || null,\n  }));\n  logger.trace({ dep }, 'dep');\n  const cacheMinutes = 15;\n  await packageCache.set(cacheNamespace, cacheKey, dep, cacheMinutes);\n  return dep;\n}\n"]}