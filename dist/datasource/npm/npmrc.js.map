{"version":3,"file":"npmrc.js","sourceRoot":"","sources":["../../../lib/datasource/npm/npmrc.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport ini from 'ini';\nimport { logger } from '../../logger';\nimport { add } from '../../util/sanitize';\n\nlet npmrc: Record<string, any> | null = null;\nlet npmrcRaw: string;\n\nexport function getNpmrc(): Record<string, any> | null {\n  return npmrc;\n}\n\nfunction envReplace(value: any, env = process.env): any {\n  // istanbul ignore if\n  if (!is.string(value)) {\n    return value;\n  }\n\n  const ENV_EXPR = /(\\\\*)\\$\\{([^}]+)\\}/g;\n\n  return value.replace(ENV_EXPR, (match, esc, envVarName) => {\n    if (env[envVarName] === undefined) {\n      logger.warn('Failed to replace env in config: ' + match);\n      throw new Error('env-replace');\n    }\n    return env[envVarName];\n  });\n}\n\nconst envRe = /(\\\\*)\\$\\{([^}]+)\\}/;\n// TODO: better add to host rules\nfunction sanitize(key: string, val: string): void {\n  if (!val || envRe.test(val)) {\n    return;\n  }\n  if (key.endsWith('_authToken') || key.endsWith('_auth')) {\n    add(val);\n  } else if (key.endsWith(':_password')) {\n    add(val);\n    const password = Buffer.from(val, 'base64').toString();\n    add(password);\n    const username = npmrc[key.replace(':_password', ':username')];\n    add(Buffer.from(`${username}:${password}`).toString('base64'));\n  }\n}\n\nexport function setNpmrc(input?: string): void {\n  if (input) {\n    if (input === npmrcRaw) {\n      return;\n    }\n    const existingNpmrc = npmrc;\n    npmrcRaw = input;\n    logger.debug('Setting npmrc');\n    npmrc = ini.parse(input.replace(/\\\\n/g, '\\n'));\n    for (const [key, val] of Object.entries(npmrc)) {\n      if (global.trustLevel !== 'high') {\n        sanitize(key, val);\n      }\n      if (\n        global.trustLevel !== 'high' &&\n        key.endsWith('registry') &&\n        val &&\n        val.includes('localhost')\n      ) {\n        logger.debug(\n          { key, val },\n          'Detected localhost registry - rejecting npmrc file'\n        );\n        npmrc = existingNpmrc;\n        return;\n      }\n    }\n    if (global.trustLevel !== 'high') {\n      return;\n    }\n    for (const key of Object.keys(npmrc)) {\n      npmrc[key] = envReplace(npmrc[key]);\n      sanitize(key, npmrc[key]);\n    }\n  } else if (npmrc) {\n    logger.debug('Resetting npmrc');\n    npmrc = null;\n    npmrcRaw = null;\n  }\n}\n"]}