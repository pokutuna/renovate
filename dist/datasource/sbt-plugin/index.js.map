{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/datasource/sbt-plugin/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger } from '../../logger';\nimport { compare } from '../../versioning/maven/compare';\nimport { GetReleasesConfig, ReleaseResult } from '../common';\nimport { downloadHttpProtocol } from '../maven/util';\nimport {\n  getArtifactSubdirs,\n  getLatestVersion,\n  getPackageReleases,\n  getUrls,\n} from '../sbt-package';\nimport { SBT_PLUGINS_REPO, parseIndexDir } from './util';\n\nexport const id = 'sbt-plugin';\n\nexport const defaultRegistryUrls = [SBT_PLUGINS_REPO];\nexport const registryStrategy = 'hunt';\n\nconst ensureTrailingSlash = (str: string): string => str.replace(/\\/?$/, '/');\n\nasync function resolvePluginReleases(\n  rootUrl: string,\n  artifact: string,\n  scalaVersion: string\n): Promise<string[]> {\n  const searchRoot = `${rootUrl}/${artifact}`;\n  const parse = (content: string): string[] =>\n    parseIndexDir(content, (x) => !/^\\.+$/.test(x));\n  const indexContent = await downloadHttpProtocol(\n    ensureTrailingSlash(searchRoot),\n    'sbt'\n  );\n  if (indexContent) {\n    const releases: string[] = [];\n    const scalaVersionItems = parse(indexContent);\n    const scalaVersions = scalaVersionItems.map((x) =>\n      x.replace(/^scala_/, '')\n    );\n    const searchVersions = !scalaVersions.includes(scalaVersion)\n      ? scalaVersions\n      : [scalaVersion];\n    for (const searchVersion of searchVersions) {\n      const searchSubRoot = `${searchRoot}/scala_${searchVersion}`;\n      const subRootContent = await downloadHttpProtocol(\n        ensureTrailingSlash(searchSubRoot),\n        'sbt'\n      );\n      if (subRootContent) {\n        const sbtVersionItems = parse(subRootContent);\n        for (const sbtItem of sbtVersionItems) {\n          const releasesRoot = `${searchSubRoot}/${sbtItem}`;\n          const releasesIndexContent = await downloadHttpProtocol(\n            ensureTrailingSlash(releasesRoot),\n            'sbt'\n          );\n          if (releasesIndexContent) {\n            const releasesParsed = parse(releasesIndexContent);\n            releasesParsed.forEach((x) => releases.push(x));\n          }\n        }\n      }\n    }\n    if (releases.length) {\n      return [...new Set(releases)].sort(compare);\n    }\n  }\n  return null;\n}\n\nexport async function getReleases({\n  lookupName,\n  registryUrl,\n}: GetReleasesConfig): Promise<ReleaseResult | null> {\n  const [groupId, artifactId] = lookupName.split(':');\n  const groupIdSplit = groupId.split('.');\n  const artifactIdSplit = artifactId.split('_');\n  const [artifact, scalaVersion] = artifactIdSplit;\n\n  const repoRoot = ensureTrailingSlash(registryUrl);\n  const searchRoots: string[] = [];\n  // Optimize lookup order\n  searchRoots.push(`${repoRoot}${groupIdSplit.join('.')}`);\n  searchRoots.push(`${repoRoot}${groupIdSplit.join('/')}`);\n\n  for (let idx = 0; idx < searchRoots.length; idx += 1) {\n    const searchRoot = searchRoots[idx];\n    let versions = await resolvePluginReleases(\n      searchRoot,\n      artifact,\n      scalaVersion\n    );\n    let urls = {};\n\n    if (!versions?.length) {\n      const artifactSubdirs = await getArtifactSubdirs(\n        searchRoot,\n        artifact,\n        scalaVersion\n      );\n      versions = await getPackageReleases(searchRoot, artifactSubdirs);\n      const latestVersion = getLatestVersion(versions);\n      urls = await getUrls(searchRoot, artifactSubdirs, latestVersion);\n    }\n\n    const dependencyUrl = `${searchRoot}/${artifact}`;\n\n    if (versions) {\n      return {\n        ...urls,\n        display: lookupName,\n        group: groupId,\n        name: artifactId,\n        dependencyUrl,\n        releases: versions.map((v) => ({ version: v })),\n      };\n    }\n  }\n\n  logger.debug(\n    `No versions found for ${lookupName} in ${searchRoots.length} repositories`\n  );\n  return null;\n}\n"]}