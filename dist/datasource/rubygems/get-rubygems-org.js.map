{"version":3,"file":"get-rubygems-org.js","sourceRoot":"","sources":["../../../lib/datasource/rubygems/get-rubygems-org.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger } from '../../logger';\nimport { ExternalHostError } from '../../types/errors/external-host-error';\nimport { Http } from '../../util/http';\nimport { ReleaseResult } from '../common';\nimport { id } from './common';\n\nconst http = new Http(id);\n\nlet lastSync = new Date('2000-01-01');\nlet packageReleases: Record<string, string[]> = Object.create(null); // Because we might need a \"constructor\" key\nlet contentLength = 0;\n\n// Note: use only for tests\nexport function resetCache(): void {\n  lastSync = new Date('2000-01-01');\n  packageReleases = Object.create(null);\n  contentLength = 0;\n}\n\n/* https://bugs.chromium.org/p/v8/issues/detail?id=2869 */\nconst copystr = (x: string): string => (' ' + x).slice(1);\n\nasync function updateRubyGemsVersions(): Promise<void> {\n  const url = 'https://rubygems.org/versions';\n  const options = {\n    headers: {\n      'accept-encoding': 'identity',\n      range: `bytes=${contentLength}-`,\n    },\n  };\n  let newLines: string;\n  try {\n    logger.debug('Rubygems: Fetching rubygems.org versions');\n    const startTime = Date.now();\n    newLines = (await http.get(url, options)).body;\n    const durationMs = Math.round(Date.now() - startTime);\n    logger.debug({ durationMs }, 'Rubygems: Fetched rubygems.org versions');\n  } catch (err) /* istanbul ignore next */ {\n    if (err.statusCode !== 416) {\n      contentLength = 0;\n      packageReleases = Object.create(null); // Because we might need a \"constructor\" key\n      throw new ExternalHostError(\n        new Error('Rubygems fetch error - need to reset cache')\n      );\n    }\n    logger.debug('Rubygems: No update');\n    lastSync = new Date();\n    return;\n  }\n\n  function processLine(line: string): void {\n    let split: string[];\n    let pkg: string;\n    let versions: string;\n    try {\n      const l = line.trim();\n      if (!l.length || l.startsWith('created_at:') || l === '---') {\n        return;\n      }\n      split = l.split(' ');\n      [pkg, versions] = split;\n      pkg = copystr(pkg);\n      packageReleases[pkg] = packageReleases[pkg] || [];\n      const lineVersions = versions.split(',').map((version) => version.trim());\n      for (const lineVersion of lineVersions) {\n        if (lineVersion.startsWith('-')) {\n          const deletedVersion = lineVersion.slice(1);\n          logger.trace({ pkg, deletedVersion }, 'Rubygems: Deleting version');\n          packageReleases[pkg] = packageReleases[pkg].filter(\n            (version) => version !== deletedVersion\n          );\n        } else {\n          packageReleases[pkg].push(copystr(lineVersion));\n        }\n      }\n    } catch (err) /* istanbul ignore next */ {\n      logger.warn(\n        { err, line, split, pkg, versions },\n        'Rubygems line parsing error'\n      );\n    }\n  }\n\n  for (const line of newLines.split('\\n')) {\n    processLine(line);\n  }\n  lastSync = new Date();\n}\n\nfunction isDataStale(): boolean {\n  const minutesElapsed = Math.floor(\n    (new Date().getTime() - lastSync.getTime()) / (60 * 1000)\n  );\n  return minutesElapsed >= 5;\n}\n\nlet _updateRubyGemsVersions: Promise<void> | undefined;\n\nasync function syncVersions(): Promise<void> {\n  if (isDataStale()) {\n    _updateRubyGemsVersions =\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      _updateRubyGemsVersions || updateRubyGemsVersions();\n    await _updateRubyGemsVersions;\n    _updateRubyGemsVersions = null;\n  }\n}\n\nexport async function getRubygemsOrgDependency(\n  lookupName: string\n): Promise<ReleaseResult | null> {\n  logger.debug(`getRubygemsOrgDependency(${lookupName})`);\n  await syncVersions();\n  if (!packageReleases[lookupName]) {\n    return null;\n  }\n  const dep: ReleaseResult = {\n    name: lookupName,\n    releases: packageReleases[lookupName].map((version) => ({ version })),\n  };\n  return dep;\n}\n"]}