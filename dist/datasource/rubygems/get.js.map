{"version":3,"file":"get.js","sourceRoot":"","sources":["../../../lib/datasource/rubygems/get.ts"],"names":[],"mappings":";;;AACA,yCAAsC;AACtC,0CAAuC;AACvC,wCAAqD;AAErD,qCAA8B;AAE9B,MAAM,IAAI,GAAG,IAAI,WAAI,CAAC,WAAE,CAAC,CAAC;AAE1B,MAAM,SAAS,GAAG,cAAc,CAAC;AACjC,MAAM,aAAa,GAAG,kBAAkB,CAAC;AAEzC,MAAM,UAAU,GAAG,GAAwB,EAAE;IAC3C,OAAO,EAAE,QAAQ,EAAE,WAAE,EAAE,CAAC;AAC1B,CAAC,CAAC;AAEF,MAAM,KAAK,GAAG,KAAK,EAAE,EAAE,UAAU,EAAE,QAAQ,EAAE,IAAI,EAAE,EAAgB,EAAE;IACnE,MAAM,OAAO,GAAG,UAAU,EAAE,CAAC;IAE7B,MAAM,IAAI,GAAG,GAAG,IAAI,IAAI,UAAU,OAAO,CAAC;IAC1C,MAAM,OAAO,GAAG,yBAAmB,CAAC,QAAQ,CAAC,CAAC;IAE9C,eAAM,CAAC,KAAK,CAAC,EAAE,UAAU,EAAE,EAAE,4BAA4B,OAAO,IAAI,IAAI,EAAE,CAAC,CAAC;IAC5E,MAAM,QAAQ,GAAG,CAAC,MAAM,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC,IAAI;QACnE,IAAI,EAAE,SAAS;KAChB,CAAC;IAEF,OAAO,QAAQ,CAAC,IAAI,CAAC;AACvB,CAAC,CAAC;AAEW,QAAA,aAAa,GAAG,KAAK,EAAE,EAClC,UAAU,EACV,QAAQ,GACT,EAAiC,EAAE;IAClC,eAAM,CAAC,KAAK,CAAC,EAAE,UAAU,EAAE,EAAE,gCAAgC,CAAC,CAAC;IAC/D,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,EAAE,UAAU,EAAE,QAAQ,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC,CAAC;IACpE,IAAI,CAAC,IAAI,EAAE;QACT,eAAM,CAAC,KAAK,CAAC,EAAE,UAAU,EAAE,EAAE,6BAA6B,CAAC,CAAC;QAC5D,OAAO,IAAI,CAAC;KACb;IAED,IAAI,UAAU,CAAC,WAAW,EAAE,KAAK,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE;QACxD,eAAM,CAAC,IAAI,CACT,EAAE,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,IAAI,CAAC,IAAI,EAAE,EAC3C,2CAA2C,CAC5C,CAAC;QACF,OAAO,IAAI,CAAC;KACb;IAED,MAAM,QAAQ,GACZ,CAAC,MAAM,KAAK,CAAC,EAAE,UAAU,EAAE,QAAQ,EAAE,IAAI,EAAE,aAAa,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;IAErE,MAAM,QAAQ,GAAG,QAAQ,CAAC,GAAG,CAC3B,CAAC,EACC,MAAM,EAAE,OAAO,EACf,QAAQ,EAAE,YAAY,EACtB,UAAU,EAAE,gBAAgB,EAC5B,gBAAgB,EAAE,eAAe,EACjC,YAAY,EAAE,WAAW,GAC1B,EAAE,EAAE,CAAC,CAAC;QACL,OAAO;QACP,YAAY;QACZ,gBAAgB;QAChB,eAAe;QACf,WAAW;KACZ,CAAC,CACH,CAAC;IAEF,OAAO;QACL,QAAQ;QACR,QAAQ,EAAE,IAAI,CAAC,YAAY;QAC3B,SAAS,EAAE,IAAI,CAAC,eAAe;QAC/B,YAAY,EAAE,IAAI,CAAC,aAAa;KACjC,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { OutgoingHttpHeaders } from 'http';\nimport { logger } from '../../logger';\nimport { Http } from '../../util/http';\nimport { ensureTrailingSlash } from '../../util/url';\nimport { ReleaseResult } from '../common';\nimport { id } from './common';\n\nconst http = new Http(id);\n\nconst INFO_PATH = '/api/v1/gems';\nconst VERSIONS_PATH = '/api/v1/versions';\n\nconst getHeaders = (): OutgoingHttpHeaders => {\n  return { hostType: id };\n};\n\nconst fetch = async ({ dependency, registry, path }): Promise<any> => {\n  const headers = getHeaders();\n\n  const name = `${path}/${dependency}.json`;\n  const baseUrl = ensureTrailingSlash(registry);\n\n  logger.trace({ dependency }, `RubyGems lookup request: ${baseUrl} ${name}`);\n  const response = (await http.getJson(name, { baseUrl, headers })) || {\n    body: undefined,\n  };\n\n  return response.body;\n};\n\nexport const getDependency = async ({\n  dependency,\n  registry,\n}): Promise<ReleaseResult | null> => {\n  logger.debug({ dependency }, 'RubyGems lookup for dependency');\n  const info = await fetch({ dependency, registry, path: INFO_PATH });\n  if (!info) {\n    logger.debug({ dependency }, 'RubyGems package not found.');\n    return null;\n  }\n\n  if (dependency.toLowerCase() !== info.name.toLowerCase()) {\n    logger.warn(\n      { lookup: dependency, returned: info.name },\n      'Lookup name does not match with returned.'\n    );\n    return null;\n  }\n\n  const versions =\n    (await fetch({ dependency, registry, path: VERSIONS_PATH })) || [];\n\n  const releases = versions.map(\n    ({\n      number: version,\n      platform: rubyPlatform,\n      created_at: releaseTimestamp,\n      rubygems_version: rubygemsVersion,\n      ruby_version: rubyVersion,\n    }) => ({\n      version,\n      rubyPlatform,\n      releaseTimestamp,\n      rubygemsVersion,\n      rubyVersion,\n    })\n  );\n\n  return {\n    releases,\n    homepage: info.homepage_uri,\n    sourceUrl: info.source_code_uri,\n    changelogUrl: info.changelog_uri,\n  };\n};\n"]}