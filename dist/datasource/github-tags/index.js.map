{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/datasource/github-tags/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger } from '../../logger';\nimport * as packageCache from '../../util/cache/package';\nimport { GithubHttp } from '../../util/http/github';\nimport { DigestConfig, GetReleasesConfig, ReleaseResult } from '../common';\n\nexport const id = 'github-tags';\n\nconst http = new GithubHttp();\n\nconst cacheNamespace = 'datasource-github-tags';\nfunction getCacheKey(repo: string, type: string): string {\n  return `${repo}:${type}`;\n}\n\ninterface TagResponse {\n  object: {\n    type: string;\n    url: string;\n    sha: string;\n  };\n}\n\nasync function getTagCommit(\n  githubRepo: string,\n  tag: string\n): Promise<string | null> {\n  const cachedResult = await packageCache.get<string>(\n    cacheNamespace,\n    getCacheKey(githubRepo, `tag-${tag}`)\n  );\n  // istanbul ignore if\n  if (cachedResult) {\n    return cachedResult;\n  }\n  let digest: string;\n  try {\n    const url = `https://api.github.com/repos/${githubRepo}/git/refs/tags/${tag}`;\n    const res = (await http.getJson<TagResponse>(url)).body.object;\n    if (res.type === 'commit') {\n      digest = res.sha;\n    } else if (res.type === 'tag') {\n      digest = (await http.getJson<TagResponse>(res.url)).body.object.sha;\n    } else {\n      logger.warn({ res }, 'Unknown git tag refs type');\n    }\n  } catch (err) {\n    logger.debug(\n      { githubRepo, err },\n      'Error getting tag commit from GitHub repo'\n    );\n  }\n  if (!digest) {\n    return null;\n  }\n  const cacheMinutes = 120;\n  await packageCache.set(\n    cacheNamespace,\n    getCacheKey(githubRepo, `tag-${tag}`),\n    digest,\n    cacheMinutes\n  );\n  return digest;\n}\n\n/**\n * github.getDigest\n *\n * The `newValue` supplied here should be a valid tag for the docker image.\n *\n * This function will simply return the latest commit hash for the configured repository.\n */\nexport async function getDigest(\n  { lookupName: githubRepo }: Partial<DigestConfig>,\n  newValue?: string\n): Promise<string | null> {\n  if (newValue?.length) {\n    return getTagCommit(githubRepo, newValue);\n  }\n  const cachedResult = await packageCache.get(\n    cacheNamespace,\n    getCacheKey(githubRepo, 'commit')\n  );\n  // istanbul ignore if\n  if (cachedResult) {\n    return cachedResult;\n  }\n  let digest: string;\n  try {\n    const url = `https://api.github.com/repos/${githubRepo}/commits?per_page=1`;\n    const res = await http.getJson<{ sha: string }[]>(url);\n    digest = res.body[0].sha;\n  } catch (err) {\n    logger.debug(\n      { githubRepo, err },\n      'Error getting latest commit from GitHub repo'\n    );\n  }\n  if (!digest) {\n    return null;\n  }\n  const cacheMinutes = 10;\n  await packageCache.set(\n    cacheNamespace,\n    getCacheKey(githubRepo, 'commit'),\n    digest,\n    cacheMinutes\n  );\n  return digest;\n}\n\n/**\n * github.getReleases\n *\n * This function can be used to fetch releases with a customisable versioning (e.g. semver) and with either tags or releases.\n *\n * This function will:\n *  - Fetch all tags or releases (depending on configuration)\n *  - Sanitize the versions if desired (e.g. strip out leading 'v')\n *  - Return a dependency object containing sourceUrl string and releases array\n */\nexport async function getReleases({\n  lookupName: repo,\n}: GetReleasesConfig): Promise<ReleaseResult | null> {\n  const cachedResult = await packageCache.get<ReleaseResult>(\n    cacheNamespace,\n    getCacheKey(repo, 'tags')\n  );\n  // istanbul ignore if\n  if (cachedResult) {\n    return cachedResult;\n  }\n  // tag\n  const url = `https://api.github.com/repos/${repo}/tags?per_page=100`;\n  type GitHubTag = {\n    name: string;\n  }[];\n\n  const versions = (\n    await http.getJson<GitHubTag>(url, {\n      paginate: true,\n    })\n  ).body.map((o) => o.name);\n  const dependency: ReleaseResult = {\n    sourceUrl: 'https://github.com/' + repo,\n    releases: null,\n  };\n  dependency.releases = versions.map((version) => ({\n    version,\n    gitRef: version,\n  }));\n  const cacheMinutes = 10;\n  await packageCache.set(\n    cacheNamespace,\n    getCacheKey(repo, 'tags'),\n    dependency,\n    cacheMinutes\n  );\n  return dependency;\n}\n"]}