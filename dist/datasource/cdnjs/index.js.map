{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/datasource/cdnjs/index.ts"],"names":[],"mappings":";;;AAAA,gFAA2E;AAC3E,0CAAuC;AACvC,oCAAmD;AAGtC,QAAA,EAAE,GAAG,OAAO,CAAC;AAE1B,MAAM,IAAI,GAAG,IAAI,WAAI,CAAC,UAAE,CAAC,CAAC;AAiB1B,KAAK,UAAU,eAAe,CAAC,OAAe;IAC5C,MAAM,GAAG,GAAG,mCAAmC,OAAO,oCAAoC,CAAC;IAC3F,OAAO,EAAE,IAAI,EAAE,CAAC,MAAM,IAAI,CAAC,OAAO,CAAgB,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;AACjE,CAAC;AAEM,KAAK,UAAU,WAAW,CAAC,EAChC,UAAU,GACQ;IAClB,+FAA+F;IAC/F,MAAM,OAAO,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACzC,IAAI;QACF,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,UAAU,EAAE,GAAG,MAAM,iBAAS,CAAC;YACvD,EAAE,EAAF,UAAE;YACF,MAAM,EAAE,OAAO;YACf,EAAE,EAAE,eAAe;SACpB,CAAC,CAAC;QACH,IAAI,CAAC,MAAM,EAAE;YACX,OAAO,IAAI,CAAC;SACb;QACD,MAAM,SAAS,GAAG,UAAU,CAAC,OAAO,CAAC,GAAG,OAAO,GAAG,EAAE,EAAE,CAAC,CAAC;QACxD,MAAM,QAAQ,GAAG,MAAM;aACpB,MAAM,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;aAChD,GAAG,CAAC,CAAC,EAAE,OAAO,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,SAAS,EAAE,GAAG,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;QAEvE,MAAM,MAAM,GAAkB,EAAE,QAAQ,EAAE,CAAC;QAE3C,IAAI,QAAQ,EAAE;YACZ,MAAM,CAAC,QAAQ,GAAG,QAAQ,CAAC;SAC5B;QACD,IAAI,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,GAAG,EAAE;YACnB,MAAM,CAAC,SAAS,GAAG,UAAU,CAAC,GAAG,CAAC;SACnC;QACD,OAAO,MAAM,CAAC;KACf;IAAC,OAAO,GAAG,EAAE;QACZ,IAAI,GAAG,CAAC,UAAU,KAAK,GAAG,EAAE;YAC1B,MAAM,IAAI,uCAAiB,CAAC,GAAG,CAAC,CAAC;SAClC;QACD,MAAM,GAAG,CAAC;KACX;AACH,CAAC;AAlCD,kCAkCC","sourcesContent":["import { ExternalHostError } from '../../types/errors/external-host-error';\nimport { Http } from '../../util/http';\nimport { CachePromise, cacheAble } from '../cache';\nimport { GetReleasesConfig, ReleaseResult } from '../common';\n\nexport const id = 'cdnjs';\n\nconst http = new Http(id);\n\ninterface CdnjsAsset {\n  version: string;\n  files: string[];\n  sri?: Record<string, string>;\n}\n\ninterface CdnjsResponse {\n  homepage?: string;\n  repository?: {\n    type: 'git' | unknown;\n    url?: string;\n  };\n  assets?: CdnjsAsset[];\n}\n\nasync function downloadLibrary(library: string): CachePromise<CdnjsResponse> {\n  const url = `https://api.cdnjs.com/libraries/${library}?fields=homepage,repository,assets`;\n  return { data: (await http.getJson<CdnjsResponse>(url)).body };\n}\n\nexport async function getReleases({\n  lookupName,\n}: GetReleasesConfig): Promise<ReleaseResult | null> {\n  // Each library contains multiple assets, so we cache at the library level instead of per-asset\n  const library = lookupName.split('/')[0];\n  try {\n    const { assets, homepage, repository } = await cacheAble({\n      id,\n      lookup: library,\n      cb: downloadLibrary,\n    });\n    if (!assets) {\n      return null;\n    }\n    const assetName = lookupName.replace(`${library}/`, '');\n    const releases = assets\n      .filter(({ files }) => files.includes(assetName))\n      .map(({ version, sri }) => ({ version, newDigest: sri[assetName] }));\n\n    const result: ReleaseResult = { releases };\n\n    if (homepage) {\n      result.homepage = homepage;\n    }\n    if (repository?.url) {\n      result.sourceUrl = repository.url;\n    }\n    return result;\n  } catch (err) {\n    if (err.statusCode !== 404) {\n      throw new ExternalHostError(err);\n    }\n    throw err;\n  }\n}\n"]}