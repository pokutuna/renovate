{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/datasource/helm/index.ts"],"names":[],"mappings":"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","sourcesContent":["import yaml from 'js-yaml';\n\nimport { logger } from '../../logger';\nimport { ExternalHostError } from '../../types/errors/external-host-error';\nimport * as packageCache from '../../util/cache/package';\nimport { Http } from '../../util/http';\nimport { ensureTrailingSlash } from '../../util/url';\nimport { GetReleasesConfig, ReleaseResult } from '../common';\n\nexport const id = 'helm';\n\nconst http = new Http(id);\n\nexport const defaultRegistryUrls = [\n  'https://kubernetes-charts.storage.googleapis.com/',\n];\nexport const registryStrategy = 'first';\n\nexport async function getRepositoryData(\n  repository: string\n): Promise<ReleaseResult[]> {\n  const cacheNamespace = 'datasource-helm';\n  const cacheKey = repository;\n  const cachedIndex = await packageCache.get(cacheNamespace, cacheKey);\n  // istanbul ignore if\n  if (cachedIndex) {\n    return cachedIndex;\n  }\n  let res: any;\n  try {\n    res = await http.get('index.yaml', {\n      baseUrl: ensureTrailingSlash(repository),\n    });\n    if (!res || !res.body) {\n      logger.warn(`Received invalid response from ${repository}`);\n      return null;\n    }\n  } catch (err) {\n    if (\n      err.statusCode === 429 ||\n      (err.statusCode >= 500 && err.statusCode < 600)\n    ) {\n      throw new ExternalHostError(err);\n    }\n    throw err;\n  }\n  try {\n    const doc = yaml.safeLoad(res.body, { json: true });\n    if (!doc) {\n      logger.warn(`Failed to parse index.yaml from ${repository}`);\n      return null;\n    }\n    const result: ReleaseResult[] = Object.entries(doc.entries).map(\n      ([k, v]: [string, any]): ReleaseResult => ({\n        name: k,\n        homepage: v[0].home,\n        sourceUrl: v[0].sources ? v[0].sources[0] : undefined,\n        releases: v.map((x: any) => ({\n          version: x.version,\n          releaseTimestamp: x.created ? x.created : null,\n        })),\n      })\n    );\n    const cacheMinutes = 20;\n    await packageCache.set(cacheNamespace, cacheKey, result, cacheMinutes);\n    return result;\n  } catch (err) {\n    logger.warn(`Failed to parse index.yaml from ${repository}`);\n    logger.debug(err);\n    return null;\n  }\n}\n\nexport async function getReleases({\n  lookupName,\n  registryUrl: helmRepository,\n}: GetReleasesConfig): Promise<ReleaseResult | null> {\n  const repositoryData = await getRepositoryData(helmRepository);\n  if (!repositoryData) {\n    logger.debug(`Couldn't get index.yaml file from ${helmRepository}`);\n    return null;\n  }\n  const releases = repositoryData.find((chart) => chart.name === lookupName);\n  if (!releases) {\n    logger.debug(\n      { dependency: lookupName },\n      `Entry ${lookupName} doesn't exist in index.yaml from ${helmRepository}`\n    );\n    return null;\n  }\n  return releases;\n}\n"]}