{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/datasource/gradle-version/index.ts"],"names":[],"mappings":";;;AAAA,gFAA2E;AAC3E,0CAAuC;AACvC,4CAAyC;AAG5B,QAAA,EAAE,GAAG,gBAAgB,CAAC;AACtB,QAAA,mBAAmB,GAAG,CAAC,0CAA0C,CAAC,CAAC;AACnE,QAAA,gBAAgB,GAAG,OAAO,CAAC;AAExC,MAAM,IAAI,GAAG,IAAI,WAAI,CAAC,UAAE,CAAC,CAAC;AAU1B,MAAM,cAAc,GAAG,aAAK,CAC1B,2EAA2E,CAC5E,CAAC;AAEF,SAAS,eAAe,CAAC,OAAe;IACtC,IAAI,CAAC,OAAO,EAAE;QACZ,OAAO,IAAI,CAAC;KACb;IACD,IAAI,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;QAChC,OAAO,OAAO,CAAC,OAAO,CAAC,cAAc,EAAE,qBAAqB,CAAC,CAAC;KAC/D;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAEM,KAAK,UAAU,WAAW,CAAC,EAChC,WAAW,GACO;IAClB,IAAI,QAAQ,CAAC;IACb,IAAI;QACF,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,OAAO,CAAkB,WAAW,CAAC,CAAC;QAClE,QAAQ,GAAG,QAAQ,CAAC,IAAI;aACrB,MAAM,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;aAC1D,MAAM,CACL,CAAC,OAAO,EAAE,EAAE;QACV,qFAAqF;QACrF,OAAO,CAAC,KAAK,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,WAAW,CAAC,CACjE;aACA,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACjB,OAAO,EAAE,OAAO,CAAC,OAAO;YACxB,gBAAgB,EAAE,eAAe,CAAC,OAAO,CAAC,SAAS,CAAC;SACrD,CAAC,CAAC,CAAC;KACP;IAAC,OAAO,GAAG,EAAE,0BAA0B,CAAC;QACvC,IAAI,GAAG,CAAC,IAAI,KAAK,qBAAqB,EAAE;YACtC,MAAM,IAAI,uCAAiB,CAAC,GAAG,CAAC,CAAC;SAClC;QACD,MAAM,GAAG,CAAC;KACX;IAED,MAAM,GAAG,GAAkB;QACzB,QAAQ;QACR,QAAQ,EAAE,oBAAoB;QAC9B,SAAS,EAAE,kCAAkC;KAC9C,CAAC;IACF,IAAI,GAAG,CAAC,QAAQ,CAAC,MAAM,EAAE;QACvB,OAAO,GAAG,CAAC;KACZ;IACD,uBAAuB;IACvB,OAAO,IAAI,CAAC;AACd,CAAC;AAlCD,kCAkCC","sourcesContent":["import { ExternalHostError } from '../../types/errors/external-host-error';\nimport { Http } from '../../util/http';\nimport { regEx } from '../../util/regex';\nimport { GetReleasesConfig, ReleaseResult } from '../common';\n\nexport const id = 'gradle-version';\nexport const defaultRegistryUrls = ['https://services.gradle.org/versions/all'];\nexport const registryStrategy = 'merge';\n\nconst http = new Http(id);\n\ninterface GradleRelease {\n  snapshot?: boolean;\n  nightly?: boolean;\n  rcFor?: string;\n  version: string;\n  buildTime?: string;\n}\n\nconst buildTimeRegex = regEx(\n  '^(\\\\d\\\\d\\\\d\\\\d)(\\\\d\\\\d)(\\\\d\\\\d)(\\\\d\\\\d)(\\\\d\\\\d)(\\\\d\\\\d)(\\\\+\\\\d\\\\d\\\\d\\\\d)$'\n);\n\nfunction formatBuildTime(timeStr: string): string | null {\n  if (!timeStr) {\n    return null;\n  }\n  if (buildTimeRegex.test(timeStr)) {\n    return timeStr.replace(buildTimeRegex, '$1-$2-$3T$4:$5:$6$7');\n  }\n  return null;\n}\n\nexport async function getReleases({\n  registryUrl,\n}: GetReleasesConfig): Promise<ReleaseResult> {\n  let releases;\n  try {\n    const response = await http.getJson<GradleRelease[]>(registryUrl);\n    releases = response.body\n      .filter((release) => !release.snapshot && !release.nightly)\n      .filter(\n        (release) =>\n          // some milestone have wrong metadata and need to be filtered by version name content\n          release.rcFor === '' && !release.version.includes('milestone')\n      )\n      .map((release) => ({\n        version: release.version,\n        releaseTimestamp: formatBuildTime(release.buildTime),\n      }));\n  } catch (err) /* istanbul ignore next */ {\n    if (err.host === 'services.gradle.org') {\n      throw new ExternalHostError(err);\n    }\n    throw err;\n  }\n\n  const res: ReleaseResult = {\n    releases,\n    homepage: 'https://gradle.org',\n    sourceUrl: 'https://github.com/gradle/gradle',\n  };\n  if (res.releases.length) {\n    return res;\n  }\n  // istanbul ignore next\n  return null;\n}\n"]}