{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/datasource/terraform-module/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger } from '../../logger';\nimport { ExternalHostError } from '../../types/errors/external-host-error';\nimport * as packageCache from '../../util/cache/package';\nimport { Http } from '../../util/http';\nimport { GetReleasesConfig, ReleaseResult } from '../common';\n\nexport const id = 'terraform-module';\nexport const defaultRegistryUrls = ['https://registry.terraform.io'];\nexport const registryStrategy = 'first';\n\nconst http = new Http(id);\n\ninterface RegistryRepository {\n  registry: string;\n  repository: string;\n}\n\nfunction getRegistryRepository(\n  lookupName: string,\n  registryUrl: string\n): RegistryRepository {\n  let registry: string;\n  const split = lookupName.split('/');\n  if (split.length > 3 && split[0].includes('.')) {\n    [registry] = split;\n    split.shift();\n  } else {\n    registry = registryUrl;\n  }\n  if (!/^https?:\\/\\//.test(registry)) {\n    registry = `https://${registry}`;\n  }\n  const repository = split.join('/');\n  return {\n    registry,\n    repository,\n  };\n}\n\ninterface TerraformRelease {\n  namespace: string;\n  name: string;\n  provider: string;\n  source?: string;\n  versions: string[];\n}\n\nexport interface ServiceDiscoveryResult {\n  'modules.v1'?: string;\n  'providers.v1'?: string;\n}\n\nexport async function getTerraformServiceDiscoveryResult(\n  registryUrl: string\n): Promise<ServiceDiscoveryResult> {\n  const discoveryURL = `${registryUrl}/.well-known/terraform.json`;\n  const cacheNamespace = 'terraform-service-discovery';\n  const cachedResult = await packageCache.get<ServiceDiscoveryResult>(\n    cacheNamespace,\n    registryUrl\n  );\n  // istanbul ignore if\n  if (cachedResult) {\n    return cachedResult;\n  }\n  const serviceDiscovery = (\n    await http.getJson<ServiceDiscoveryResult>(discoveryURL)\n  ).body;\n\n  const cacheMinutes = 1440; // 24h\n  await packageCache.set(\n    cacheNamespace,\n    registryUrl,\n    serviceDiscovery,\n    cacheMinutes\n  );\n\n  return serviceDiscovery;\n}\n/**\n * terraform.getReleases\n *\n * This function will fetch a package from the specified Terraform registry and return all semver versions.\n *  - `sourceUrl` is supported of \"source\" field is set\n *  - `homepage` is set to the Terraform registry's page if it's on the official main registry\n */\nexport async function getReleases({\n  lookupName,\n  registryUrl,\n}: GetReleasesConfig): Promise<ReleaseResult | null> {\n  const { registry, repository } = getRegistryRepository(\n    lookupName,\n    registryUrl\n  );\n  logger.debug(\n    { registry, terraformRepository: repository },\n    'terraform.getDependencies()'\n  );\n  const cacheNamespace = 'terraform-module';\n  const cacheURL = `${registry}/${repository}`;\n  const cachedResult = await packageCache.get<ReleaseResult>(\n    cacheNamespace,\n    cacheURL\n  );\n  // istanbul ignore if\n  if (cachedResult) {\n    return cachedResult;\n  }\n  try {\n    const serviceDiscovery = await getTerraformServiceDiscoveryResult(\n      registryUrl\n    );\n    const pkgUrl = `${registry}${serviceDiscovery['modules.v1']}${repository}`;\n    const res = (await http.getJson<TerraformRelease>(pkgUrl)).body;\n    const returnedName = res.namespace + '/' + res.name + '/' + res.provider;\n    if (returnedName !== repository) {\n      logger.warn({ pkgUrl }, 'Terraform registry result mismatch');\n      return null;\n    }\n    // Simplify response before caching and returning\n    const dep: ReleaseResult = {\n      name: repository,\n      versions: {},\n      releases: null,\n    };\n    if (res.source) {\n      dep.sourceUrl = res.source;\n    }\n    dep.releases = res.versions.map((version) => ({\n      version,\n    }));\n    if (pkgUrl.startsWith('https://registry.terraform.io/')) {\n      dep.homepage = `https://registry.terraform.io/modules/${repository}`;\n    }\n    logger.trace({ dep }, 'dep');\n    const cacheMinutes = 30;\n    await packageCache.set(cacheNamespace, pkgUrl, dep, cacheMinutes);\n    return dep;\n  } catch (err) {\n    const failureCodes = ['EAI_AGAIN'];\n    // istanbul ignore if\n    if (failureCodes.includes(err.code)) {\n      throw new ExternalHostError(err);\n    }\n    throw err;\n  }\n}\n"]}