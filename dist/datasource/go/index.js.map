{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/datasource/go/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger } from '../../logger';\nimport { Http } from '../../util/http';\nimport { regEx } from '../../util/regex';\nimport { DigestConfig, GetReleasesConfig, ReleaseResult } from '../common';\nimport * as github from '../github-tags';\nimport * as gitlab from '../gitlab-tags';\n\nexport const id = 'go';\n\nconst http = new Http(id);\n\ninterface DataSource {\n  datasource: string;\n  registryUrl?: string;\n  lookupName: string;\n}\n\nasync function getDatasource(goModule: string): Promise<DataSource | null> {\n  if (goModule.startsWith('gopkg.in/')) {\n    const [pkg] = goModule.replace('gopkg.in/', '').split('.');\n    if (pkg.includes('/')) {\n      return { datasource: github.id, lookupName: pkg };\n    }\n    return {\n      datasource: github.id,\n      lookupName: `go-${pkg}/${pkg}`,\n    };\n  }\n  if (goModule.startsWith('github.com/')) {\n    const split = goModule.split('/');\n    const lookupName = split[1] + '/' + split[2];\n    return {\n      datasource: github.id,\n      lookupName,\n    };\n  }\n  const pkgUrl = `https://${goModule}?go-get=1`;\n  const res = (await http.get(pkgUrl)).body;\n  const sourceMatch = regEx(\n    `<meta\\\\s+name=\"go-source\"\\\\s+content=\"([^\\\\s]+)\\\\s+([^\\\\s]+)`\n  ).exec(res);\n  if (sourceMatch) {\n    const [, prefix, goSourceUrl] = sourceMatch;\n    if (!goModule.startsWith(prefix)) {\n      logger.trace({ goModule }, 'go-source header prefix not match');\n      return null;\n    }\n    logger.debug({ goModule, goSourceUrl }, 'Go lookup source url');\n    if (goSourceUrl?.startsWith('https://github.com/')) {\n      return {\n        datasource: github.id,\n        lookupName: goSourceUrl\n          .replace('https://github.com/', '')\n          .replace(/\\/$/, ''),\n      };\n    }\n    if (goSourceUrl?.match('^https://[^/]*gitlab.[^/]*/.+')) {\n      const gitlabRegExp = /^(https:\\/\\/[^/]*gitlab.[^/]*)\\/(.*)$/;\n      const gitlabRes = gitlabRegExp.exec(goSourceUrl);\n      return {\n        datasource: gitlab.id,\n        registryUrl: gitlabRes[1],\n        lookupName: gitlabRes[2].replace(/\\/$/, ''),\n      };\n    }\n  } else {\n    logger.trace({ goModule }, 'No go-source header found');\n  }\n  return null;\n}\n\n/**\n * go.getReleases\n *\n * This datasource resolves a go module URL into its source repository\n *  and then fetch it if it is on GitHub.\n *\n * This function will:\n *  - Determine the source URL for the module\n *  - Call the respective getReleases in github/gitlab to retrieve the tags\n *  - Filter module tags according to the module path\n */\nexport async function getReleases({\n  lookupName,\n}: GetReleasesConfig): Promise<ReleaseResult | null> {\n  logger.trace(`go.getReleases(${lookupName})`);\n  const source = await getDatasource(lookupName);\n  if (source?.datasource !== github.id && source?.datasource !== gitlab.id) {\n    return null;\n  }\n  const res =\n    source.datasource === github.id\n      ? await github.getReleases(source)\n      : await gitlab.getReleases(source);\n  // istanbul ignore if\n  if (!res) {\n    return res;\n  }\n  /**\n   * github.com/org/mod/submodule should be tagged as submodule/va.b.c\n   * and that tag should be used instead of just va.b.c, although for compatibility\n   * the old behaviour stays the same.\n   */\n  const nameParts = lookupName.split('/');\n  logger.trace({ nameParts, releases: res.releases }, 'go.getReleases');\n  if (nameParts.length > 3) {\n    const prefix = nameParts.slice(3, nameParts.length).join('/');\n    logger.trace(`go.getReleases.prefix:${prefix}`);\n    const submodReleases = res.releases\n      .filter((release) => release.version?.startsWith(prefix))\n      .map((release) => {\n        const r2 = release;\n        r2.version = r2.version.replace(`${prefix}/`, '');\n        return r2;\n      });\n    logger.trace({ submodReleases }, 'go.getReleases');\n    if (submodReleases.length > 0) {\n      res.releases = submodReleases;\n      return res;\n    }\n  }\n  if (res?.releases) {\n    res.releases = res.releases.filter((release) =>\n      release.version?.startsWith('v')\n    );\n  }\n  return res;\n}\n\n/**\n * go.getDigest\n *\n * This datasource resolves a go module URL into its source repository\n *  and then fetches the digest it if it is on GitHub.\n *\n * This function will:\n *  - Determine the source URL for the module\n *  - Call the respective getDigest in github to retrieve the commit hash\n */\nexport async function getDigest(\n  { lookupName }: Partial<DigestConfig>,\n  value?: string\n): Promise<string | null> {\n  const source = await getDatasource(lookupName);\n  if (source && source.datasource === github.id) {\n    // ignore v0.0.0- pseudo versions that are used Go Modules - look up default branch instead\n    const tag = value && !value.startsWith('v0.0.0-2') ? value : undefined;\n    const digest = await github.getDigest(source, tag);\n    return digest;\n  }\n  return null;\n}\n"]}