{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/datasource/terraform-provider/index.ts"],"names":[],"mappings":"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","sourcesContent":["import URL from 'url';\nimport { logger } from '../../logger';\nimport * as packageCache from '../../util/cache/package';\nimport { Http } from '../../util/http';\nimport { GetReleasesConfig, ReleaseResult } from '../common';\nimport { getTerraformServiceDiscoveryResult } from '../terraform-module';\n\nexport const id = 'terraform-provider';\nexport const defaultRegistryUrls = [\n  'https://registry.terraform.io',\n  'https://releases.hashicorp.com',\n];\nexport const registryStrategy = 'hunt';\n\nconst http = new Http(id);\n\ninterface TerraformProvider {\n  namespace: string;\n  name: string;\n  provider: string;\n  source?: string;\n  versions: string[];\n}\n\ninterface TerraformProviderReleaseBackend {\n  [key: string]: {\n    name: string;\n    versions: VersionsReleaseBackend;\n  };\n}\n\ninterface VersionsReleaseBackend {\n  [key: string]: Record<string, any>;\n}\n\nasync function queryRegistry(\n  lookupName: string,\n  registryURL: string,\n  repository: string\n): Promise<ReleaseResult> {\n  const serviceDiscovery = await getTerraformServiceDiscoveryResult(\n    registryURL\n  );\n  const backendURL = `${registryURL}${serviceDiscovery['providers.v1']}${repository}`;\n  const res = (await http.getJson<TerraformProvider>(backendURL)).body;\n  const dep: ReleaseResult = {\n    name: repository,\n    versions: {},\n    releases: null,\n  };\n  if (res.source) {\n    dep.sourceUrl = res.source;\n  }\n  dep.releases = res.versions.map((version) => ({\n    version,\n  }));\n  dep.homepage = `${registryURL}/providers/${repository}`;\n  logger.trace({ dep }, 'dep');\n  return dep;\n}\n\n// TODO: add long term cache\nasync function queryReleaseBackend(\n  lookupName: string,\n  registryURL: string,\n  repository: string\n): Promise<ReleaseResult> {\n  const backendLookUpName = `terraform-provider-${lookupName}`;\n  const backendURL = registryURL + `/index.json`;\n  const res = (await http.getJson<TerraformProviderReleaseBackend>(backendURL))\n    .body;\n  const dep: ReleaseResult = {\n    name: repository,\n    versions: {},\n    releases: null,\n    sourceUrl: `https://github.com/terraform-providers/${backendLookUpName}`,\n  };\n  dep.releases = Object.keys(res[backendLookUpName].versions).map(\n    (version) => ({\n      version,\n    })\n  );\n  logger.trace({ dep }, 'dep');\n  return dep;\n}\n\n/**\n * terraform-provider.getReleases\n *\n * This function will fetch a provider from the public Terraform registry and return all semver versions.\n */\nexport async function getReleases({\n  lookupName,\n  registryUrl,\n}: GetReleasesConfig): Promise<ReleaseResult | null> {\n  const repository = lookupName.includes('/')\n    ? lookupName\n    : `hashicorp/${lookupName}`;\n\n  const cacheNamespace = 'terraform-provider';\n  const pkgUrl = `${registryUrl}/${repository}`;\n  const cachedResult = await packageCache.get<ReleaseResult>(\n    cacheNamespace,\n    pkgUrl\n  );\n  // istanbul ignore if\n  if (cachedResult) {\n    return cachedResult;\n  }\n\n  logger.debug({ lookupName }, 'terraform-provider.getDependencies()');\n  let dep: ReleaseResult = null;\n  const registryHost = URL.parse(registryUrl).host;\n  if (registryHost === 'releases.hashicorp.com') {\n    dep = await queryReleaseBackend(lookupName, registryUrl, repository);\n  } else {\n    dep = await queryRegistry(lookupName, registryUrl, repository);\n  }\n  const cacheMinutes = 30;\n  await packageCache.set(cacheNamespace, pkgUrl, dep, cacheMinutes);\n  return dep;\n}\n"]}