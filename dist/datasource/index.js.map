{"version":3,"file":"index.js","sourceRoot":"","sources":["../../lib/datasource/index.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport equal from 'fast-deep-equal';\nimport { HOST_DISABLED } from '../constants/error-messages';\nimport { logger } from '../logger';\nimport { ExternalHostError } from '../types/errors/external-host-error';\nimport * as memCache from '../util/cache/memory';\nimport { clone } from '../util/clone';\nimport * as allVersioning from '../versioning';\nimport datasources from './api.generated';\nimport {\n  Datasource,\n  DigestConfig,\n  GetPkgReleasesConfig,\n  GetReleasesConfig,\n  Release,\n  ReleaseResult,\n} from './common';\nimport { addMetaData } from './metadata';\n\nexport * from './common';\n\nexport const getDatasources = (): Map<string, Datasource> => datasources;\nexport const getDatasourceList = (): string[] => Array.from(datasources.keys());\n\nconst cacheNamespace = 'datasource-releases';\n\nfunction load(datasource: string): Datasource {\n  return datasources.get(datasource);\n}\n\ntype GetReleasesInternalConfig = GetReleasesConfig & GetPkgReleasesConfig;\n\nfunction logError(datasource, lookupName, err): void {\n  const { statusCode, code: errCode, url } = err;\n  if (statusCode === 404) {\n    logger.debug({ datasource, lookupName, url }, 'Datasource 404');\n  } else if (statusCode === 401 || statusCode === 403) {\n    logger.debug({ datasource, lookupName, url }, 'Datasource unauthorized');\n  } else if (errCode) {\n    logger.debug(\n      { datasource, lookupName, url, errCode },\n      'Datasource connection error'\n    );\n  } else {\n    logger.debug({ datasource, lookupName, err }, 'Datasource unknown error');\n  }\n}\n\nasync function getRegistryReleases(\n  datasource,\n  config: GetReleasesConfig,\n  registryUrl: string\n): Promise<ReleaseResult> {\n  const res = await datasource.getReleases({ ...config, registryUrl });\n  return res;\n}\n\nfunction firstRegistry(\n  config: GetReleasesInternalConfig,\n  datasource: Datasource,\n  registryUrls: string[]\n): Promise<ReleaseResult> {\n  if (registryUrls.length > 1) {\n    logger.warn(\n      { datasource: datasource.id, depName: config.depName, registryUrls },\n      'Excess registryUrls found for datasource lookup - using first configured only'\n    );\n  }\n  const registryUrl = registryUrls[0];\n  return getRegistryReleases(datasource, config, registryUrl);\n}\n\nasync function huntRegistries(\n  config: GetReleasesInternalConfig,\n  datasource: Datasource,\n  registryUrls: string[]\n): Promise<ReleaseResult> {\n  let res: ReleaseResult;\n  let caughtError;\n  for (const registryUrl of registryUrls) {\n    try {\n      res = await getRegistryReleases(datasource, config, registryUrl);\n      if (res) {\n        break;\n      }\n    } catch (err) {\n      if (err instanceof ExternalHostError) {\n        throw err;\n      }\n      // We'll always save the last-thrown error\n      caughtError = err;\n      logger.trace({ err }, 'datasource hunt failure');\n    }\n  }\n  if (res) {\n    return res;\n  }\n  if (caughtError) {\n    throw caughtError;\n  }\n  return null;\n}\n\nasync function mergeRegistries(\n  config: GetReleasesInternalConfig,\n  datasource: Datasource,\n  registryUrls: string[]\n): Promise<ReleaseResult> {\n  let combinedRes: ReleaseResult;\n  let caughtError;\n  for (const registryUrl of registryUrls) {\n    try {\n      const res = await getRegistryReleases(datasource, config, registryUrl);\n      if (combinedRes) {\n        combinedRes = { ...res, ...combinedRes };\n        combinedRes.releases = [...combinedRes.releases, ...res.releases];\n      } else {\n        combinedRes = res;\n      }\n    } catch (err) {\n      if (err instanceof ExternalHostError) {\n        throw err;\n      }\n      // We'll always save the last-thrown error\n      caughtError = err;\n      logger.trace({ err }, 'datasource merge failure');\n    }\n  }\n  // De-duplicate releases\n  if (combinedRes?.releases?.length) {\n    const seenVersions = new Set<string>();\n    combinedRes.releases = combinedRes.releases.filter((release) => {\n      if (seenVersions.has(release.version)) {\n        return false;\n      }\n      seenVersions.add(release.version);\n      return true;\n    });\n  }\n  if (combinedRes) {\n    return combinedRes;\n  }\n  if (caughtError) {\n    throw caughtError;\n  }\n  return null;\n}\n\nfunction resolveRegistryUrls(\n  datasource: Datasource,\n  extractedUrls: string[]\n): string[] {\n  const { defaultRegistryUrls = [], appendRegistryUrls = [] } = datasource;\n  const customUrls = extractedUrls?.filter(Boolean);\n  let registryUrls: string[];\n  if (is.nonEmptyArray(customUrls)) {\n    registryUrls = [...extractedUrls, ...appendRegistryUrls];\n  } else {\n    registryUrls = [...defaultRegistryUrls, ...appendRegistryUrls];\n  }\n  return registryUrls.filter(Boolean);\n}\n\nasync function fetchReleases(\n  config: GetReleasesInternalConfig\n): Promise<ReleaseResult | null> {\n  const { datasource: datasourceName } = config;\n  if (!datasourceName || !datasources.has(datasourceName)) {\n    logger.warn('Unknown datasource: ' + datasourceName);\n    return null;\n  }\n  const datasource = load(datasourceName);\n  const registryUrls = resolveRegistryUrls(datasource, config.registryUrls);\n  let dep: ReleaseResult = null;\n  try {\n    if (datasource.registryStrategy) {\n      // istanbul ignore if\n      if (!registryUrls.length) {\n        logger.warn(\n          { datasource: datasourceName, depName: config.depName },\n          'Missing registryUrls for registryStrategy'\n        );\n        return null;\n      }\n      if (datasource.registryStrategy === 'first') {\n        dep = await firstRegistry(config, datasource, registryUrls);\n      } else if (datasource.registryStrategy === 'hunt') {\n        dep = await huntRegistries(config, datasource, registryUrls);\n      } else if (datasource.registryStrategy === 'merge') {\n        dep = await mergeRegistries(config, datasource, registryUrls);\n      }\n    } else {\n      dep = await datasource.getReleases({\n        ...config,\n        registryUrls,\n      });\n    }\n  } catch (err) {\n    if (err.message === HOST_DISABLED || err.err?.message === HOST_DISABLED) {\n      return null;\n    }\n    if (err instanceof ExternalHostError) {\n      throw err;\n    }\n    logError(datasource.id, config.lookupName, err);\n  }\n  if (!dep || equal(dep, { releases: [] })) {\n    return null;\n  }\n  addMetaData(dep, datasourceName, config.lookupName);\n  return dep;\n}\n\nfunction getRawReleases(\n  config: GetReleasesInternalConfig\n): Promise<ReleaseResult | null> {\n  const cacheKey =\n    cacheNamespace +\n    config.datasource +\n    config.lookupName +\n    config.registryUrls;\n  // By returning a Promise and reusing it, we should only fetch each package at most once\n  const cachedResult = memCache.get(cacheKey);\n  // istanbul ignore if\n  if (cachedResult) {\n    return cachedResult;\n  }\n  const promisedRes = fetchReleases(config);\n  memCache.set(cacheKey, promisedRes);\n  return promisedRes;\n}\n\nexport async function getPkgReleases(\n  config: GetPkgReleasesConfig\n): Promise<ReleaseResult | null> {\n  if (!config.datasource) {\n    logger.warn('No datasource found');\n    return null;\n  }\n  const lookupName = config.lookupName || config.depName;\n  if (!lookupName) {\n    logger.error({ config }, 'Datasource getReleases without lookupName');\n    return null;\n  }\n  let res: ReleaseResult;\n  try {\n    res = clone(\n      await getRawReleases({\n        ...config,\n        lookupName,\n      })\n    );\n  } catch (e) /* istanbul ignore next */ {\n    if (e instanceof ExternalHostError) {\n      e.hostType = config.datasource;\n      e.lookupName = lookupName;\n    }\n    throw e;\n  }\n  if (!res) {\n    return res;\n  }\n  // Filter by versioning\n  const version = allVersioning.get(config.versioning);\n  // Return a sorted list of valid Versions\n  function sortReleases(release1: Release, release2: Release): number {\n    return version.sortVersions(release1.version, release2.version);\n  }\n  if (res.releases) {\n    res.releases = res.releases\n      .filter((release) => version.isVersion(release.version))\n      .sort(sortReleases);\n  }\n  return res;\n}\n\nexport function supportsDigests(config: DigestConfig): boolean {\n  return 'getDigest' in load(config.datasource);\n}\n\nexport function getDigest(\n  config: DigestConfig,\n  value?: string\n): Promise<string | null> {\n  const datasource = load(config.datasource);\n  const lookupName = config.lookupName || config.depName;\n  const registryUrls = resolveRegistryUrls(datasource, config.registryUrls);\n  return datasource.getDigest(\n    { lookupName, registryUrl: registryUrls[0] },\n    value\n  );\n}\n\nexport function getDefaultConfig(datasource: string): Promise<object> {\n  const loadedDatasource = load(datasource);\n  return Promise.resolve(loadedDatasource?.defaultConfig || {});\n}\n"]}