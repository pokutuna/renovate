{"version":3,"file":"v3.js","sourceRoot":"","sources":["../../../lib/datasource/nuget/v3.ts"],"names":[],"mappings":"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","sourcesContent":["import * as semver from 'semver';\nimport { XmlDocument } from 'xmldoc';\nimport { logger } from '../../logger';\nimport * as packageCache from '../../util/cache/package';\nimport { Http } from '../../util/http';\nimport { ReleaseResult } from '../common';\n\nimport { id } from './common';\n\nconst http = new Http(id);\n\n// https://api.nuget.org/v3/index.json is a default official nuget feed\nconst defaultNugetFeed = 'https://api.nuget.org/v3/index.json';\nconst cacheNamespace = 'datasource-nuget';\n\nexport function getDefaultFeed(): string {\n  return defaultNugetFeed;\n}\n\nexport async function getQueryUrl(url: string): Promise<string | null> {\n  // https://docs.microsoft.com/en-us/nuget/api/search-query-service-resource\n  const resourceType = 'SearchQueryService';\n  const cacheKey = `${url}:${resourceType}`;\n  const cachedResult = await packageCache.get<string>(cacheNamespace, cacheKey);\n\n  // istanbul ignore if\n  if (cachedResult) {\n    return cachedResult;\n  }\n\n  try {\n    // TODO: fix types\n    const servicesIndexRaw = await http.getJson<any>(url);\n    const searchQueryService = servicesIndexRaw.body.resources.find(\n      (resource) => resource['@type']?.startsWith(resourceType)\n    );\n    const searchQueryServiceId = searchQueryService['@id'];\n\n    const cacheMinutes = 60;\n    await packageCache.set(\n      cacheNamespace,\n      cacheKey,\n      searchQueryServiceId,\n      cacheMinutes\n    );\n    return searchQueryServiceId;\n  } catch (e) {\n    logger.debug(\n      { e },\n      `nuget registry failure: can't get SearchQueryService form ${url}`\n    );\n    return null;\n  }\n}\n\nexport async function getReleases(\n  registryUrl: string,\n  feedUrl: string,\n  pkgName: string\n): Promise<ReleaseResult | null> {\n  let queryUrl = `${feedUrl}?q=${pkgName}`;\n  if (registryUrl.toLowerCase() === defaultNugetFeed.toLowerCase()) {\n    queryUrl = queryUrl.replace('q=', 'q=PackageId:');\n    queryUrl += '&semVerLevel=2.0.0&prerelease=true';\n  }\n  const dep: ReleaseResult = {\n    pkgName,\n    releases: [],\n  };\n  // TODO: fix types\n  const pkgUrlListRaw = await http.getJson<any>(queryUrl);\n  const match = pkgUrlListRaw.body.data.find(\n    (item) => item.id.toLowerCase() === pkgName.toLowerCase()\n  );\n  // https://docs.microsoft.com/en-us/nuget/api/search-query-service-resource#search-result\n  if (!match) {\n    // There are no pkgName or releases in current feed\n    return null;\n  }\n  dep.releases = match.versions.map((item) => ({\n    version: item.version,\n  }));\n\n  try {\n    // For nuget.org we have a way to get nuspec file\n    const sanitizedVersions = dep.releases\n      .map((release) => semver.valid(release.version))\n      .filter(Boolean)\n      .filter((version) => !semver.prerelease(version));\n    let lastVersion: string;\n    // istanbul ignore else\n    if (sanitizedVersions.length) {\n      // Use the last stable version we found\n      lastVersion = sanitizedVersions.pop();\n    } else {\n      // Just use the last one from the list and hope for the best\n      lastVersion = [...dep.releases].pop().version;\n    }\n    if (registryUrl.toLowerCase() === defaultNugetFeed.toLowerCase()) {\n      const nugetOrgApi = `https://api.nuget.org/v3-flatcontainer/${pkgName.toLowerCase()}/${lastVersion}/${pkgName.toLowerCase()}.nuspec`;\n      let metaresult: { body: string };\n      try {\n        metaresult = await http.get(nugetOrgApi);\n      } catch (err) /* istanbul ignore next */ {\n        logger.debug(\n          `Cannot fetch metadata for ${pkgName} using popped version ${lastVersion}`\n        );\n        return dep;\n      }\n      const nuspec = new XmlDocument(metaresult.body);\n      const sourceUrl = nuspec.valueWithPath('metadata.repository@url');\n      if (sourceUrl) {\n        dep.sourceUrl = sourceUrl;\n      }\n    } else if (match.projectUrl) {\n      dep.sourceUrl = match.projectUrl;\n    }\n  } catch (err) /* istanbul ignore next */ {\n    logger.debug(\n      { err, pkgName, feedUrl },\n      `nuget registry failure: can't parse pkg info for project url`\n    );\n  }\n\n  return dep;\n}\n"]}