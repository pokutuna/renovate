{"version":3,"file":"code-owners.js","sourceRoot":"","sources":["../../../lib/workers/pr/code-owners.ts"],"names":[],"mappings":";;;;;;AAAA,oDAA4B;AAC5B,yCAAsC;AAEtC,sCAA8C;AAC9C,wCAAgD;AAEzC,KAAK,UAAU,eAAe,CAAC,EAAM;IAC1C,IAAI;QACF,MAAM,cAAc,GAClB,CAAC,MAAM,kBAAa,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;YAC3C,CAAC,MAAM,kBAAa,CAAC,oBAAoB,EAAE,MAAM,CAAC,CAAC;YACnD,CAAC,MAAM,kBAAa,CAAC,oBAAoB,EAAE,MAAM,CAAC,CAAC;YACnD,CAAC,MAAM,kBAAa,CAAC,iBAAiB,EAAE,MAAM,CAAC,CAAC,CAAC;QAEnD,IAAI,CAAC,cAAc,EAAE;YACnB,OAAO,EAAE,CAAC;SACX;QAED,MAAM,OAAO,GAAG,MAAM,oBAAc,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC;QACpD,MAAM,KAAK,GAAG,cAAc;aACzB,KAAK,CAAC,IAAI,CAAC;aACX,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;aAC1B,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;aAC/C,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;YACZ,MAAM,CAAC,OAAO,EAAE,GAAG,SAAS,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YAClD,OAAO;gBACL,SAAS;gBACT,KAAK,EAAE,CAAC,IAAY,EAAE,EAAE;oBACtB,MAAM,OAAO,GAAG,gBAAM,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;oBACtC,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBAC/B,CAAC;aACF,CAAC;QACJ,CAAC,CAAC;aACD,OAAO,EAAE,CAAC;QAEb,MAAM,YAAY,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;QACtE,IAAI,CAAC,YAAY,EAAE;YACjB,OAAO,EAAE,CAAC;SACX;QACD,OAAO,YAAY,CAAC,SAAS,CAAC;KAC/B;IAAC,OAAO,GAAG,EAAE;QACZ,eAAM,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,yCAAyC,CAAC,CAAC;QACpE,OAAO,EAAE,CAAC;KACX;AACH,CAAC;AAtCD,0CAsCC","sourcesContent":["import ignore from 'ignore';\nimport { logger } from '../../logger';\nimport { Pr } from '../../platform';\nimport { readLocalFile } from '../../util/fs';\nimport { getBranchFiles } from '../../util/git';\n\nexport async function codeOwnersForPr(pr: Pr): Promise<string[]> {\n  try {\n    const codeOwnersFile =\n      (await readLocalFile('CODEOWNERS', 'utf8')) ||\n      (await readLocalFile('.github/CODEOWNERS', 'utf8')) ||\n      (await readLocalFile('.gitlab/CODEOWNERS', 'utf8')) ||\n      (await readLocalFile('docs/CODEOWNERS', 'utf8'));\n\n    if (!codeOwnersFile) {\n      return [];\n    }\n\n    const prFiles = await getBranchFiles(pr.branchName);\n    const rules = codeOwnersFile\n      .split('\\n')\n      .map((line) => line.trim())\n      .filter((line) => line && !line.startsWith('#'))\n      .map((line) => {\n        const [pattern, ...usernames] = line.split(/\\s+/);\n        return {\n          usernames,\n          match: (path: string) => {\n            const matcher = ignore().add(pattern);\n            return matcher.ignores(path);\n          },\n        };\n      })\n      .reverse();\n\n    const matchingRule = rules.find((rule) => prFiles?.every(rule.match));\n    if (!matchingRule) {\n      return [];\n    }\n    return matchingRule.usernames;\n  } catch (err) {\n    logger.warn({ err, pr }, 'Failed to determine code owners for PR.');\n    return [];\n  }\n}\n"]}