{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../lib/workers/pr/changelog/gitlab/index.ts"],"names":[],"mappings":"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","sourcesContent":["import changelogFilenameRegex from 'changelog-filename-regex';\nimport { logger } from '../../../../logger';\nimport { GitlabTreeNode } from '../../../../types/platform/gitlab';\nimport { GitlabHttp } from '../../../../util/http/gitlab';\nimport { ensureTrailingSlash } from '../../../../util/url';\nimport { ChangeLogFile, ChangeLogNotes } from '../common';\n\nconst http = new GitlabHttp();\n\nfunction getRepoId(repository: string): string {\n  return repository.replace(/\\//g, '%2f');\n}\n\nexport async function getTags(\n  endpoint: string,\n  repository: string\n): Promise<string[]> {\n  logger.trace('gitlab.getTags()');\n  const url = `${ensureTrailingSlash(endpoint)}projects/${getRepoId(\n    repository\n  )}/repository/tags?per_page=100`;\n  try {\n    const res = await http.getJson<{ name: string }[]>(url, {\n      paginate: true,\n    });\n\n    const tags = res.body;\n\n    if (!tags.length) {\n      logger.debug({ sourceRepo: repository }, 'repository has no Gitlab tags');\n    }\n\n    return tags.map((tag) => tag.name).filter(Boolean);\n  } catch (err) {\n    logger.info({ sourceRepo: repository }, 'Failed to fetch Gitlab tags');\n    // istanbul ignore if\n    if (err.message && err.message.includes('Bad credentials')) {\n      logger.warn('Bad credentials triggering tag fail lookup in changelog');\n      throw err;\n    }\n    return [];\n  }\n}\n\nexport async function getReleaseNotesMd(\n  repository: string,\n  apiBaseUrl: string\n): Promise<ChangeLogFile> | null {\n  logger.trace('gitlab.getReleaseNotesMd()');\n  const repoid = getRepoId(repository);\n  const apiPrefix = `${ensureTrailingSlash(\n    apiBaseUrl\n  )}projects/${repoid}/repository/`;\n\n  // https://docs.gitlab.com/13.2/ee/api/repositories.html#list-repository-tree\n  let files = (\n    await http.getJson<GitlabTreeNode[]>(`${apiPrefix}tree?per_page=100`, {\n      paginate: true,\n    })\n  ).body;\n\n  files = files\n    .filter((f) => f.type === 'blob')\n    .filter((f) => changelogFilenameRegex.test(f.path));\n  if (!files.length) {\n    logger.trace('no changelog file found');\n    return null;\n  }\n  const { path: changelogFile, id } = files.shift();\n  /* istanbul ignore if */\n  if (files.length > 1) {\n    logger.debug(\n      `Multiple candidates for changelog file, using ${changelogFile}`\n    );\n  }\n\n  // https://docs.gitlab.com/13.2/ee/api/repositories.html#raw-blob-content\n  const fileRes = await http.get(`${apiPrefix}blobs/${id}/raw`);\n  const changelogMd = fileRes.body + '\\n#\\n##';\n  return { changelogFile, changelogMd };\n}\n\nexport async function getReleaseList(\n  apiBaseUrl: string,\n  repository: string\n): Promise<ChangeLogNotes[]> {\n  logger.trace('gitlab.getReleaseNotesMd()');\n\n  const repoId = getRepoId(repository);\n  const apiUrl = `${ensureTrailingSlash(\n    apiBaseUrl\n  )}projects/${repoId}/releases`;\n  const res = await http.getJson<\n    {\n      name: string;\n      release: string;\n      description: string;\n      tag_name: string;\n    }[]\n  >(`${apiUrl}?per_page=100`, {\n    paginate: true,\n  });\n  return res.body.map((release) => ({\n    url: `${apiUrl}/${release.tag_name}`,\n    name: release.name,\n    body: release.description,\n    tag: release.tag_name,\n  }));\n}\n"]}