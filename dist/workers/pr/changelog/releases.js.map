{"version":3,"file":"releases.js","sourceRoot":"","sources":["../../../../lib/workers/pr/changelog/releases.ts"],"names":[],"mappings":";;;AAAA,oDAA8D;AAC9D,uDAAoE;AACpE,4CAAyC;AACzC,oDAAyD;AAGzD,SAAS,UAAU,CAAC,OAAsB,EAAE,EAAU,EAAE,EAAU;IAChE,OAAO,CACL,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,KAAK,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC;QAC7C,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,KAAK,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC;QAC7C,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,KAAK,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,CAC9C,CAAC;AACJ,CAAC;AAED,SAAS,eAAe,CACtB,OAAsB,EACtB,EAAU,EACV,EAAU;IAEV,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,IAAI,UAAU,CAAC,OAAO,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;AAC9D,CAAC;AAEM,KAAK,UAAU,kBAAkB,CACtC,MAA2B;IAE3B,MAAM,EAAE,UAAU,EAAE,WAAW,EAAE,SAAS,EAAE,OAAO,EAAE,UAAU,EAAE,GAAG,MAAM,CAAC;IAC3E,qBAAqB;IACrB,IAAI,CAAC,+BAAsB,CAAC,MAAM,CAAC,EAAE;QACnC,OAAO,IAAI,CAAC;KACb;IACD,IAAI;QACF,MAAM,WAAW,GAAG,CAAC,MAAM,2BAAc,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC;QAC5D,MAAM,OAAO,GAAG,gBAAG,CAAC,UAAU,CAAC,CAAC;QAEhC,MAAM,QAAQ,GAAG,WAAW;aACzB,MAAM,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,YAAY,CAAC,OAAO,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;aACvE,MAAM,CACL,CAAC,OAAO,EAAE,EAAE,CACV,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,WAAW,CAAC;YAC5C,OAAO,CAAC,aAAa,CAAC,OAAO,CAAC,OAAO,EAAE,WAAW,CAAC,CACtD;aACA,MAAM,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,OAAO,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;aACvE,MAAM,CACL,CAAC,OAAO,EAAE,EAAE,CACV,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC;YACjC,eAAe,CAAC,OAAO,EAAE,WAAW,EAAE,OAAO,CAAC,OAAO,CAAC;YACtD,eAAe,CAAC,OAAO,EAAE,SAAS,EAAE,OAAO,CAAC,OAAO,CAAC,CACvD,CAAC;QACJ,IAAI,OAAO,CAAC,cAAc,EAAE;YAC1B,KAAK,MAAM,OAAO,IAAI,QAAQ,IAAI,EAAE,EAAE;gBACpC,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC,cAAc,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;aAC3D;SACF;QACD,OAAO,QAAQ,CAAC;KACjB;IAAC,OAAO,GAAG,EAAE,0BAA0B,CAAC;QACvC,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,EAAE,wBAAwB,CAAC,CAAC;QAChD,eAAM,CAAC,KAAK,CAAC,EAAE,UAAU,EAAE,OAAO,EAAE,EAAE,wBAAwB,CAAC,CAAC;QAChE,OAAO,IAAI,CAAC;KACb;AACH,CAAC;AArCD,gDAqCC","sourcesContent":["import { Release, getPkgReleases } from '../../../datasource';\nimport { isGetPkgReleasesConfig } from '../../../datasource/common';\nimport { logger } from '../../../logger';\nimport { VersioningApi, get } from '../../../versioning';\nimport { BranchUpgradeConfig } from '../../common';\n\nfunction matchesMMP(version: VersioningApi, v1: string, v2: string): boolean {\n  return (\n    version.getMajor(v1) === version.getMajor(v2) &&\n    version.getMinor(v1) === version.getMinor(v2) &&\n    version.getPatch(v1) === version.getPatch(v2)\n  );\n}\n\nfunction matchesUnstable(\n  version: VersioningApi,\n  v1: string,\n  v2: string\n): boolean {\n  return !version.isStable(v1) && matchesMMP(version, v1, v2);\n}\n\nexport async function getInRangeReleases(\n  config: BranchUpgradeConfig\n): Promise<Release[] | null> {\n  const { versioning, fromVersion, toVersion, depName, datasource } = config;\n  // istanbul ignore if\n  if (!isGetPkgReleasesConfig(config)) {\n    return null;\n  }\n  try {\n    const pkgReleases = (await getPkgReleases(config)).releases;\n    const version = get(versioning);\n\n    const releases = pkgReleases\n      .filter((release) => version.isCompatible(release.version, fromVersion))\n      .filter(\n        (release) =>\n          version.equals(release.version, fromVersion) ||\n          version.isGreaterThan(release.version, fromVersion)\n      )\n      .filter((release) => !version.isGreaterThan(release.version, toVersion))\n      .filter(\n        (release) =>\n          version.isStable(release.version) ||\n          matchesUnstable(version, fromVersion, release.version) ||\n          matchesUnstable(version, toVersion, release.version)\n      );\n    if (version.valueToVersion) {\n      for (const release of releases || []) {\n        release.version = version.valueToVersion(release.version);\n      }\n    }\n    return releases;\n  } catch (err) /* istanbul ignore next */ {\n    logger.debug({ err }, 'getInRangeReleases err');\n    logger.debug({ datasource, depName }, 'Error getting releases');\n    return null;\n  }\n}\n"]}