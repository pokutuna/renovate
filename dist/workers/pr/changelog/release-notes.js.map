{"version":3,"file":"release-notes.js","sourceRoot":"","sources":["../../../../lib/workers/pr/changelog/release-notes.ts"],"names":[],"mappings":"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","sourcesContent":["import * as URL from 'url';\nimport { linkify } from 'linkify-markdown';\nimport MarkdownIt from 'markdown-it';\n\nimport { logger } from '../../../logger';\nimport * as memCache from '../../../util/cache/memory';\nimport * as packageCache from '../../../util/cache/package';\nimport { ChangeLogFile, ChangeLogNotes, ChangeLogResult } from './common';\nimport * as github from './github';\nimport * as gitlab from './gitlab';\n\nconst markdown = new MarkdownIt('zero');\nmarkdown.enable(['heading', 'lheading']);\n\nexport async function getReleaseList(\n  apiBaseUrl: string,\n  repository: string\n): Promise<ChangeLogNotes[]> {\n  logger.trace('getReleaseList()');\n  // istanbul ignore if\n  if (!apiBaseUrl) {\n    logger.debug('No apiBaseUrl');\n    return [];\n  }\n  try {\n    if (apiBaseUrl.includes('gitlab')) {\n      return await gitlab.getReleaseList(apiBaseUrl, repository);\n    }\n    return await github.getReleaseList(apiBaseUrl, repository);\n  } catch (err) /* istanbul ignore next */ {\n    if (err.statusCode === 404) {\n      logger.debug({ repository }, 'getReleaseList 404');\n    } else {\n      logger.info({ repository, err }, 'getReleaseList error');\n    }\n    return [];\n  }\n}\n\nexport function getCachedReleaseList(\n  apiBaseUrl: string,\n  repository: string\n): Promise<ChangeLogNotes[]> {\n  const cacheKey = `getReleaseList-${apiBaseUrl}-${repository}`;\n  const cachedResult = memCache.get(cacheKey);\n  // istanbul ignore if\n  if (cachedResult) {\n    return cachedResult;\n  }\n  const promisedRes = getReleaseList(apiBaseUrl, repository);\n  memCache.set(cacheKey, promisedRes);\n  return promisedRes;\n}\n\nexport function massageBody(\n  input: string | undefined | null,\n  baseUrl: string\n): string {\n  let body = input || '';\n  // Convert line returns\n  body = body.replace(/\\r\\n/g, '\\n');\n  // semantic-release cleanup\n  body = body.replace(/^<a name=\"[^\"]*\"><\\/a>\\n/, '');\n  body = body.replace(\n    new RegExp(\n      `^##? \\\\[[^\\\\]]*\\\\]\\\\(${baseUrl}[^/]*\\\\/[^/]*\\\\/compare\\\\/.*?\\\\n`\n    ),\n    ''\n  );\n  // Clean-up unnecessary commits link\n  body = `\\n${body}\\n`.replace(\n    new RegExp(`\\\\n${baseUrl}[^/]+\\\\/[^/]+\\\\/compare\\\\/[^\\\\n]+(\\\\n|$)`),\n    '\\n'\n  );\n  // Reduce headings size\n  body = body\n    .replace(/\\n\\s*####? /g, '\\n##### ')\n    .replace(/\\n\\s*## /g, '\\n#### ')\n    .replace(/\\n\\s*# /g, '\\n### ');\n  // Trim whitespace\n  return body.trim();\n}\n\nexport async function getReleaseNotes(\n  repository: string,\n  version: string,\n  depName: string,\n  baseUrl: string,\n  apiBaseUrl: string\n): Promise<ChangeLogNotes | null> {\n  logger.trace(`getReleaseNotes(${repository}, ${version}, ${depName})`);\n  const releaseList = await getCachedReleaseList(apiBaseUrl, repository);\n  logger.trace({ releaseList }, 'Release list from getReleaseList');\n  let releaseNotes: ChangeLogNotes | null = null;\n  releaseList.forEach((release) => {\n    if (\n      release.tag === version ||\n      release.tag === `v${version}` ||\n      release.tag === `${depName}-${version}`\n    ) {\n      releaseNotes = release;\n      releaseNotes.url = baseUrl.includes('gitlab')\n        ? `${baseUrl}${repository}/tags/${release.tag}`\n        : `${baseUrl}${repository}/releases/${release.tag}`;\n      releaseNotes.body = massageBody(releaseNotes.body, baseUrl);\n      if (!releaseNotes.body.length) {\n        releaseNotes = null;\n      } else {\n        try {\n          if (baseUrl !== 'https://gitlab.com/') {\n            releaseNotes.body = linkify(releaseNotes.body, {\n              repository: `${baseUrl}${repository}`,\n            });\n          }\n        } catch (err) /* istanbul ignore next */ {\n          logger.warn({ err, baseUrl, repository }, 'Error linkifying');\n        }\n      }\n    }\n  });\n  logger.trace({ releaseNotes });\n  return releaseNotes;\n}\n\nfunction sectionize(text: string, level: number): string[] {\n  const sections: [number, number][] = [];\n  const lines = text.split('\\n');\n  const tokens = markdown.parse(text, undefined);\n  tokens.forEach((token) => {\n    if (token.type === 'heading_open') {\n      const lev = +token.tag.substr(1);\n      if (lev <= level) {\n        sections.push([lev, token.map[0]]);\n      }\n    }\n  });\n  sections.push([-1, lines.length]);\n  const result: string[] = [];\n  for (let i = 1; i < sections.length; i += 1) {\n    const [lev, start] = sections[i - 1];\n    const [, end] = sections[i];\n    if (lev === level) {\n      result.push(lines.slice(start, end).join('\\n'));\n    }\n  }\n  return result;\n}\n\nfunction isUrl(url: string): boolean {\n  try {\n    return !!URL.parse(url).hostname;\n  } catch (err) {\n    // istanbul ignore next\n    logger.debug({ err }, `Error parsing ${url} in URL.parse`);\n  }\n  // istanbul ignore next\n  return false;\n}\n\nexport async function getReleaseNotesMdFileInner(\n  repository: string,\n  apiBaseUrl: string\n): Promise<ChangeLogFile> | null {\n  try {\n    if (apiBaseUrl.includes('gitlab')) {\n      return await gitlab.getReleaseNotesMd(repository, apiBaseUrl);\n    }\n    return await github.getReleaseNotesMd(repository, apiBaseUrl);\n  } catch (err) /* istanbul ignore next */ {\n    if (err.statusCode === 404) {\n      logger.debug('Error 404 getting changelog md');\n    } else {\n      logger.debug({ err, repository }, 'Error getting changelog md');\n    }\n    return null;\n  }\n}\n\nexport function getReleaseNotesMdFile(\n  repository: string,\n  apiBaseUrl: string\n): Promise<ChangeLogFile> | null {\n  const cacheKey = `getReleaseNotesMdFile-${repository}-${apiBaseUrl}`;\n  const cachedResult = memCache.get(cacheKey);\n  // istanbul ignore if\n  if (cachedResult !== undefined) {\n    return cachedResult;\n  }\n  const promisedRes = getReleaseNotesMdFileInner(repository, apiBaseUrl);\n  memCache.set(cacheKey, promisedRes);\n  return promisedRes;\n}\n\nexport async function getReleaseNotesMd(\n  repository: string,\n  version: string,\n  baseUrl: string,\n  apiBaseUrl: string\n): Promise<ChangeLogNotes | null> {\n  logger.trace(`getReleaseNotesMd(${repository}, ${version})`);\n  const skippedRepos = ['facebook/react-native'];\n  // istanbul ignore if\n  if (skippedRepos.includes(repository)) {\n    return null;\n  }\n  const changelog = await getReleaseNotesMdFile(repository, apiBaseUrl);\n  if (!changelog) {\n    return null;\n  }\n  const { changelogFile } = changelog;\n  const changelogMd = changelog.changelogMd.replace(\n    /\\n\\s*<a name=\"[^\"]*\">.*?<\\/a>\\n/g,\n    '\\n'\n  );\n  for (const level of [1, 2, 3, 4, 5, 6, 7]) {\n    const changelogParsed = sectionize(changelogMd, level);\n    if (changelogParsed.length >= 2) {\n      for (const section of changelogParsed) {\n        try {\n          // replace brackets and parenthesis with space\n          const deParenthesizedSection = section.replace(/[[\\]()]/g, ' ');\n          const [heading] = deParenthesizedSection.split('\\n');\n          const title = heading\n            .replace(/^\\s*#*\\s*/, '')\n            .split(' ')\n            .filter(Boolean);\n          let body = section.replace(/.*?\\n(-{3,}\\n)?/, '').trim();\n          for (const word of title) {\n            if (word.includes(version) && !isUrl(word)) {\n              logger.trace({ body }, 'Found release notes for v' + version);\n              // TODO: fix url\n              let url = `${baseUrl}${repository}/blob/master/${changelogFile}#`;\n              url += title.join('-').replace(/[^A-Za-z0-9-]/g, '');\n              body = massageBody(body, baseUrl);\n              if (body?.length) {\n                try {\n                  body = linkify(body, {\n                    repository: `${baseUrl}${repository}`,\n                  });\n                } catch (err) /* istanbul ignore next */ {\n                  logger.warn({ body, err }, 'linkify error');\n                }\n              }\n              return {\n                body,\n                url,\n              };\n            }\n          }\n        } catch (err) /* istanbul ignore next */ {\n          logger.warn({ err }, `Error parsing ${changelogFile}`);\n        }\n      }\n    }\n    logger.trace({ repository }, `No level ${level} changelogs headings found`);\n  }\n  logger.trace({ repository, version }, `No entry found in ${changelogFile}`);\n  return null;\n}\n\nexport async function addReleaseNotes(\n  input: ChangeLogResult\n): Promise<ChangeLogResult> {\n  if (\n    !input?.versions ||\n    (!input?.project?.github && !input?.project?.gitlab)\n  ) {\n    logger.debug('Missing project or versions');\n    return input;\n  }\n  const output: ChangeLogResult = { ...input, versions: [] };\n  const repository =\n    input.project.github != null\n      ? input.project.github.replace(/\\.git$/, '')\n      : input.project.gitlab;\n  const cacheNamespace = input.project.github\n    ? 'changelog-github-notes'\n    : 'changelog-gitlab-notes';\n  function getCacheKey(version: string): string {\n    return `${repository}:${version}`;\n  }\n  for (const v of input.versions) {\n    let releaseNotes: ChangeLogNotes;\n    const cacheKey = getCacheKey(v.version);\n    releaseNotes = await packageCache.get(cacheNamespace, cacheKey);\n    if (!releaseNotes) {\n      if (input.project.github != null) {\n        releaseNotes = await getReleaseNotesMd(\n          repository,\n          v.version,\n          input.project.baseUrl,\n          input.project.apiBaseUrl\n        );\n      } else {\n        releaseNotes = await getReleaseNotesMd(\n          repository,\n          v.version,\n          input.project.baseUrl,\n          input.project.apiBaseUrl\n        );\n      }\n      if (!releaseNotes) {\n        releaseNotes = await getReleaseNotes(\n          repository,\n          v.version,\n          input.project.depName,\n          input.project.baseUrl,\n          input.project.apiBaseUrl\n        );\n      }\n      // Small hack to force display of release notes when there is a compare url\n      if (!releaseNotes && v.compare.url) {\n        releaseNotes = { url: v.compare.url };\n      }\n      const cacheMinutes = 55;\n      await packageCache.set(\n        cacheNamespace,\n        cacheKey,\n        releaseNotes,\n        cacheMinutes\n      );\n    }\n    output.versions.push({\n      ...v,\n      releaseNotes,\n    });\n    output.hasReleaseNotes = output.hasReleaseNotes || !!releaseNotes;\n  }\n  return output;\n}\n"]}