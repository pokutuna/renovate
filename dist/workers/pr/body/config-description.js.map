{"version":3,"file":"config-description.js","sourceRoot":"","sources":["../../../../lib/workers/pr/body/config-description.ts"],"names":[],"mappings":";;;AAAA,gDAA6C;AAC7C,0CAA8C;AAC9C,+CAA8C;AAGvC,KAAK,UAAU,sBAAsB,CAC1C,MAAoB;IAEpB,IAAI,MAAM,GAAG,2CAA2C,CAAC;IACzD,MAAM,IAAI,eAAO,CAAC,uBAAuB,CAAC,CAAC;IAC3C,IACE,MAAM,CAAC,QAAQ;QACd,MAAM,CAAC,QAAkB,KAAK,aAAa;QAC5C,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,aAAa,EACpC;QACA,MAAM,IAAI,IAAI,MAAM,CAAC,QAAQ,GAAG,CAAC;QACjC,IAAI,MAAM,CAAC,QAAQ,EAAE;YACnB,MAAM,IAAI,gBAAgB,MAAM,CAAC,QAAQ,GAAG,CAAC;SAC9C;aAAM;YACL,MAAM,IAAI,SAAS,CAAC;SACrB;KACF;SAAM;QACL,MAAM,IAAI,oCAAoC,CAAC;KAChD;IAED,MAAM,IAAI,MAAM,CAAC;IACjB,MAAM,IAAI,eAAO,CAAC,0CAA0C,CAAC,CAAC;IAC9D,IAAI,MAAM,CAAC,SAAS,EAAE;QACpB,MAAM,YAAY,GAAG,MAAM,mBAAQ,CAAC,eAAe,CACjD,MAAM,CAAC,UAAU,EACjB,MAAM,CAAC,oBAAoB,CAC5B,CAAC;QACF,qBAAqB;QACrB,IAAI,YAAY,KAAK,oBAAY,CAAC,GAAG,EAAE;YACrC,MAAM,IAAI,wCAAwC,CAAC;SACpD;aAAM;YACL,MAAM,IAAI,UAAU,CAAC;SACtB;KACF;SAAM;QACL,MAAM;YACJ,wEAAwE,CAAC;KAC5E;IACD,MAAM,IAAI,MAAM,CAAC;IACjB,MAAM,IAAI,eAAO,CAAC,0BAA0B,CAAC,CAAC;IAC9C,IAAI,MAAM,CAAC,UAAU,KAAK,oBAAoB,EAAE;QAC9C,MAAM,IAAI,mCAAmC,CAAC;KAC/C;SAAM,IAAI,MAAM,CAAC,UAAU,KAAK,OAAO,EAAE;QACxC,MAAM,IAAI,OAAO,CAAC;KACnB;SAAM;QACL,MAAM,IAAI,gCAAgC,CAAC;KAC5C;IACD,MAAM,IAAI,8CAA8C,CAAC;IACzD,IAAI,MAAM,CAAC,cAAc,EAAE;QACzB,MAAM,IAAI,eAAO,CACf,yFAAyF,MAAM,CAAC,YAAY,CAAC,IAAI,4BAA4B,CAC9I,CAAC;KACH;SAAM;QACL,MAAM,IAAI,eAAO,CACf,uEACE,MAAM,CAAC,QAAQ,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,eACjD,aAAa,CACd,CAAC;KACH;IACD,OAAO,MAAM,CAAC;AAChB,CAAC;AA3DD,wDA2DC","sourcesContent":["import { platform } from '../../../platform';\nimport { BranchStatus } from '../../../types';\nimport { emojify } from '../../../util/emoji';\nimport { BranchConfig } from '../../common';\n\nexport async function getPrConfigDescription(\n  config: BranchConfig\n): Promise<string> {\n  let prBody = `\\n\\n---\\n\\n### Renovate configuration\\n\\n`;\n  prBody += emojify(`:date: **Schedule**: `);\n  if (\n    config.schedule &&\n    (config.schedule as never) !== 'at any time' &&\n    config.schedule[0] !== 'at any time'\n  ) {\n    prBody += `\"${config.schedule}\"`;\n    if (config.timezone) {\n      prBody += ` in timezone ${config.timezone}.`;\n    } else {\n      prBody += ` (UTC).`;\n    }\n  } else {\n    prBody += 'At any time (no schedule defined).';\n  }\n\n  prBody += '\\n\\n';\n  prBody += emojify(':vertical_traffic_light: **Automerge**: ');\n  if (config.automerge) {\n    const branchStatus = await platform.getBranchStatus(\n      config.branchName,\n      config.requiredStatusChecks\n    );\n    // istanbul ignore if\n    if (branchStatus === BranchStatus.red) {\n      prBody += 'Disabled due to failing status checks.';\n    } else {\n      prBody += 'Enabled.';\n    }\n  } else {\n    prBody +=\n      'Disabled by config. Please merge this manually once you are satisfied.';\n  }\n  prBody += '\\n\\n';\n  prBody += emojify(':recycle: **Rebasing**: ');\n  if (config.rebaseWhen === 'behind-base-branch') {\n    prBody += 'Whenever PR is behind base branch';\n  } else if (config.rebaseWhen === 'never') {\n    prBody += 'Never';\n  } else {\n    prBody += 'Whenever PR becomes conflicted';\n  }\n  prBody += `, or you tick the rebase/retry checkbox.\\n\\n`;\n  if (config.recreateClosed) {\n    prBody += emojify(\n      `:ghost: **Immortal**: This PR will be recreated if closed unmerged. Get [config help](${config.productLinks.help}) if that's undesired.\\n\\n`\n    );\n  } else {\n    prBody += emojify(\n      `:no_bell: **Ignore**: Close this PR and you won't be reminded about ${\n        config.upgrades.length === 1 ? 'this update' : 'these updates'\n      } again.\\n\\n`\n    );\n  }\n  return prBody;\n}\n"]}