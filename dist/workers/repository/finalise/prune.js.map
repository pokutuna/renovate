{"version":3,"file":"prune.js","sourceRoot":"","sources":["../../../../lib/workers/repository/finalise/prune.ts"],"names":[],"mappings":"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","sourcesContent":["import { RenovateConfig } from '../../../config';\nimport { REPOSITORY_CHANGED } from '../../../constants/error-messages';\nimport { PR_STATE_OPEN } from '../../../constants/pull-requests';\nimport { logger } from '../../../logger';\nimport { platform } from '../../../platform';\nimport { getAllRenovateBranches, isBranchModified } from '../../../util/git';\n\nasync function cleanUpBranches(\n  { dryRun, pruneStaleBranches: enabled }: RenovateConfig,\n  remainingBranches: string[]\n): Promise<void> {\n  for (const branchName of remainingBranches) {\n    try {\n      const pr = await platform.findPr({\n        branchName,\n        state: PR_STATE_OPEN,\n      });\n      const branchIsModified = await isBranchModified(branchName);\n      if (pr && !branchIsModified) {\n        if (!pr.title.endsWith('- autoclosed')) {\n          if (dryRun) {\n            logger.info(\n              `DRY-RUN: Would update pr ${pr.number} to ${pr.title} - autoclosed`\n            );\n          } else if (enabled === false) {\n            logger.info(\n              `PRUNING-DISABLED: Would update pr ${pr.number} to ${pr.title} - autoclosed`\n            );\n          } else {\n            await platform.updatePr(pr.number, `${pr.title} - autoclosed`);\n          }\n        }\n      }\n      const closePr = true;\n      logger.debug({ branch: branchName }, `Deleting orphan branch`);\n      if (branchIsModified) {\n        if (pr) {\n          logger.debug(\n            { prNo: pr?.number, prTitle: pr?.title },\n            'Skip PR autoclosing'\n          );\n          if (dryRun) {\n            logger.info(`DRY-RUN: Would add Autoclosing Skipped comment to PR`);\n          } else {\n            await platform.ensureComment({\n              number: pr.number,\n              topic: 'Autoclosing Skipped',\n              content:\n                'This PR has been flagged for autoclosing, however it is being skipped due to the branch being already modified. Please close/delete it manually or report a bug if you think this is in error.',\n            });\n          }\n        }\n      } else if (dryRun) {\n        logger.info(`DRY-RUN: Would deleting orphan branch ${branchName}`);\n      } else if (enabled === false) {\n        logger.info(\n          `PRUNING-DISABLED: Would deleting orphan branch ${branchName}`\n        );\n      } else {\n        await platform.deleteBranch(branchName, closePr);\n      }\n      if (pr && !branchIsModified) {\n        logger.info({ prNo: pr.number, prTitle: pr.title }, 'PR autoclosed');\n      }\n    } catch (err) /* istanbul ignore next */ {\n      if (err.message !== REPOSITORY_CHANGED) {\n        logger.warn({ err, branch: branchName }, 'Error pruning branch');\n      }\n    }\n  }\n}\n\nexport async function pruneStaleBranches(\n  config: RenovateConfig,\n  branchList: string[]\n): Promise<void> {\n  logger.debug('Removing any stale branches');\n  logger.trace({ config }, `pruneStaleBranches`);\n  logger.debug(`config.repoIsOnboarded=${config.repoIsOnboarded}`);\n  if (!branchList) {\n    logger.debug('No branchList');\n    return;\n  }\n  let renovateBranches = await getAllRenovateBranches(config.branchPrefix);\n  if (!renovateBranches?.length) {\n    logger.debug('No renovate branches found');\n    return;\n  }\n  logger.debug({ branchList, renovateBranches }, 'Branch lists');\n  const lockFileBranch = `${config.branchPrefix}lock-file-maintenance`;\n  renovateBranches = renovateBranches.filter(\n    (branch) => branch !== lockFileBranch\n  );\n  const remainingBranches = renovateBranches.filter(\n    (branch) => !branchList.includes(branch)\n  );\n  logger.debug(`remainingBranches=${remainingBranches}`);\n  if (remainingBranches.length === 0) {\n    logger.debug('No branches to clean up');\n    return;\n  }\n\n  await cleanUpBranches(config, remainingBranches);\n}\n"]}