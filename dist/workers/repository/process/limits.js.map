{"version":3,"file":"limits.js","sourceRoot":"","sources":["../../../../lib/workers/repository/process/limits.ts"],"names":[],"mappings":";;;;;;AAAA,oDAA4B;AAE5B,4CAAyC;AACzC,gDAA6C;AAC7C,2CAAiD;AAG1C,KAAK,UAAU,oBAAoB,CACxC,MAAsB;IAEtB,IAAI,MAAM,CAAC,aAAa,EAAE;QACxB,eAAM,CAAC,KAAK,CAAC,kCAAkC,CAAC,CAAC;QACjD,MAAM,MAAM,GAAG,MAAM,mBAAQ,CAAC,SAAS,EAAE,CAAC;QAC1C,MAAM,gBAAgB,GAAG,gBAAM,CAAC;YAC9B,IAAI,EAAE,gBAAM,EAAE,CAAC,IAAI,EAAE;SACtB,CAAC,CAAC;QACH,eAAM,CAAC,KAAK,CAAC,mBAAmB,GAAG,gBAAgB,CAAC,CAAC;QACrD,IAAI;YACF,MAAM,aAAa,GAAG,MAAM,CAAC,MAAM,CACjC,CAAC,EAAE,EAAE,EAAE,CACL,EAAE,CAAC,UAAU,KAAK,MAAM,CAAC,gBAAgB;gBACzC,gBAAM,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,gBAAgB,CAAC,CACjD,CAAC;YACF,MAAM,YAAY,GAAG,MAAM,CAAC,aAAa,GAAG,aAAa,CAAC,MAAM,CAAC;YACjE,eAAM,CAAC,KAAK,CAAC,8BAA8B,YAAY,EAAE,CAAC,CAAC;YAC3D,qBAAqB;YACrB,IAAI,YAAY,IAAI,CAAC,EAAE;gBACrB,eAAM,CAAC,KAAK,CACV;oBACE,GAAG,EAAE,YAAY;iBAClB,EACD,gDAAgD,CACjD,CAAC;aACH;YACD,OAAO,YAAY,CAAC;SACrB;QAAC,OAAO,GAAG,EAAE;YACZ,eAAM,CAAC,KAAK,CAAC,qCAAqC,CAAC,CAAC;SACrD;KACF;IACD,OAAO,EAAE,CAAC;AACZ,CAAC;AAjCD,oDAiCC;AAEM,KAAK,UAAU,yBAAyB,CAC7C,MAAsB,EACtB,QAAwB;IAExB,IAAI,MAAM,CAAC,iBAAiB,EAAE;QAC5B,eAAM,CAAC,KAAK,CAAC,gCAAgC,MAAM,CAAC,iBAAiB,GAAG,CAAC,CAAC;QAC1E,IAAI,aAAa,GAAG,CAAC,CAAC;QACtB,KAAK,MAAM,MAAM,IAAI,QAAQ,EAAE;YAC7B,IAAI,MAAM,kBAAY,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE;gBACzC,aAAa,IAAI,CAAC,CAAC;aACpB;SACF;QACD,eAAM,CAAC,KAAK,CAAC,GAAG,aAAa,yBAAyB,CAAC,CAAC;QACxD,MAAM,mBAAmB,GAAG,MAAM,CAAC,iBAAiB,GAAG,aAAa,CAAC;QACrE,eAAM,CAAC,KAAK,CAAC,kCAAkC,mBAAmB,EAAE,CAAC,CAAC;QACtE,OAAO,mBAAmB,CAAC;KAC5B;IACD,OAAO,EAAE,CAAC;AACZ,CAAC;AAlBD,8DAkBC;AAEM,KAAK,UAAU,eAAe,CACnC,MAAsB,EACtB,QAAwB;IAExB,MAAM,eAAe,GAAG,MAAM,oBAAoB,CAAC,MAAM,CAAC,CAAC;IAC3D,MAAM,mBAAmB,GAAG,MAAM,yBAAyB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;IAC9E,OAAO,eAAe,GAAG,mBAAmB;QAC1C,CAAC,CAAC,eAAe;QACjB,CAAC,CAAC,mBAAmB,CAAC;AAC1B,CAAC;AATD,0CASC","sourcesContent":["import moment from 'moment';\nimport { RenovateConfig } from '../../../config';\nimport { logger } from '../../../logger';\nimport { platform } from '../../../platform';\nimport { branchExists } from '../../../util/git';\nimport { BranchConfig } from '../../common';\n\nexport async function getPrHourlyRemaining(\n  config: RenovateConfig\n): Promise<number> {\n  if (config.prHourlyLimit) {\n    logger.debug('Calculating hourly PRs remaining');\n    const prList = await platform.getPrList();\n    const currentHourStart = moment({\n      hour: moment().hour(),\n    });\n    logger.debug('currentHourStart=' + currentHourStart);\n    try {\n      const soFarThisHour = prList.filter(\n        (pr) =>\n          pr.branchName !== config.onboardingBranch &&\n          moment(pr.createdAt).isAfter(currentHourStart)\n      );\n      const prsRemaining = config.prHourlyLimit - soFarThisHour.length;\n      logger.debug(`PR hourly limit remaining: ${prsRemaining}`);\n      // istanbul ignore if\n      if (prsRemaining <= 0) {\n        logger.debug(\n          {\n            prs: prsRemaining,\n          },\n          'Creation of new PRs is blocked by existing PRs'\n        );\n      }\n      return prsRemaining;\n    } catch (err) {\n      logger.error('Error checking PRs created per hour');\n    }\n  }\n  return 99;\n}\n\nexport async function getConcurrentPrsRemaining(\n  config: RenovateConfig,\n  branches: BranchConfig[]\n): Promise<number> {\n  if (config.prConcurrentLimit) {\n    logger.debug(`Enforcing prConcurrentLimit (${config.prConcurrentLimit})`);\n    let currentlyOpen = 0;\n    for (const branch of branches) {\n      if (await branchExists(branch.branchName)) {\n        currentlyOpen += 1;\n      }\n    }\n    logger.debug(`${currentlyOpen} PRs are currently open`);\n    const concurrentRemaining = config.prConcurrentLimit - currentlyOpen;\n    logger.debug(`PR concurrent limit remaining: ${concurrentRemaining}`);\n    return concurrentRemaining;\n  }\n  return 99;\n}\n\nexport async function getPrsRemaining(\n  config: RenovateConfig,\n  branches: BranchConfig[]\n): Promise<number> {\n  const hourlyRemaining = await getPrHourlyRemaining(config);\n  const concurrentRemaining = await getConcurrentPrsRemaining(config, branches);\n  return hourlyRemaining < concurrentRemaining\n    ? hourlyRemaining\n    : concurrentRemaining;\n}\n"]}