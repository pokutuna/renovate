{"version":3,"file":"fetch.js","sourceRoot":"","sources":["../../../../lib/workers/repository/process/fetch.ts"],"names":[],"mappings":"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","sourcesContent":["import pAll from 'p-all';\nimport {\n  ManagerConfig,\n  RenovateConfig,\n  getManagerConfig,\n  mergeChildConfig,\n} from '../../../config';\nimport { getDefaultConfig } from '../../../datasource';\nimport { logger } from '../../../logger';\nimport { getPackageUpdates } from '../../../manager';\nimport { PackageDependency, PackageFile } from '../../../manager/common';\nimport { SkipReason } from '../../../types';\nimport { clone } from '../../../util/clone';\nimport { applyPackageRules } from '../../../util/package-rules';\nimport { LookupUpdateConfig, lookupUpdates } from './lookup';\n\nasync function fetchDepUpdates(\n  packageFileConfig: ManagerConfig & PackageFile,\n  indep: PackageDependency\n): Promise<PackageDependency> {\n  const dep = clone(indep);\n  dep.updates = [];\n  if (dep.skipReason) {\n    return dep;\n  }\n  const { manager, packageFile } = packageFileConfig;\n  const { depName, currentValue } = dep;\n  // TODO: fix types\n  let depConfig = mergeChildConfig(packageFileConfig, dep);\n  const datasourceDefaultConfig = await getDefaultConfig(depConfig.datasource);\n  depConfig = mergeChildConfig(depConfig, datasourceDefaultConfig);\n  depConfig = applyPackageRules(depConfig);\n  if (depConfig.ignoreDeps.includes(depName)) {\n    logger.debug({ dependency: dep.depName }, 'Dependency is ignored');\n    dep.skipReason = SkipReason.Ignored;\n  } else if (depConfig.internalPackages?.includes(depName)) {\n    // istanbul ignore next\n    dep.skipReason = SkipReason.InternalPackage;\n  } else if (depConfig.enabled === false) {\n    logger.debug({ dependency: dep.depName }, 'Dependency is disabled');\n    dep.skipReason = SkipReason.Disabled;\n  } else {\n    if (depConfig.datasource) {\n      Object.assign(dep, await lookupUpdates(depConfig as LookupUpdateConfig));\n    } else {\n      dep.updates = await getPackageUpdates(manager, depConfig);\n    }\n    dep.updates = dep.updates || [];\n    // istanbul ignore if\n    if (dep.updates.length) {\n      logger.trace(\n        { dependency: depName },\n        `${dep.updates.length} result(s): ${dep.updates.map(\n          (upgrade) => upgrade.newValue\n        )}`\n      );\n    }\n    logger.trace({\n      packageFile,\n      manager,\n      depName,\n      currentValue,\n      updates: dep.updates,\n    });\n  }\n  return dep;\n}\n\nasync function fetchManagerPackagerFileUpdates(\n  config: RenovateConfig,\n  managerConfig: ManagerConfig,\n  pFile: PackageFile\n): Promise<void> {\n  const { packageFile } = pFile;\n  const packageFileConfig = mergeChildConfig(managerConfig, pFile);\n  const { manager } = packageFileConfig;\n  const queue = pFile.deps.map((dep) => (): Promise<PackageDependency> =>\n    fetchDepUpdates(packageFileConfig, dep)\n  );\n  logger.trace(\n    { manager, packageFile, queueLength: queue.length },\n    'fetchManagerPackagerFileUpdates starting with concurrency'\n  );\n  // eslint-disable-next-line no-param-reassign\n  pFile.deps = await pAll(queue, { concurrency: 5 });\n  logger.trace({ packageFile }, 'fetchManagerPackagerFileUpdates finished');\n}\n\nasync function fetchManagerUpdates(\n  config: RenovateConfig,\n  packageFiles: Record<string, PackageFile[]>,\n  manager: string\n): Promise<void> {\n  const managerConfig = getManagerConfig(config, manager);\n  const queue = packageFiles[manager].map((pFile) => (): Promise<void> =>\n    fetchManagerPackagerFileUpdates(config, managerConfig, pFile)\n  );\n  logger.trace(\n    { manager, queueLength: queue.length },\n    'fetchManagerUpdates starting'\n  );\n  await pAll(queue, { concurrency: 5 });\n  logger.trace({ manager }, 'fetchManagerUpdates finished');\n}\n\nexport async function fetchUpdates(\n  config: RenovateConfig,\n  packageFiles: Record<string, PackageFile[]>\n): Promise<void> {\n  const managers = Object.keys(packageFiles);\n  const allManagerJobs = managers.map((manager) =>\n    fetchManagerUpdates(config, packageFiles, manager)\n  );\n  await Promise.all(allManagerJobs);\n  logger.debug(\n    { baseBranch: config.baseBranch },\n    'Package releases lookups complete'\n  );\n}\n"]}