{"version":3,"file":"filter.js","sourceRoot":"","sources":["../../../../../lib/workers/repository/process/lookup/filter.ts"],"names":[],"mappings":"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","sourcesContent":["import * as semver from 'semver';\nimport { CONFIG_VALIDATION } from '../../../../constants/error-messages';\nimport { Release } from '../../../../datasource';\nimport { logger } from '../../../../logger';\nimport { regEx } from '../../../../util/regex';\nimport * as allVersioning from '../../../../versioning';\nimport * as npmVersioning from '../../../../versioning/npm';\nimport * as pep440 from '../../../../versioning/pep440';\nimport * as poetryVersioning from '../../../../versioning/poetry';\n\nexport interface FilterConfig {\n  allowedVersions?: string;\n  depName?: string;\n  followTag?: string;\n  ignoreDeprecated?: boolean;\n  ignoreUnstable?: boolean;\n  respectLatest?: boolean;\n  versioning: string;\n}\n\nconst regexes: Record<string, RegExp> = {};\n\nexport function filterVersions(\n  config: FilterConfig,\n  fromVersion: string,\n  latestVersion: string,\n  versions: string[],\n  releases: Release[]\n): string[] {\n  const {\n    versioning,\n    ignoreUnstable,\n    ignoreDeprecated,\n    respectLatest,\n    allowedVersions,\n  } = config;\n  const version = allVersioning.get(versioning);\n  if (!fromVersion) {\n    return [];\n  }\n\n  // Leave only versions greater than current\n  let filteredVersions = versions.filter((v) =>\n    version.isGreaterThan(v, fromVersion)\n  );\n\n  // Don't upgrade from non-deprecated to deprecated\n  const fromRelease = releases.find(\n    (release) => release.version === fromVersion\n  );\n  if (ignoreDeprecated && fromRelease && !fromRelease.isDeprecated) {\n    filteredVersions = filteredVersions.filter((v) => {\n      const versionRelease = releases.find((release) => release.version === v);\n      if (versionRelease.isDeprecated) {\n        logger.debug(\n          `Skipping ${config.depName}@${v} because it is deprecated`\n        );\n        return false;\n      }\n      return true;\n    });\n  }\n\n  if (allowedVersions) {\n    if (\n      allowedVersions.length > 1 &&\n      allowedVersions.startsWith('/') &&\n      allowedVersions.endsWith('/')\n    ) {\n      regexes[allowedVersions] =\n        regexes[allowedVersions] || regEx(allowedVersions.slice(1, -1));\n      filteredVersions = filteredVersions.filter((v) =>\n        regexes[allowedVersions].test(v)\n      );\n    } else if (\n      allowedVersions.length > 2 &&\n      allowedVersions.startsWith('!/') &&\n      allowedVersions.endsWith('/')\n    ) {\n      regexes[allowedVersions] =\n        regexes[allowedVersions] || regEx(allowedVersions.slice(2, -1));\n      filteredVersions = filteredVersions.filter(\n        (v) => !regexes[allowedVersions].test(v)\n      );\n    } else if (version.isValid(allowedVersions)) {\n      filteredVersions = filteredVersions.filter((v) =>\n        version.matches(v, allowedVersions)\n      );\n    } else if (\n      versioning !== npmVersioning.id &&\n      semver.validRange(allowedVersions)\n    ) {\n      logger.debug(\n        { depName: config.depName },\n        'Falling back to npm semver syntax for allowedVersions'\n      );\n      filteredVersions = filteredVersions.filter((v) =>\n        semver.satisfies(semver.coerce(v), allowedVersions)\n      );\n    } else if (\n      versioning === poetryVersioning.id &&\n      pep440.isValid(allowedVersions)\n    ) {\n      logger.debug(\n        { depName: config.depName },\n        'Falling back to pypi syntax for allowedVersions'\n      );\n      filteredVersions = filteredVersions.filter((v) =>\n        pep440.matches(v, allowedVersions)\n      );\n    } else {\n      const error = new Error(CONFIG_VALIDATION);\n      error.configFile = 'config';\n      error.validationError = 'Invalid `allowedVersions`';\n      error.validationMessage =\n        'The following allowedVersions does not parse as a valid version or range: ' +\n        JSON.stringify(allowedVersions);\n      throw error;\n    }\n  }\n\n  // Return all versions if we aren't ignore unstable. Also ignore latest\n  if (config.followTag || ignoreUnstable === false) {\n    return filteredVersions;\n  }\n\n  // if current is unstable then allow unstable in the current major only\n  if (!version.isStable(fromVersion)) {\n    // Allow unstable only in current major\n    return filteredVersions.filter(\n      (v) =>\n        version.isStable(v) ||\n        (version.getMajor(v) === version.getMajor(fromVersion) &&\n          version.getMinor(v) === version.getMinor(fromVersion) &&\n          version.getPatch(v) === version.getPatch(fromVersion))\n    );\n  }\n\n  // Normal case: remove all unstable\n  filteredVersions = filteredVersions.filter((v) => version.isStable(v));\n\n  // Filter the latest\n\n  // No filtering if no latest\n  // istanbul ignore if\n  if (!latestVersion) {\n    return filteredVersions;\n  }\n  // No filtering if not respecting latest\n  if (respectLatest === false) {\n    return filteredVersions;\n  }\n  // No filtering if fromVersion is already past latest\n  if (version.isGreaterThan(fromVersion, latestVersion)) {\n    return filteredVersions;\n  }\n  return filteredVersions.filter(\n    (v) => !version.isGreaterThan(v, latestVersion)\n  );\n}\n"]}