{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../lib/workers/repository/process/lookup/index.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  RenovateConfig,\n  UpdateType,\n  ValidationMessage,\n} from '../../../../config';\nimport {\n  Release,\n  getDigest,\n  getPkgReleases,\n  isGetPkgReleasesConfig,\n  supportsDigests,\n} from '../../../../datasource';\nimport * as datasourceGitSubmodules from '../../../../datasource/git-submodules';\nimport { logger } from '../../../../logger';\nimport { getRangeStrategy } from '../../../../manager';\nimport { LookupUpdate, RangeConfig } from '../../../../manager/common';\nimport { SkipReason } from '../../../../types';\nimport { clone } from '../../../../util/clone';\nimport * as allVersioning from '../../../../versioning';\nimport { FilterConfig, filterVersions } from './filter';\nimport { RollbackConfig, getRollbackUpdate } from './rollback';\n\nexport interface UpdateResult {\n  sourceDirectory?: string;\n  dockerRepository?: string;\n  dockerRegistry?: string;\n  changelogUrl?: string;\n  homepage?: string;\n  deprecationMessage?: string;\n  sourceUrl?: string;\n  skipReason: SkipReason;\n  releases: Release[];\n\n  updates: LookupUpdate[];\n  warnings: ValidationMessage[];\n}\n\nexport interface LookupUpdateConfig\n  extends RollbackConfig,\n    FilterConfig,\n    RangeConfig,\n    RenovateConfig {\n  separateMinorPatch?: boolean;\n  digestOneAndOnly?: boolean;\n  pinDigests?: boolean;\n  rollbackPrs?: boolean;\n  currentDigest?: string;\n  lockedVersion?: string;\n  vulnerabilityAlert?: boolean;\n  separateMajorMinor?: boolean;\n  separateMultipleMajor?: boolean;\n}\n\nfunction getType(\n  config: LookupUpdateConfig,\n  fromVersion: string,\n  toVersion: string\n): UpdateType {\n  const { versioning, rangeStrategy, currentValue } = config;\n  const version = allVersioning.get(versioning);\n  if (rangeStrategy === 'bump' && version.matches(toVersion, currentValue)) {\n    return 'bump';\n  }\n  if (version.getMajor(toVersion) > version.getMajor(fromVersion)) {\n    return 'major';\n  }\n  if (version.getMinor(toVersion) > version.getMinor(fromVersion)) {\n    return 'minor';\n  }\n  if (config.separateMinorPatch) {\n    return 'patch';\n  }\n  if (config.patch.automerge && !config.minor.automerge) {\n    return 'patch';\n  }\n  return 'minor';\n}\n\nfunction getFromVersion(\n  config: LookupUpdateConfig,\n  rangeStrategy: string,\n  latestVersion: string,\n  allVersions: string[]\n): string | null {\n  const { currentValue, lockedVersion, versioning } = config;\n  const version = allVersioning.get(versioning);\n  if (version.isVersion(currentValue)) {\n    return currentValue;\n  }\n  if (version.isSingleVersion(currentValue)) {\n    return currentValue.replace(/=/g, '').trim();\n  }\n  logger.trace(`currentValue ${currentValue} is range`);\n  let useVersions = allVersions.filter((v) => version.matches(v, currentValue));\n  if (latestVersion && version.matches(latestVersion, currentValue)) {\n    useVersions = useVersions.filter(\n      (v) => !version.isGreaterThan(v, latestVersion)\n    );\n  }\n  if (rangeStrategy === 'pin') {\n    return (\n      lockedVersion || version.maxSatisfyingVersion(useVersions, currentValue)\n    );\n  }\n  if (rangeStrategy === 'bump') {\n    // Use the lowest version in the current range\n    return version.minSatisfyingVersion(useVersions, currentValue);\n  }\n  // Use the highest version in the current range\n  return version.maxSatisfyingVersion(useVersions, currentValue);\n}\n\nfunction getBucket(config: LookupUpdateConfig, update: LookupUpdate): string {\n  const { separateMajorMinor, separateMultipleMajor } = config;\n  const { updateType, newMajor } = update;\n  if (updateType === 'lockfileUpdate') {\n    return updateType;\n  }\n  if (\n    !separateMajorMinor ||\n    config.major.automerge === true ||\n    (config.automerge && config.major.automerge !== false)\n  ) {\n    return 'latest';\n  }\n  if (separateMultipleMajor && updateType === 'major') {\n    return `major-${newMajor}`;\n  }\n  return updateType;\n}\n\nexport async function lookupUpdates(\n  config: LookupUpdateConfig\n): Promise<UpdateResult> {\n  const { depName, currentValue, lockedVersion, vulnerabilityAlert } = config;\n  logger.trace({ dependency: depName, currentValue }, 'lookupUpdates');\n  const version = allVersioning.get(config.versioning);\n  const res: UpdateResult = { updates: [], warnings: [] } as any;\n\n  const isValid = currentValue && version.isValid(currentValue);\n  if (!isValid) {\n    res.skipReason = SkipReason.InvalidValue;\n  }\n\n  // istanbul ignore if\n  if (!isGetPkgReleasesConfig(config)) {\n    res.skipReason = SkipReason.Unknown;\n    return res;\n  }\n\n  if (isValid) {\n    const dependency = clone(await getPkgReleases(config));\n    if (!dependency) {\n      // If dependency lookup fails then warn and return\n      const warning: ValidationMessage = {\n        depName,\n        message: `Failed to look up dependency ${depName}`,\n      };\n      logger.debug(\n        { dependency: depName, packageFile: config.packageFile },\n        warning.message\n      );\n      // TODO: return warnings in own field\n      res.warnings.push(warning);\n      return res;\n    }\n    if (dependency.deprecationMessage) {\n      logger.debug({ dependency: depName }, 'Found deprecationMessage');\n      res.deprecationMessage = dependency.deprecationMessage;\n    }\n    res.sourceUrl = dependency?.sourceUrl;\n    if (dependency.sourceDirectory) {\n      res.sourceDirectory = dependency.sourceDirectory;\n    }\n    res.homepage = dependency.homepage;\n    res.changelogUrl = dependency.changelogUrl;\n    // TODO: improve this\n    // istanbul ignore if\n    if (dependency.dockerRegistry) {\n      res.dockerRegistry = dependency.dockerRegistry;\n      res.dockerRepository = dependency.dockerRepository;\n    }\n    const { latestVersion, releases } = dependency;\n    // Filter out any results from datasource that don't comply with our versioning\n    let allVersions = releases\n      .map((release) => release.version)\n      .filter((v) => version.isVersion(v));\n    // istanbul ignore if\n    if (allVersions.length === 0) {\n      const message = `Found no results from datasource that look like a version`;\n      logger.debug({ dependency: depName, result: dependency }, message);\n      if (!config.currentDigest) {\n        return res;\n      }\n    }\n    if (config.followTag) {\n      const taggedVersion = dependency.tags[config.followTag];\n      if (!taggedVersion) {\n        res.warnings.push({\n          depName,\n          message: `Can't find version with tag ${config.followTag} for ${depName}`,\n        });\n        return res;\n      }\n      allVersions = allVersions.filter(\n        (v) =>\n          v === taggedVersion ||\n          (v === currentValue &&\n            version.isGreaterThan(taggedVersion, currentValue))\n      );\n    }\n    // Check that existing constraint can be satisfied\n    const allSatisfyingVersions = allVersions.filter((v) =>\n      version.matches(v, currentValue)\n    );\n    if (config.rollbackPrs && !allSatisfyingVersions.length) {\n      const rollback = getRollbackUpdate(config, allVersions);\n      // istanbul ignore if\n      if (!rollback) {\n        res.warnings.push({\n          depName,\n          message: `Can't find version matching ${currentValue} for ${depName}`,\n        });\n        return res;\n      }\n      res.updates.push(rollback);\n    }\n    let rangeStrategy = getRangeStrategy(config);\n    // istanbul ignore if\n    if (rangeStrategy === 'update-lockfile' && !lockedVersion) {\n      rangeStrategy = 'bump';\n    }\n    const nonDeprecatedVersions = releases\n      .filter((release) => !release.isDeprecated)\n      .map((release) => release.version);\n    const fromVersion =\n      getFromVersion(\n        config,\n        rangeStrategy,\n        latestVersion,\n        nonDeprecatedVersions\n      ) || getFromVersion(config, rangeStrategy, latestVersion, allVersions);\n    if (\n      fromVersion &&\n      rangeStrategy === 'pin' &&\n      !version.isSingleVersion(currentValue)\n    ) {\n      res.updates.push({\n        updateType: 'pin',\n        isPin: true,\n        newValue: version.getNewValue({\n          currentValue,\n          rangeStrategy,\n          fromVersion,\n          toVersion: fromVersion,\n        }),\n        newMajor: version.getMajor(fromVersion),\n      });\n    }\n    let filterStart = fromVersion;\n    if (lockedVersion && rangeStrategy === 'update-lockfile') {\n      // Look for versions greater than the current locked version that still satisfy the package.json range\n      filterStart = lockedVersion;\n    }\n    // Filter latest, unstable, etc\n    let filteredVersions = filterVersions(\n      config,\n      filterStart,\n      dependency.latestVersion,\n      allVersions,\n      releases\n    ).filter((v) =>\n      // Leave only compatible versions\n      version.isCompatible(v, currentValue)\n    );\n    if (vulnerabilityAlert) {\n      filteredVersions = filteredVersions.slice(0, 1);\n    }\n    const buckets: Record<string, LookupUpdate> = {};\n    for (const toVersion of filteredVersions) {\n      const update: LookupUpdate = { fromVersion, toVersion } as any;\n      try {\n        update.newValue = version.getNewValue({\n          currentValue,\n          rangeStrategy,\n          fromVersion,\n          toVersion,\n        });\n      } catch (err) /* istanbul ignore next */ {\n        logger.warn(\n          { err, currentValue, rangeStrategy, fromVersion, toVersion },\n          'getNewValue error'\n        );\n        update.newValue = currentValue;\n      }\n      if (!update.newValue || update.newValue === currentValue) {\n        if (!config.lockedVersion) {\n          continue; // eslint-disable-line no-continue\n        }\n        // istanbul ignore if\n        if (rangeStrategy === 'bump') {\n          logger.trace(\n            { depName, currentValue, lockedVersion, toVersion },\n            'Skipping bump because newValue is the same'\n          );\n          continue; // eslint-disable-line no-continue\n        }\n        update.updateType = 'lockfileUpdate';\n        update.fromVersion = lockedVersion;\n        update.displayFrom = lockedVersion;\n        update.displayTo = toVersion;\n        update.isSingleVersion = true;\n      }\n      update.newMajor = version.getMajor(toVersion);\n      update.newMinor = version.getMinor(toVersion);\n      update.updateType =\n        update.updateType || getType(config, update.fromVersion, toVersion);\n      update.isSingleVersion =\n        update.isSingleVersion || !!version.isSingleVersion(update.newValue);\n      if (!version.isVersion(update.newValue)) {\n        update.isRange = true;\n      }\n      const updateRelease = releases.find((release) =>\n        version.equals(release.version, toVersion)\n      );\n      // TODO: think more about whether to just Object.assign this\n      const releaseFields: (keyof Pick<\n        Release,\n        | 'releaseTimestamp'\n        | 'canBeUnpublished'\n        | 'downloadUrl'\n        | 'checksumUrl'\n        | 'newDigest'\n      >)[] = ['releaseTimestamp', 'canBeUnpublished', 'newDigest'];\n      releaseFields.forEach((field) => {\n        if (updateRelease[field] !== undefined) {\n          update[field] = updateRelease[field] as never;\n        }\n      });\n\n      const bucket = getBucket(config, update);\n      if (buckets[bucket]) {\n        if (\n          version.isGreaterThan(update.toVersion, buckets[bucket].toVersion)\n        ) {\n          buckets[bucket] = update;\n        }\n      } else {\n        buckets[bucket] = update;\n      }\n    }\n    res.updates = res.updates.concat(Object.values(buckets));\n  } else if (!currentValue) {\n    res.skipReason = SkipReason.UnsupportedValue;\n  } else {\n    logger.debug(`Dependency ${depName} has unsupported value ${currentValue}`);\n    if (!config.pinDigests && !config.currentDigest) {\n      res.skipReason = SkipReason.UnsupportedValue;\n    } else {\n      delete res.skipReason;\n    }\n  }\n  // Add digests if necessary\n  if (config.newDigest || supportsDigests(config)) {\n    if (\n      config.currentDigest &&\n      config.datasource !== datasourceGitSubmodules.id\n    ) {\n      if (!config.digestOneAndOnly || !res.updates.length) {\n        // digest update\n        res.updates.push({\n          updateType: 'digest',\n          newValue: config.currentValue,\n        });\n      }\n    } else if (config.pinDigests) {\n      // Create a pin only if one doesn't already exists\n      if (!res.updates.some((update) => update.updateType === 'pin')) {\n        // pin digest\n        res.updates.push({\n          updateType: 'pin',\n          newValue: config.currentValue,\n        });\n      }\n    } else if (config.datasource === datasourceGitSubmodules.id) {\n      const dependency = clone(await getPkgReleases(config));\n      if (dependency?.releases[0]?.version) {\n        res.updates.push({\n          updateType: 'digest',\n          newValue: dependency.releases[0].version,\n        });\n      }\n    }\n    if (version.valueToVersion) {\n      for (const update of res.updates || []) {\n        update.newVersion = version.valueToVersion(update.newValue);\n        update.fromVersion = version.valueToVersion(update.fromVersion);\n        update.toVersion = version.valueToVersion(update.toVersion);\n      }\n    }\n    // update digest for all\n    for (const update of res.updates) {\n      if (config.pinDigests || config.currentDigest) {\n        update.newDigest =\n          update.newDigest || (await getDigest(config, update.newValue));\n        if (update.newDigest) {\n          update.newDigestShort = update.newDigest\n            .replace('sha256:', '')\n            .substring(0, 7);\n        } else {\n          logger.debug({ newValue: update.newValue }, 'Could not getDigest');\n        }\n      }\n    }\n  }\n  for (const update of res.updates) {\n    const { updateType, fromVersion, toVersion } = update;\n    if (['bump', 'lockfileUpdate'].includes(updateType)) {\n      update[updateType === 'bump' ? 'isBump' : 'isLockfileUpdate'] = true;\n      if (version.getMajor(toVersion) > version.getMajor(fromVersion)) {\n        update.updateType = 'major';\n      } else if (\n        config.separateMinorPatch &&\n        version.getMinor(toVersion) === version.getMinor(fromVersion)\n      ) {\n        update.updateType = 'patch';\n      } else {\n        update.updateType = 'minor';\n      }\n    }\n  }\n  if (res.updates.length) {\n    delete res.skipReason;\n  }\n  // Strip out any non-changed ones\n  res.updates = res.updates\n    .filter((update) => update.newDigest !== null)\n    .filter(\n      (update) =>\n        update.newValue !== config.currentValue ||\n        update.isLockfileUpdate ||\n        (update.newDigest && !update.newDigest.startsWith(config.currentDigest))\n    );\n  if (res.updates.some((update) => update.updateType === 'pin')) {\n    for (const update of res.updates) {\n      if (update.updateType !== 'pin' && update.updateType !== 'rollback') {\n        update.blockedByPin = true;\n      }\n    }\n  }\n  return res;\n}\n"]}