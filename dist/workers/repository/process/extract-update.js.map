{"version":3,"file":"extract-update.js","sourceRoot":"","sources":["../../../../lib/workers/repository/process/extract-update.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport hash from 'object-hash';\nimport { RenovateConfig } from '../../../config';\nimport { logger } from '../../../logger';\nimport { PackageFile } from '../../../manager/common';\nimport { getCache } from '../../../util/cache/repository';\nimport { BranchConfig } from '../../common';\nimport { extractAllDependencies } from '../extract';\nimport { branchifyUpgrades } from '../updates/branchify';\nimport { raiseDeprecationWarnings } from './deprecated';\nimport { fetchUpdates } from './fetch';\nimport { sortBranches } from './sort';\nimport { WriteUpdateResult, writeUpdates } from './write';\n\nexport type ExtractResult = {\n  branches: BranchConfig[];\n  branchList: string[];\n  packageFiles: Record<string, PackageFile[]>;\n};\n\n// istanbul ignore next\nfunction extractStats(packageFiles: Record<string, PackageFile[]>): any {\n  if (!packageFiles) {\n    return {};\n  }\n  const stats = {\n    managers: {},\n    total: {\n      fileCount: 0,\n      depCount: 0,\n    },\n  };\n  for (const [manager, managerPackageFiles] of Object.entries(packageFiles)) {\n    const fileCount = managerPackageFiles.length;\n    let depCount = 0;\n    for (const file of managerPackageFiles) {\n      depCount += file.deps.length;\n    }\n    stats.managers[manager] = {\n      fileCount,\n      depCount,\n    };\n    stats.total.fileCount += fileCount;\n    stats.total.depCount += depCount;\n  }\n  return stats;\n}\n\nexport async function extract(\n  config: RenovateConfig\n): Promise<Record<string, PackageFile[]>> {\n  logger.debug('extract()');\n  const { baseBranch, baseBranchSha } = config;\n  let packageFiles;\n  const cache = getCache();\n  const cachedExtract = cache?.scan?.[baseBranch];\n  const configHash = hash(config);\n  // istanbul ignore if\n  if (\n    cachedExtract?.sha === baseBranchSha &&\n    cachedExtract?.configHash === configHash\n  ) {\n    logger.debug({ baseBranch, baseBranchSha }, 'Found cached extract');\n    packageFiles = cachedExtract.packageFiles;\n  } else {\n    packageFiles = await extractAllDependencies(config);\n    cache.scan = cache.scan || Object.create({});\n    cache.scan[baseBranch] = {\n      sha: baseBranchSha,\n      configHash,\n      packageFiles,\n    };\n    // Clean up cached branch extracts\n    const baseBranches = is.nonEmptyArray(config.baseBranches)\n      ? config.baseBranches\n      : [baseBranch];\n    Object.keys(cache.scan).forEach((branchName) => {\n      if (!baseBranches.includes(branchName)) {\n        delete cache.scan[branchName];\n      }\n    });\n  }\n  const stats = extractStats(packageFiles);\n  logger.info(\n    { baseBranch: config.baseBranch, stats },\n    `Dependency extraction complete`\n  );\n  logger.trace({ config: packageFiles }, 'packageFiles');\n  return packageFiles;\n}\n\nexport async function lookup(\n  config: RenovateConfig,\n  packageFiles: Record<string, PackageFile[]>\n): Promise<ExtractResult> {\n  await fetchUpdates(config, packageFiles);\n  logger.debug({ config: packageFiles }, 'packageFiles with updates');\n  await raiseDeprecationWarnings(config, packageFiles);\n  const { branches, branchList } = await branchifyUpgrades(\n    config,\n    packageFiles\n  );\n  sortBranches(branches);\n  return { branches, branchList, packageFiles };\n}\n\nexport async function update(\n  config: RenovateConfig,\n  branches: BranchConfig[]\n): Promise<WriteUpdateResult | undefined> {\n  let res: WriteUpdateResult | undefined;\n  // istanbul ignore else\n  if (config.repoIsOnboarded) {\n    res = await writeUpdates(config, branches);\n  }\n\n  return res;\n}\n"]}