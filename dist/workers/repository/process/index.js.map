{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/workers/repository/process/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { RenovateConfig, mergeChildConfig } from '../../../config';\nimport { logger } from '../../../logger';\nimport { PackageFile } from '../../../manager/common';\nimport { platform } from '../../../platform';\nimport { addSplit } from '../../../util/split';\nimport { BranchConfig } from '../../common';\nimport { ExtractResult, extract, lookup, update } from './extract-update';\nimport { WriteUpdateResult } from './write';\n\nasync function setBaseBranch(\n  baseBranch: string,\n  config: RenovateConfig\n): Promise<RenovateConfig> {\n  logger.debug(`baseBranch: ${baseBranch}`);\n  const baseBranchConfig = mergeChildConfig(config, { baseBranch });\n  if (config.baseBranches.length > 1) {\n    baseBranchConfig.branchPrefix += `${baseBranch}-`;\n    baseBranchConfig.hasBaseBranches = true;\n  }\n  baseBranchConfig.baseBranchSha = await platform.setBaseBranch(baseBranch);\n  return baseBranchConfig;\n}\n\nexport async function extractDependencies(\n  config: RenovateConfig\n): Promise<ExtractResult> {\n  logger.debug('processRepo()');\n  /* eslint-disable no-param-reassign */\n  config.dependencyDashboardChecks = {};\n  // istanbul ignore next\n  if (\n    config.dependencyDashboard ||\n    config.dependencyDashboardApproval ||\n    config.prCreation === 'approval' ||\n    (config.packageRules &&\n      config.packageRules.some(\n        (rule) =>\n          rule.dependencyDashboardApproval || rule.prCreation === 'approval'\n      ))\n  ) {\n    config.dependencyDashboardTitle =\n      config.dependencyDashboardTitle || `Dependency Dashboard`;\n    const issue = await platform.findIssue(config.dependencyDashboardTitle);\n    if (issue) {\n      const checkMatch = ' - \\\\[x\\\\] <!-- ([a-zA-Z]+)-branch=([^\\\\s]+) -->';\n      const checked = issue.body.match(new RegExp(checkMatch, 'g'));\n      if (checked?.length) {\n        const re = new RegExp(checkMatch);\n        checked.forEach((check) => {\n          const [, type, branchName] = re.exec(check);\n          config.dependencyDashboardChecks[branchName] = type;\n        });\n      }\n      const checkedRebaseAll = issue.body.includes(\n        ' - [x] <!-- rebase-all-open-prs -->'\n      );\n      if (checkedRebaseAll) {\n        config.dependencyDashboardRebaseAllOpen = true;\n        /* eslint-enable no-param-reassign */\n      }\n    }\n  }\n  let res: ExtractResult = {\n    branches: [],\n    branchList: [],\n    packageFiles: null,\n  };\n  if (config.baseBranches?.length) {\n    logger.debug({ baseBranches: config.baseBranches }, 'baseBranches');\n    const extracted: Record<string, Record<string, PackageFile[]>> = {};\n    for (const baseBranch of config.baseBranches) {\n      const baseBranchConfig = await setBaseBranch(baseBranch, config);\n      extracted[baseBranch] = await extract(baseBranchConfig);\n    }\n    addSplit('extract');\n    for (const baseBranch of config.baseBranches) {\n      const baseBranchConfig = await setBaseBranch(baseBranch, config);\n      const packageFiles = extracted[baseBranch];\n      const baseBranchRes = await lookup(baseBranchConfig, packageFiles);\n      res.branches = res.branches.concat(baseBranchRes?.branches);\n      res.branchList = res.branchList.concat(baseBranchRes?.branchList);\n      res.packageFiles = res.packageFiles || baseBranchRes?.packageFiles; // Use the first branch\n    }\n  } else {\n    logger.debug('No baseBranches');\n    const packageFiles = await extract(config);\n    addSplit('extract');\n    res = await lookup(config, packageFiles);\n  }\n  addSplit('lookup');\n  return res;\n}\n\nexport function updateRepo(\n  config: RenovateConfig,\n  branches: BranchConfig[],\n  branchList: string[]\n): Promise<WriteUpdateResult | undefined> {\n  logger.debug('processRepo()');\n\n  return update(config, branches);\n}\n"]}