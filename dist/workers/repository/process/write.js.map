{"version":3,"file":"write.js","sourceRoot":"","sources":["../../../../lib/workers/repository/process/write.ts"],"names":[],"mappings":";;;AACA,4CAA8D;AAC9D,yCAA6C;AAE7C,gDAAwD;AACxD,qCAA2C;AAIpC,KAAK,UAAU,YAAY,CAChC,MAAsB,EACtB,WAA2B;IAE3B,IAAI,QAAQ,GAAG,WAAW,CAAC;IAC3B,eAAM,CAAC,KAAK,CACV,cAAc,QAAQ,CAAC,MAAM,UAC3B,QAAQ,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EACjC,KAAK,QAAQ;SACV,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC;SACxB,IAAI,EAAE;SACN,IAAI,CAAC,IAAI,CAAC,EAAE,CAChB,CAAC;IACF,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,YAAY,EAAE,EAAE;QAC1C,IAAI,YAAY,CAAC,YAAY,EAAE;YAC7B,eAAM,CAAC,KAAK,CAAC,UAAU,YAAY,CAAC,UAAU,yBAAyB,CAAC,CAAC;YACzE,OAAO,KAAK,CAAC;SACd;QACD,OAAO,IAAI,CAAC;IACd,CAAC,CAAC,CAAC;IACH,IAAI,YAAY,GAAG,MAAM,wBAAe,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;IAC3D,eAAM,CAAC,KAAK,CAAC,EAAE,YAAY,EAAE,EAAE,2CAA2C,CAAC,CAAC;IAC5E,KAAK,MAAM,MAAM,IAAI,QAAQ,EAAE;QAC7B,gBAAO,CAAC,EAAE,MAAM,EAAE,MAAM,CAAC,UAAU,EAAE,CAAC,CAAC;QACvC,MAAM,cAAc,GAAG,YAAY,IAAI,CAAC,CAAC;QACzC,MAAM,kBAAkB,GAAG,0BAAiB,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC;QAC1E,MAAM,GAAG,GAAG,MAAM,sBAAa,CAAC,MAAM,EAAE,cAAc,EAAE,kBAAkB,CAAC,CAAC;QAC5E,MAAM,CAAC,GAAG,GAAG,GAAG,CAAC;QACjB,IAAI,GAAG,KAAK,YAAY,IAAI,MAAM,CAAC,aAAa,KAAK,YAAY,EAAE;YACjE,qEAAqE;YACrE,OAAO,GAAG,CAAC;SACZ;QACD,IAAI,sBAAsB,GAAG,CAAC,CAAC;QAC/B,IAAI,GAAG,KAAK,YAAY,EAAE;YACxB,sBAAsB,GAAG,CAAC,CAAC;SAC5B;QACD,qBAAqB;QACrB,IACE,GAAG,KAAK,YAAY;YACpB,MAAM,CAAC,aAAa,KAAK,YAAY;YACrC,MAAM,CAAC,oBAAoB,KAAK,IAAI,EACpC;YACA,sBAAsB,GAAG,CAAC,CAAC;SAC5B;QACD,YAAY,IAAI,sBAAsB,CAAC;KACxC;IACD,mBAAU,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;IACvB,OAAO,MAAM,CAAC;AAChB,CAAC;AAhDD,oCAgDC","sourcesContent":["import { RenovateConfig } from '../../../config';\nimport { addMeta, logger, removeMeta } from '../../../logger';\nimport { processBranch } from '../../branch';\nimport { BranchConfig } from '../../common';\nimport { getLimitRemaining } from '../../global/limits';\nimport { getPrsRemaining } from './limits';\n\nexport type WriteUpdateResult = 'done' | 'automerged';\n\nexport async function writeUpdates(\n  config: RenovateConfig,\n  allBranches: BranchConfig[]\n): Promise<WriteUpdateResult> {\n  let branches = allBranches;\n  logger.debug(\n    `Processing ${branches.length} branch${\n      branches.length !== 1 ? 'es' : ''\n    }: ${branches\n      .map((b) => b.branchName)\n      .sort()\n      .join(', ')}`\n  );\n  branches = branches.filter((branchConfig) => {\n    if (branchConfig.blockedByPin) {\n      logger.debug(`Branch ${branchConfig.branchName} is blocked by a Pin PR`);\n      return false;\n    }\n    return true;\n  });\n  let prsRemaining = await getPrsRemaining(config, branches);\n  logger.debug({ prsRemaining }, 'Calculated maximum PRs remaining this run');\n  for (const branch of branches) {\n    addMeta({ branch: branch.branchName });\n    const prLimitReached = prsRemaining <= 0;\n    const commitLimitReached = getLimitRemaining('prCommitsPerRunLimit') <= 0;\n    const res = await processBranch(branch, prLimitReached, commitLimitReached);\n    branch.res = res;\n    if (res === 'automerged' && branch.automergeType !== 'pr-comment') {\n      // Stop procesing other branches because base branch has been changed\n      return res;\n    }\n    let deductPrRemainingCount = 0;\n    if (res === 'pr-created') {\n      deductPrRemainingCount = 1;\n    }\n    // istanbul ignore if\n    if (\n      res === 'automerged' &&\n      branch.automergeType === 'pr-comment' &&\n      branch.requiredStatusChecks === null\n    ) {\n      deductPrRemainingCount = 1;\n    }\n    prsRemaining -= deductPrRemainingCount;\n  }\n  removeMeta(['branch']);\n  return 'done';\n}\n"]}