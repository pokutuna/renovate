{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../lib/workers/repository/onboarding/branch/index.ts"],"names":[],"mappings":";;;AACA,yEAG8C;AAC9C,+CAA4C;AAC5C,mDAAgD;AAChD,2CAAuD;AACvD,mCAA0D;AAC1D,qCAAkD;AAClD,qCAAkD;AAE3C,KAAK,UAAU,qBAAqB,CACzC,MAAsB;IAEtB,eAAM,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;IAClC,eAAM,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;IACzB,MAAM,eAAe,GAAG,MAAM,mBAAW,CAAC,MAAM,CAAC,CAAC;IAClD,IAAI,eAAe,EAAE;QACnB,eAAM,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;QAClC,OAAO,EAAE,GAAG,MAAM,EAAE,eAAe,EAAE,CAAC;KACvC;IACD,IAAI,MAAM,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE;QACzC,MAAM,IAAI,KAAK,CAAC,kCAAiB,CAAC,CAAC;KACpC;IACD,eAAM,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAC;IACtC,IAAI,MAAM,0BAAkB,CAAC,MAAM,CAAC,EAAE;QACpC,eAAM,CAAC,KAAK,CAAC,8BAA8B,CAAC,CAAC;QAC7C,MAAM,MAAM,GAAG,MAAM,+BAAsB,CAAC,MAAM,CAAC,CAAC;QACpD,IAAI,MAAM,EAAE;YACV,eAAM,CAAC,IAAI,CACT,EAAE,MAAM,EAAE,MAAM,CAAC,gBAAgB,EAAE,MAAM,EAAE,UAAU,EAAE,IAAI,EAAE,EAC7D,gBAAgB,CACjB,CAAC;SACH;QACD,qBAAqB;QACrB,IAAI,mBAAQ,CAAC,SAAS,EAAE;YACtB,MAAM,YAAY,GAAG,MAAM,mBAAQ,CAAC,WAAW,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;YACzE,MAAM,mBAAQ,CAAC,SAAS,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;SAC/C;KACF;SAAM;QACL,eAAM,CAAC,KAAK,CAAC,8BAA8B,CAAC,CAAC;QAC7C,IAAI,MAAM,CAAC,OAAO,CAAC,MAAM,gCAAsB,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;YACrE,MAAM,IAAI,KAAK,CAAC,yCAAwB,CAAC,CAAC;SAC3C;QACD,eAAM,CAAC,KAAK,CAAC,8BAA8B,CAAC,CAAC;QAC7C,MAAM,MAAM,GAAG,MAAM,+BAAsB,CAAC,MAAM,CAAC,CAAC;QACpD,qBAAqB;QACrB,IAAI,MAAM,EAAE;YACV,eAAM,CAAC,IAAI,CACT,EAAE,MAAM,EAAE,MAAM,CAAC,gBAAgB,EAAE,MAAM,EAAE,UAAU,EAAE,IAAI,EAAE,EAC7D,gBAAgB,CACjB,CAAC;SACH;KACF;IACD,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;QAClB,MAAM,mBAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;KACvD;IACD,MAAM,UAAU,GAAG,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;IAC7C,OAAO,EAAE,GAAG,MAAM,EAAE,eAAe,EAAE,UAAU,EAAE,CAAC;AACpD,CAAC;AAhDD,sDAgDC","sourcesContent":["import { RenovateConfig } from '../../../../config';\nimport {\n  MANAGER_NO_PACKAGE_FILES,\n  REPOSITORY_FORKED,\n} from '../../../../constants/error-messages';\nimport { logger } from '../../../../logger';\nimport { platform } from '../../../../platform';\nimport { extractAllDependencies } from '../../extract';\nimport { isOnboarded, onboardingPrExists } from './check';\nimport { createOnboardingBranch } from './create';\nimport { rebaseOnboardingBranch } from './rebase';\n\nexport async function checkOnboardingBranch(\n  config: RenovateConfig\n): Promise<RenovateConfig> {\n  logger.debug('checkOnboarding()');\n  logger.trace({ config });\n  const repoIsOnboarded = await isOnboarded(config);\n  if (repoIsOnboarded) {\n    logger.debug('Repo is onboarded');\n    return { ...config, repoIsOnboarded };\n  }\n  if (config.isFork && !config.includeForks) {\n    throw new Error(REPOSITORY_FORKED);\n  }\n  logger.debug('Repo is not onboarded');\n  if (await onboardingPrExists(config)) {\n    logger.debug('Onboarding PR already exists');\n    const commit = await rebaseOnboardingBranch(config);\n    if (commit) {\n      logger.info(\n        { branch: config.onboardingBranch, commit, onboarding: true },\n        'Branch updated'\n      );\n    }\n    // istanbul ignore if\n    if (platform.refreshPr) {\n      const onboardingPr = await platform.getBranchPr(config.onboardingBranch);\n      await platform.refreshPr(onboardingPr.number);\n    }\n  } else {\n    logger.debug('Onboarding PR does not exist');\n    if (Object.entries(await extractAllDependencies(config)).length === 0) {\n      throw new Error(MANAGER_NO_PACKAGE_FILES);\n    }\n    logger.debug('Need to create onboarding PR');\n    const commit = await createOnboardingBranch(config);\n    // istanbul ignore if\n    if (commit) {\n      logger.info(\n        { branch: config.onboardingBranch, commit, onboarding: true },\n        'Branch created'\n      );\n    }\n  }\n  if (!config.dryRun) {\n    await platform.setBaseBranch(config.onboardingBranch);\n  }\n  const branchList = [config.onboardingBranch];\n  return { ...config, repoIsOnboarded, branchList };\n}\n"]}