{"version":3,"file":"check.js","sourceRoot":"","sources":["../../../../../lib/workers/repository/onboarding/branch/check.ts"],"names":[],"mappings":"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","sourcesContent":["import { RenovateConfig } from '../../../../config';\nimport { configFileNames } from '../../../../config/app-strings';\nimport { REPOSITORY_DISABLED } from '../../../../constants/error-messages';\nimport { PR_STATE_NOT_OPEN } from '../../../../constants/pull-requests';\nimport { logger } from '../../../../logger';\nimport { platform } from '../../../../platform';\nimport { readLocalFile } from '../../../../util/fs';\nimport { getFileList } from '../../../../util/git';\n\nconst findFile = async (fileName: string): Promise<boolean> => {\n  logger.debug(`findFile(${fileName})`);\n  const fileList = await getFileList();\n  return fileList.includes(fileName);\n};\n\nconst configFileExists = async (): Promise<boolean> => {\n  for (const fileName of configFileNames) {\n    if (fileName !== 'package.json' && (await findFile(fileName))) {\n      return true;\n    }\n  }\n  return false;\n};\n\nconst packageJsonConfigExists = async (): Promise<boolean> => {\n  try {\n    const pJson = JSON.parse(await readLocalFile('package.json', 'utf8'));\n    if (pJson.renovate) {\n      return true;\n    }\n  } catch (err) {\n    // Do nothing\n  }\n  return false;\n};\n\n// TODO: types\nexport type Pr = any;\n\nconst closedPrExists = (config: RenovateConfig): Promise<Pr> =>\n  platform.findPr({\n    branchName: config.onboardingBranch,\n    prTitle: config.onboardingPrTitle,\n    state: PR_STATE_NOT_OPEN,\n  });\n\nexport const isOnboarded = async (config: RenovateConfig): Promise<boolean> => {\n  logger.debug('isOnboarded()');\n  const title = `Action required: Add a Renovate config`;\n  // Repo is onboarded if admin is bypassing onboarding and does not require a\n  // configuration file.\n  if (config.requireConfig === false && config.onboarding === false) {\n    // Return early and avoid checking for config files\n    return true;\n  }\n  if (await configFileExists()) {\n    logger.debug('config file exists');\n    await platform.ensureIssueClosing(title);\n    return true;\n  }\n  logger.debug('config file not found');\n  if (await packageJsonConfigExists()) {\n    logger.debug('package.json contains config');\n    await platform.ensureIssueClosing(title);\n    return true;\n  }\n\n  // If onboarding has been disabled and config files are required then the\n  // repository has not been onboarded yet\n  if (config.requireConfig && config.onboarding === false) {\n    throw new Error(REPOSITORY_DISABLED);\n  }\n\n  const pr = await closedPrExists(config);\n  if (!pr) {\n    logger.debug('Found no closed onboarding PR');\n    return false;\n  }\n  logger.debug('Found closed onboarding PR');\n  if (!config.requireConfig) {\n    logger.debug('Config not mandatory so repo is considered onboarded');\n    return true;\n  }\n  logger.debug('Repo is not onboarded and no merged PRs exist');\n  if (!config.suppressNotifications.includes('onboardingClose')) {\n    // ensure PR comment\n    await platform.ensureComment({\n      number: pr.number,\n      topic: `Renovate is disabled`,\n      content: `Renovate is disabled due to lack of config. If you wish to reenable it, you can either (a) commit a config file to your base branch, or (b) rename this closed PR to trigger a replacement onboarding PR.`,\n    });\n  }\n  throw new Error(REPOSITORY_DISABLED);\n};\n\nexport const onboardingPrExists = async (\n  config: RenovateConfig\n): Promise<boolean> =>\n  (await platform.getBranchPr(config.onboardingBranch)) != null;\n"]}