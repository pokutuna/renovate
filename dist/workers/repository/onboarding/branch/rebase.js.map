{"version":3,"file":"rebase.js","sourceRoot":"","sources":["../../../../../lib/workers/repository/onboarding/branch/rebase.ts"],"names":[],"mappings":";;;AACA,gEAAiE;AACjE,+CAA4C;AAC5C,8CAK8B;AAC9B,qCAA+C;AAE/C,MAAM,iBAAiB,GAAG,6BAAe,CAAC,CAAC,CAAC,CAAC;AAE7C,SAAS,gBAAgB,CAAC,MAAsB;IAC9C,IAAI,aAAqB,CAAC;IAC1B,qBAAqB;IACrB,IAAI,MAAM,CAAC,eAAe,EAAE;QAC1B,aAAa,GAAG,MAAM,CAAC,kBAAkB,CAAC;QAC1C,IAAI,MAAM,CAAC,mBAAmB,EAAE;YAC9B,aAAa,IAAI,IAAI,MAAM,CAAC,mBAAmB,GAAG,CAAC;SACpD;QACD,aAAa,IAAI,IAAI,CAAC;QACtB,aAAa,IAAI,MAAM,GAAG,iBAAiB,CAAC;KAC7C;SAAM;QACL,aAAa,GAAG,MAAM,GAAG,iBAAiB,CAAC;KAC5C;IACD,OAAO,aAAa,CAAC;AACvB,CAAC;AAEM,KAAK,UAAU,sBAAsB,CAC1C,MAAsB;IAEtB,eAAM,CAAC,KAAK,CAAC,8CAA8C,CAAC,CAAC;IAC7D,IAAI,MAAM,sBAAgB,CAAC,MAAM,CAAC,gBAAgB,CAAC,EAAE;QACnD,eAAM,CAAC,KAAK,CAAC,yDAAyD,CAAC,CAAC;QACxE,OAAO,IAAI,CAAC;KACb;IACD,MAAM,gBAAgB,GAAG,MAAM,aAAO,CACpC,iBAAiB,EACjB,MAAM,CAAC,gBAAgB,CACxB,CAAC;IACF,MAAM,QAAQ,GAAG,4BAAmB,CAAC,MAAM,CAAC,CAAC;IAC7C,IACE,QAAQ,KAAK,gBAAgB;QAC7B,CAAC,CAAC,MAAM,mBAAa,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,EAC/C;QACA,eAAM,CAAC,KAAK,CAAC,iCAAiC,CAAC,CAAC;QAChD,OAAO,IAAI,CAAC;KACb;IACD,eAAM,CAAC,KAAK,CAAC,4BAA4B,CAAC,CAAC;IAC3C,uBAAuB;IACvB,MAAM,aAAa,GAAG,gBAAgB,CAAC,MAAM,CAAC,CAAC;IAE/C,qBAAqB;IACrB,IAAI,MAAM,CAAC,MAAM,EAAE;QACjB,eAAM,CAAC,IAAI,CAAC,kDAAkD,CAAC,CAAC;QAChE,OAAO,IAAI,CAAC;KACb;IACD,OAAO,iBAAW,CAAC;QACjB,UAAU,EAAE,MAAM,CAAC,gBAAgB;QACnC,KAAK,EAAE;YACL;gBACE,IAAI,EAAE,iBAAiB;gBACvB,QAAQ;aACT;SACF;QACD,OAAO,EAAE,aAAa;KACvB,CAAC,CAAC;AACL,CAAC;AAvCD,wDAuCC","sourcesContent":["import { RenovateConfig } from '../../../../config';\nimport { configFileNames } from '../../../../config/app-strings';\nimport { logger } from '../../../../logger';\nimport {\n  commitFiles,\n  getFile,\n  isBranchModified,\n  isBranchStale,\n} from '../../../../util/git';\nimport { getOnboardingConfig } from './config';\n\nconst defaultConfigFile = configFileNames[0];\n\nfunction getCommitMessage(config: RenovateConfig): string {\n  let commitMessage: string;\n  // istanbul ignore if\n  if (config.semanticCommits) {\n    commitMessage = config.semanticCommitType;\n    if (config.semanticCommitScope) {\n      commitMessage += `(${config.semanticCommitScope})`;\n    }\n    commitMessage += ': ';\n    commitMessage += 'add ' + defaultConfigFile;\n  } else {\n    commitMessage = 'Add ' + defaultConfigFile;\n  }\n  return commitMessage;\n}\n\nexport async function rebaseOnboardingBranch(\n  config: RenovateConfig\n): Promise<string | null> {\n  logger.debug('Checking if onboarding branch needs rebasing');\n  if (await isBranchModified(config.onboardingBranch)) {\n    logger.debug('Onboarding branch has been edited and cannot be rebased');\n    return null;\n  }\n  const existingContents = await getFile(\n    defaultConfigFile,\n    config.onboardingBranch\n  );\n  const contents = getOnboardingConfig(config);\n  if (\n    contents === existingContents &&\n    !(await isBranchStale(config.onboardingBranch))\n  ) {\n    logger.debug('Onboarding branch is up to date');\n    return null;\n  }\n  logger.debug('Rebasing onboarding branch');\n  // istanbul ignore next\n  const commitMessage = getCommitMessage(config);\n\n  // istanbul ignore if\n  if (config.dryRun) {\n    logger.info('DRY-RUN: Would rebase files in onboarding branch');\n    return null;\n  }\n  return commitFiles({\n    branchName: config.onboardingBranch,\n    files: [\n      {\n        name: defaultConfigFile,\n        contents,\n      },\n    ],\n    message: commitMessage,\n  });\n}\n"]}