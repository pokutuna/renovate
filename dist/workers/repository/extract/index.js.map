{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/workers/repository/extract/index.ts"],"names":[],"mappings":";;;;;;AAAA,0DAAkC;AAClC,4CAIyB;AACzB,4CAAyC;AACzC,8CAAkD;AAElD,6CAAgD;AAChD,mDAAyD;AAElD,KAAK,UAAU,sBAAsB,CAC1C,MAAsB;IAEtB,IAAI,WAAW,GAAG,wBAAc,EAAE,CAAC;IACnC,IAAI,YAAE,CAAC,aAAa,CAAC,MAAM,CAAC,eAAe,CAAC,EAAE;QAC5C,eAAM,CAAC,KAAK,CAAC,oCAAoC,CAAC,CAAC;QACnD,WAAW,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,EAAE,CAC3C,MAAM,CAAC,eAAe,CAAC,QAAQ,CAAC,OAAO,CAAC,CACzC,CAAC;KACH;IACD,MAAM,WAAW,GAAqB,EAAE,CAAC;IACzC,KAAK,MAAM,OAAO,IAAI,WAAW,EAAE;QACjC,MAAM,aAAa,GAAG,yBAAgB,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QACxD,aAAa,CAAC,OAAO,GAAG,OAAO,CAAC;QAChC,IAAI,OAAO,KAAK,OAAO,EAAE;YACvB,KAAK,MAAM,YAAY,IAAI,MAAM,CAAC,aAAa,EAAE;gBAC/C,MAAM,kBAAkB,GAAG,yBAAgB,CACzC,aAAa,EACb,YAAY,CACb,CAAC;gBACF,kBAAkB,CAAC,QAAQ,GAAG,MAAM,6BAAgB,CAClD,kBAAkB,CACnB,CAAC;gBACF,IAAI,kBAAkB,CAAC,QAAQ,CAAC,MAAM,EAAE;oBACtC,WAAW,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;iBACtC;aACF;SACF;aAAM;YACL,aAAa,CAAC,QAAQ,GAAG,MAAM,6BAAgB,CAAC,aAAa,CAAC,CAAC;YAC/D,IAAI,aAAa,CAAC,QAAQ,CAAC,MAAM,EAAE;gBACjC,WAAW,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;aACjC;SACF;KACF;IACD,MAAM,cAAc,GAAG,MAAM,OAAO,CAAC,GAAG,CACtC,WAAW,CAAC,GAAG,CAAC,KAAK,EAAE,aAAa,EAAE,EAAE;QACtC,MAAM,YAAY,GAAG,MAAM,sCAAsB,CAAC,aAAa,CAAC,CAAC;QACjE,OAAO,EAAE,OAAO,EAAE,aAAa,CAAC,OAAO,EAAE,YAAY,EAAE,CAAC;IAC1D,CAAC,CAAC,CACH,CAAC;IACF,MAAM,WAAW,GAAkC,EAAE,CAAC;IACtD,IAAI,SAAS,GAAG,CAAC,CAAC;IAClB,KAAK,MAAM,EAAE,OAAO,EAAE,YAAY,EAAE,IAAI,cAAc,EAAE;QACtD,IAAI,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,MAAM,EAAE;YACxB,SAAS,IAAI,YAAY,CAAC,MAAM,CAAC;YACjC,eAAM,CAAC,KAAK,CAAC,SAAS,OAAO,gBAAgB,CAAC,CAAC;YAC/C,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;SAC1E;KACF;IACD,eAAM,CAAC,KAAK,CAAC,SAAS,SAAS,kBAAkB,CAAC,CAAC;IACnD,OAAO,WAAW,CAAC;AACrB,CAAC;AAnDD,wDAmDC","sourcesContent":["import is from '@sindresorhus/is';\nimport {\n  RenovateConfig,\n  getManagerConfig,\n  mergeChildConfig,\n} from '../../../config';\nimport { logger } from '../../../logger';\nimport { getManagerList } from '../../../manager';\nimport { PackageFile } from '../../../manager/common';\nimport { getMatchingFiles } from './file-match';\nimport { getManagerPackageFiles } from './manager-files';\n\nexport async function extractAllDependencies(\n  config: RenovateConfig\n): Promise<Record<string, PackageFile[]>> {\n  let managerList = getManagerList();\n  if (is.nonEmptyArray(config.enabledManagers)) {\n    logger.debug('Applying enabledManagers filtering');\n    managerList = managerList.filter((manager) =>\n      config.enabledManagers.includes(manager)\n    );\n  }\n  const extractList: RenovateConfig[] = [];\n  for (const manager of managerList) {\n    const managerConfig = getManagerConfig(config, manager);\n    managerConfig.manager = manager;\n    if (manager === 'regex') {\n      for (const regexManager of config.regexManagers) {\n        const regexManagerConfig = mergeChildConfig(\n          managerConfig,\n          regexManager\n        );\n        regexManagerConfig.fileList = await getMatchingFiles(\n          regexManagerConfig\n        );\n        if (regexManagerConfig.fileList.length) {\n          extractList.push(regexManagerConfig);\n        }\n      }\n    } else {\n      managerConfig.fileList = await getMatchingFiles(managerConfig);\n      if (managerConfig.fileList.length) {\n        extractList.push(managerConfig);\n      }\n    }\n  }\n  const extractResults = await Promise.all(\n    extractList.map(async (managerConfig) => {\n      const packageFiles = await getManagerPackageFiles(managerConfig);\n      return { manager: managerConfig.manager, packageFiles };\n    })\n  );\n  const extractions: Record<string, PackageFile[]> = {};\n  let fileCount = 0;\n  for (const { manager, packageFiles } of extractResults) {\n    if (packageFiles?.length) {\n      fileCount += packageFiles.length;\n      logger.debug(`Found ${manager} package files`);\n      extractions[manager] = (extractions[manager] || []).concat(packageFiles);\n    }\n  }\n  logger.debug(`Found ${fileCount} package file(s)`);\n  return extractions;\n}\n"]}