{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/workers/repository/index.ts"],"names":[],"mappings":";;;;;;AAAA,wDAA0B;AAE1B,yCAA+C;AAC/C,sCAAgD;AAChD,4CAAkE;AAClE,iEAA2D;AAC3D,oDAAkC;AAClC,yCAA0C;AAC1C,iCAAkC;AAClC,wCAAqD;AACrD,uCAA4D;AAC5D,qCAAwD;AACxD,mCAA4C;AAE5C,IAAI,eAAe,GAAG,SAAS,CAAC;AAChC,IAAI;IACF,8DAA8D;IAC9D,eAAe,GAAG,OAAO,CAAC,uBAAuB,CAAC,CAAC,OAAO,CAAC,CAAC,qCAAqC;CAClG;AAAC,OAAO,GAAG,EAAE,0BAA0B,CAAC;IACvC,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,EAAE,gCAAgC,CAAC,CAAC;CACzD;AAED,uBAAuB;AAChB,KAAK,UAAU,kBAAkB,CACtC,UAA0B;IAE1B,iBAAS,EAAE,CAAC;IACZ,IAAI,MAAM,GAAG,EAAE,GAAG,UAAU,EAAE,CAAC;IAC/B,gBAAO,CAAC,EAAE,UAAU,EAAE,MAAM,CAAC,UAAU,EAAE,CAAC,CAAC;IAC3C,eAAM,CAAC,IAAI,CAAC,EAAE,eAAe,EAAE,EAAE,oBAAoB,CAAC,CAAC;IACvD,eAAM,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;IACzB,IAAI,UAAyB,CAAC;IAC9B,IAAI;QACF,MAAM,kBAAE,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QACpC,eAAM,CAAC,KAAK,CAAC,kBAAkB,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;QACnD,MAAM,GAAG,MAAM,eAAQ,CAAC,MAAM,CAAC,CAAC;QAChC,gBAAQ,CAAC,MAAM,CAAC,CAAC;QACjB,MAAM,EAAE,QAAQ,EAAE,UAAU,EAAE,YAAY,EAAE,GAAG,MAAM,6BAAmB,CACtE,MAAM,CACP,CAAC;QACF,MAAM,uBAAkB,CAAC,MAAM,EAAE,YAAY,EAAE,QAAQ,CAAC,CAAC;QACzD,MAAM,GAAG,GAAG,MAAM,oBAAU,CAAC,MAAM,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;QAC3D,gBAAQ,CAAC,QAAQ,CAAC,CAAC;QACnB,IAAI,GAAG,KAAK,YAAY,EAAE;YACxB,MAAM,wCAAiB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;SAC3C;QACD,MAAM,uBAAY,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;QACvC,UAAU,GAAG,sBAAa,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;KACzC;IAAC,OAAO,GAAG,EAAE,0BAA0B,CAAC;QACvC,gBAAO,CAAC,EAAE,UAAU,EAAE,MAAM,CAAC,UAAU,EAAE,CAAC,CAAC;QAC3C,MAAM,QAAQ,GAAG,MAAM,eAAW,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;QAChD,UAAU,GAAG,sBAAa,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;KAC9C;IACD,IAAI,MAAM,CAAC,QAAQ,IAAI,CAAC,MAAM,CAAC,eAAe,EAAE;QAC9C,MAAM,oBAAe,CAAC,GAAG,CAAC,CAAC;KAC5B;IACD,MAAM,MAAM,GAAG,iBAAS,EAAE,CAAC;IAC3B,eAAM,CAAC,KAAK,CAAC,MAAM,EAAE,yCAAyC,CAAC,CAAC;IAChE,yBAAiB,EAAE,CAAC;IACpB,eAAM,CAAC,IAAI,CAAC,EAAE,UAAU,EAAE,MAAM,CAAC,KAAK,EAAE,EAAE,qBAAqB,CAAC,CAAC;IACjE,OAAO,UAAU,CAAC;AACpB,CAAC;AAtCD,gDAsCC","sourcesContent":["import fs from 'fs-extra';\nimport { RenovateConfig } from '../../config';\nimport { logger, setMeta } from '../../logger';\nimport { deleteLocalFile } from '../../util/fs';\nimport { addSplit, getSplits, splitInit } from '../../util/split';\nimport { ensureMasterIssue } from './dependency-dashboard';\nimport handleError from './error';\nimport { finaliseRepo } from './finalise';\nimport { initRepo } from './init';\nimport { ensureOnboardingPr } from './onboarding/pr';\nimport { extractDependencies, updateRepo } from './process';\nimport { ProcessResult, processResult } from './result';\nimport { printRequestStats } from './stats';\n\nlet renovateVersion = 'unknown';\ntry {\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  renovateVersion = require('../../../package.json').version; // eslint-disable-line global-require\n} catch (err) /* istanbul ignore next */ {\n  logger.debug({ err }, 'Error getting renovate version');\n}\n\n// istanbul ignore next\nexport async function renovateRepository(\n  repoConfig: RenovateConfig\n): Promise<ProcessResult> {\n  splitInit();\n  let config = { ...repoConfig };\n  setMeta({ repository: config.repository });\n  logger.info({ renovateVersion }, 'Repository started');\n  logger.trace({ config });\n  let repoResult: ProcessResult;\n  try {\n    await fs.ensureDir(config.localDir);\n    logger.debug('Using localDir: ' + config.localDir);\n    config = await initRepo(config);\n    addSplit('init');\n    const { branches, branchList, packageFiles } = await extractDependencies(\n      config\n    );\n    await ensureOnboardingPr(config, packageFiles, branches);\n    const res = await updateRepo(config, branches, branchList);\n    addSplit('update');\n    if (res !== 'automerged') {\n      await ensureMasterIssue(config, branches);\n    }\n    await finaliseRepo(config, branchList);\n    repoResult = processResult(config, res);\n  } catch (err) /* istanbul ignore next */ {\n    setMeta({ repository: config.repository });\n    const errorRes = await handleError(config, err);\n    repoResult = processResult(config, errorRes);\n  }\n  if (config.localDir && !config.persistRepoData) {\n    await deleteLocalFile('.');\n  }\n  const splits = getSplits();\n  logger.debug(splits, 'Repository timing splits (milliseconds)');\n  printRequestStats();\n  logger.info({ durationMs: splits.total }, 'Repository finished');\n  return repoResult;\n}\n"]}