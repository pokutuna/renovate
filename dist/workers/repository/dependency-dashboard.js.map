{"version":3,"file":"dependency-dashboard.js","sourceRoot":"","sources":["../../../lib/workers/repository/dependency-dashboard.ts"],"names":[],"mappings":"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","sourcesContent":["import { RenovateConfig } from '../../config';\nimport { PR_STATE_NOT_OPEN } from '../../constants/pull-requests';\nimport { logger } from '../../logger';\nimport { Pr, platform } from '../../platform';\nimport { BranchConfig } from '../common';\n\nfunction getListItem(branch: BranchConfig, type: string, pr?: Pr): string {\n  let item = ' - [ ] ';\n  item += `<!-- ${type}-branch=${branch.branchName} -->`;\n  if (pr) {\n    item += `[${branch.prTitle}](../pull/${pr.number})`;\n  } else {\n    item += branch.prTitle;\n  }\n  const uniquePackages = [\n    ...new Set(branch.upgrades.map((upgrade) => '`' + upgrade.depName + '`')),\n  ];\n  if (uniquePackages.length < 2) {\n    return item + '\\n';\n  }\n  return item + ' (' + uniquePackages.join(', ') + ')\\n';\n}\n\nexport async function ensureMasterIssue(\n  config: RenovateConfig,\n  branches: BranchConfig[]\n): Promise<void> {\n  // legacy/migrated issue\n  const reuseTitle = 'Update Dependencies (Renovate Bot)';\n  if (\n    !(\n      config.dependencyDashboard ||\n      branches.some(\n        (branch) =>\n          branch.dependencyDashboardApproval ||\n          branch.dependencyDashboardPrApproval\n      )\n    )\n  ) {\n    return;\n  }\n  logger.debug('Ensuring Dependency Dashboard');\n  if (\n    !branches.length ||\n    branches.every((branch) => branch.res === 'automerged')\n  ) {\n    if (config.dependencyDashboardAutoclose) {\n      logger.debug('Closing Dependency Dashboard');\n      if (config.dryRun) {\n        logger.info(\n          'DRY-RUN: Would close Dependency Dashboard ' +\n            config.dependencyDashboardTitle\n        );\n      } else {\n        await platform.ensureIssueClosing(config.dependencyDashboardTitle);\n      }\n      return;\n    }\n    if (config.dryRun) {\n      logger.info(\n        'DRY-RUN: Would ensure Dependency Dashboard ' +\n          config.dependencyDashboardTitle\n      );\n    } else {\n      await platform.ensureIssue({\n        title: config.dependencyDashboardTitle,\n        reuseTitle,\n        body:\n          'This repository is up-to-date and has no outstanding updates open or pending.',\n      });\n    }\n    return;\n  }\n  let issueBody = '';\n  if (config.dependencyDashboardHeader?.length) {\n    issueBody += `${config.dependencyDashboardHeader}\\n\\n`;\n  }\n  const pendingApprovals = branches.filter(\n    (branch) => branch.res === 'needs-approval'\n  );\n  if (pendingApprovals.length) {\n    issueBody += '## Pending Approval\\n\\n';\n    issueBody += `These branches will be created by Renovate only once you click their checkbox below.\\n\\n`;\n    for (const branch of pendingApprovals) {\n      issueBody += getListItem(branch, 'approve');\n    }\n    issueBody += '\\n';\n  }\n  const awaitingSchedule = branches.filter(\n    (branch) => branch.res === 'not-scheduled'\n  );\n  if (awaitingSchedule.length) {\n    issueBody += '## Awaiting Schedule\\n\\n';\n    issueBody +=\n      'These updates are awaiting their schedule. Click on a checkbox to ignore the schedule.\\n';\n    for (const branch of awaitingSchedule) {\n      issueBody += getListItem(branch, 'unschedule');\n    }\n    issueBody += '\\n';\n  }\n  const rateLimited = branches.filter(\n    (branch) =>\n      branch.res === 'pr-limit-reached' || branch.res === 'commit-limit-reached'\n  );\n  if (rateLimited.length) {\n    issueBody += '## Rate Limited\\n\\n';\n    issueBody +=\n      'These updates are currently rate limited. Click on a checkbox below to force their creation now.\\n\\n';\n    for (const branch of rateLimited) {\n      issueBody += getListItem(branch, 'unlimit');\n    }\n    issueBody += '\\n';\n  }\n  const errorList = branches.filter(\n    (branch) => branch.res && branch.res.endsWith('error')\n  );\n  if (errorList.length) {\n    issueBody += '## Errored\\n\\n';\n    issueBody +=\n      'These updates encountered an error and will be retried. Click a checkbox below to force a retry now.\\n\\n';\n    for (const branch of errorList) {\n      issueBody += getListItem(branch, 'retry');\n    }\n    issueBody += '\\n';\n  }\n  const awaitingPr = branches.filter(\n    (branch) => branch.res === 'needs-pr-approval'\n  );\n  if (awaitingPr.length) {\n    issueBody += '## PR Creation Approval Required\\n\\n';\n    issueBody +=\n      \"These branches exist but PRs won't be created until you approve by ticking the checkbox.\\n\\n\";\n    for (const branch of awaitingPr) {\n      issueBody += getListItem(branch, 'approvePr');\n    }\n    issueBody += '\\n';\n  }\n  const prEdited = branches.filter((branch) => branch.res === 'pr-edited');\n  if (prEdited.length) {\n    issueBody += '## Edited/Blocked\\n\\n';\n    issueBody += `These updates have been manually edited so Renovate will no longer make changes. To discard all commits and start over, check the box below.\\n\\n`;\n    for (const branch of prEdited) {\n      const pr = await platform.getBranchPr(branch.branchName);\n      issueBody += getListItem(branch, 'rebase', pr);\n    }\n    issueBody += '\\n';\n  }\n  const prPending = branches.filter((branch) => branch.res === 'pending');\n  if (prPending.length) {\n    issueBody += '## Pending Status Checks\\n\\n';\n    issueBody += `These updates await pending status checks. To force their creation now, check the box below.\\n\\n`;\n    for (const branch of prPending) {\n      issueBody += getListItem(branch, 'approvePr');\n    }\n    issueBody += '\\n';\n  }\n  const otherRes = [\n    'pending',\n    'needs-approval',\n    'needs-pr-approval',\n    'not-scheduled',\n    'pr-limit-reached',\n    'commit-limit-reached',\n    'already-existed',\n    'error',\n    'automerged',\n    'pr-edited',\n  ];\n  const inProgress = branches.filter(\n    (branch) => !otherRes.includes(branch.res)\n  );\n  if (inProgress.length) {\n    issueBody += '## Open\\n\\n';\n    issueBody +=\n      'These updates have all been created already. Click a checkbox below to force a retry/rebase of any.\\n\\n';\n    for (const branch of inProgress) {\n      const pr = await platform.getBranchPr(branch.branchName);\n      issueBody += getListItem(branch, 'rebase', pr);\n    }\n    if (inProgress.length > 2) {\n      issueBody += ' - [ ] ';\n      issueBody += '<!-- rebase-all-open-prs -->';\n      issueBody +=\n        '**Check this option to rebase all the above open PRs at once**';\n      issueBody += '\\n';\n    }\n    issueBody += '\\n';\n  }\n  const alreadyExisted = branches.filter(\n    (branch) => branch.res && branch.res.endsWith('already-existed')\n  );\n  if (alreadyExisted.length) {\n    issueBody += '## Closed/Ignored\\n\\n';\n    issueBody +=\n      'These updates were closed unmerged and will not be recreated unless you click a checkbox below.\\n\\n';\n    for (const branch of alreadyExisted) {\n      const pr = await platform.findPr({\n        branchName: branch.branchName,\n        prTitle: branch.prTitle,\n        state: PR_STATE_NOT_OPEN,\n      });\n      issueBody += getListItem(branch, 'recreate', pr);\n    }\n    issueBody += '\\n';\n  }\n\n  // istanbul ignore if\n  if (config.dependencyDashboardFooter?.length) {\n    issueBody += `---\\n${config.dependencyDashboardFooter}\\n`;\n  }\n\n  if (config.dryRun) {\n    logger.info(\n      'DRY-RUN: Would ensure Dependency Dashboard ' +\n        config.dependencyDashboardTitle\n    );\n  } else {\n    await platform.ensureIssue({\n      title: config.dependencyDashboardTitle,\n      reuseTitle,\n      body: issueBody,\n    });\n  }\n}\n"]}