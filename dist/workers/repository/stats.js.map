{"version":3,"file":"stats.js","sourceRoot":"","sources":["../../../lib/workers/repository/stats.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,8CAAsB;AACtB,yCAAsC;AACtC,kEAAoD;AAEpD,SAAgB,iBAAiB;IAC/B,MAAM,YAAY,GAAG,QAAQ,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;IACnD,IAAI,CAAC,YAAY,EAAE;QACjB,OAAO;KACR;IACD,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;QACzB,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,EAAE;YACnB,OAAO,CAAC,CAAC;SACV;QACD,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE;YACjB,OAAO,CAAC,CAAC,CAAC;SACX;QACD,OAAO,CAAC,CAAC;IACX,CAAC,CAAC,CAAC;IACH,MAAM,WAAW,GAAa,EAAE,CAAC;IACjC,MAAM,YAAY,GAA6B,EAAE,CAAC;IAClD,KAAK,MAAM,OAAO,IAAI,YAAY,EAAE;QAClC,WAAW,CAAC,IAAI,CACd,GAAG,OAAO,CAAC,MAAM,CAAC,WAAW,EAAE,IAAI,OAAO,CAAC,GAAG,IAAI,OAAO,CAAC,QAAQ,EAAE,CACrE,CAAC;QACF,MAAM,EAAE,QAAQ,EAAE,GAAG,aAAG,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAC5C,YAAY,CAAC,QAAQ,CAAC,GAAG,YAAY,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;QACtD,YAAY,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;KAC/C;IACD,eAAM,CAAC,KAAK,CAAC,EAAE,WAAW,EAAE,YAAY,EAAE,EAAE,YAAY,CAAC,CAAC;IAC1D,MAAM,SAAS,GAAa,EAAE,CAAC;IAC/B,IAAI,aAAa,GAAG,CAAC,CAAC;IACtB,KAAK,MAAM,CAAC,QAAQ,EAAE,QAAQ,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE;QAC/D,MAAM,YAAY,GAAG,QAAQ,CAAC,MAAM,CAAC;QACrC,aAAa,IAAI,YAAY,CAAC;QAC9B,MAAM,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;QACvD,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,YAAY,CAAC,CAAC;QAClD,MAAM,YAAY,GAChB,GAAG,YAAY,GAAG,GAAG,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;QACnE,SAAS,CAAC,IAAI,CAAC,GAAG,QAAQ,KAAK,YAAY,KAAK,GAAG,YAAY,CAAC,CAAC;KAClE;IACD,eAAM,CAAC,KAAK,CAAC,EAAE,SAAS,EAAE,aAAa,EAAE,EAAE,iBAAiB,CAAC,CAAC;AAChE,CAAC;AArCD,8CAqCC","sourcesContent":["import URL from 'url';\nimport { logger } from '../../logger';\nimport * as memCache from '../../util/cache/memory';\n\nexport function printRequestStats(): void {\n  const httpRequests = memCache.get('http-requests');\n  if (!httpRequests) {\n    return;\n  }\n  httpRequests.sort((a, b) => {\n    if (a.url === b.url) {\n      return 0;\n    }\n    if (a.url < b.url) {\n      return -1;\n    }\n    return 1;\n  });\n  const allRequests: string[] = [];\n  const requestHosts: Record<string, number[]> = {};\n  for (const request of httpRequests) {\n    allRequests.push(\n      `${request.method.toUpperCase()} ${request.url} ${request.duration}`\n    );\n    const { hostname } = URL.parse(request.url);\n    requestHosts[hostname] = requestHosts[hostname] || [];\n    requestHosts[hostname].push(request.duration);\n  }\n  logger.trace({ allRequests, requestHosts }, 'full stats');\n  const hostStats: string[] = [];\n  let totalRequests = 0;\n  for (const [hostname, requests] of Object.entries(requestHosts)) {\n    const hostRequests = requests.length;\n    totalRequests += hostRequests;\n    const requestSum = requests.reduce((a, b) => a + b, 0);\n    const avg = Math.round(requestSum / hostRequests);\n    const requestCount =\n      `${hostRequests} ` + (hostRequests > 1 ? 'requests' : 'request');\n    hostStats.push(`${hostname}, ${requestCount}, ${avg}ms average`);\n  }\n  logger.debug({ hostStats, totalRequests }, 'http statistics');\n}\n"]}