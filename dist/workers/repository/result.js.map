{"version":3,"file":"result.js","sourceRoot":"","sources":["../../../lib/workers/repository/result.ts"],"names":[],"mappings":";;;AACA,mEAYwC;AAQxC,SAAgB,aAAa,CAC3B,MAAsB,EACtB,GAAW;IAEX,MAAM,gBAAgB,GAAG;QACvB,oCAAmB;QACnB,mCAAkB;QAClB,uCAAsB;QACtB,oCAAmB;QACnB,4CAA2B;QAC3B,kCAAiB;QACjB,oCAAmB;QACnB,yCAAwB;QACxB,mCAAkB;QAClB,uCAAsB;QACtB,iCAAgB;KACjB,CAAC;IACF,IAAI,MAAqB,CAAC;IAC1B,uBAAuB;IACvB,IAAI,gBAAgB,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;QAClC,MAAM,GAAG,UAAU,CAAC;KACrB;SAAM,IAAI,MAAM,CAAC,eAAe,EAAE;QACjC,MAAM,GAAG,SAAS,CAAC;KACpB;SAAM,IAAI,MAAM,CAAC,eAAe,KAAK,KAAK,EAAE;QAC3C,MAAM,GAAG,YAAY,CAAC;KACvB;SAAM;QACL,MAAM,GAAG,SAAS,CAAC;KACpB;IACD,OAAO,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC;AACzB,CAAC;AA7BD,sCA6BC","sourcesContent":["import { RenovateConfig } from '../../config';\nimport {\n  MANAGER_NO_PACKAGE_FILES,\n  REPOSITORY_ACCESS_FORBIDDEN,\n  REPOSITORY_ARCHIVED,\n  REPOSITORY_BLOCKED,\n  REPOSITORY_CANNOT_FORK,\n  REPOSITORY_DISABLED,\n  REPOSITORY_EMPTY,\n  REPOSITORY_FORKED,\n  REPOSITORY_MIRRORED,\n  REPOSITORY_RENAMED,\n  REPOSITORY_UNINITIATED,\n} from '../../constants/error-messages';\n\ntype ProcessStatus = 'disabled' | 'enabled' | 'onboarding' | 'unknown';\nexport interface ProcessResult {\n  res: string;\n  status: ProcessStatus;\n}\n\nexport function processResult(\n  config: RenovateConfig,\n  res: string\n): ProcessResult {\n  const disabledStatuses = [\n    REPOSITORY_ARCHIVED,\n    REPOSITORY_BLOCKED,\n    REPOSITORY_CANNOT_FORK,\n    REPOSITORY_DISABLED,\n    REPOSITORY_ACCESS_FORBIDDEN,\n    REPOSITORY_FORKED,\n    REPOSITORY_MIRRORED,\n    MANAGER_NO_PACKAGE_FILES,\n    REPOSITORY_RENAMED,\n    REPOSITORY_UNINITIATED,\n    REPOSITORY_EMPTY,\n  ];\n  let status: ProcessStatus;\n  // istanbul ignore next\n  if (disabledStatuses.includes(res)) {\n    status = 'disabled';\n  } else if (config.repoIsOnboarded) {\n    status = 'enabled';\n  } else if (config.repoIsOnboarded === false) {\n    status = 'onboarding';\n  } else {\n    status = 'unknown';\n  }\n  return { res, status };\n}\n"]}