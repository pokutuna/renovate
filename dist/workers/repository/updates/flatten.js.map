{"version":3,"file":"flatten.js","sourceRoot":"","sources":["../../../../lib/workers/repository/updates/flatten.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport {\n  PackageRule,\n  RenovateConfig,\n  filterConfig,\n  getManagerConfig,\n  mergeChildConfig,\n} from '../../../config';\nimport { LANGUAGE_DOCKER } from '../../../constants/languages';\nimport { getDefaultConfig } from '../../../datasource';\nimport { get } from '../../../manager';\nimport { applyPackageRules } from '../../../util/package-rules';\n\n// Return only rules that contain an updateType\nfunction getUpdateTypeRules(packageRules: PackageRule[]): PackageRule[] {\n  return packageRules.filter((rule) => is.nonEmptyArray(rule.updateTypes));\n}\n\nexport async function flattenUpdates(\n  config: RenovateConfig,\n  packageFiles: Record<string, any[]>\n): Promise<RenovateConfig[]> {\n  const updates = [];\n  const updateTypes = [\n    'major',\n    'minor',\n    'patch',\n    'pin',\n    'digest',\n    'lockFileMaintenance',\n  ];\n  for (const [manager, files] of Object.entries(packageFiles)) {\n    const managerConfig = getManagerConfig(config, manager);\n    for (const packageFile of files) {\n      const packageFileConfig = mergeChildConfig(managerConfig, packageFile);\n      for (const dep of packageFile.deps) {\n        if (dep.updates.length) {\n          const depConfig = mergeChildConfig(packageFileConfig, dep);\n          delete depConfig.deps;\n          for (const update of dep.updates) {\n            let updateConfig = mergeChildConfig(depConfig, update);\n            delete updateConfig.updates;\n            // apply config from datasource\n            const datasourceConfig = await getDefaultConfig(\n              depConfig.datasource\n            );\n            updateConfig = mergeChildConfig(updateConfig, datasourceConfig);\n            updateConfig = applyPackageRules(updateConfig);\n            // Keep only rules that haven't been applied yet (with updateTypes)\n            updateConfig.packageRules = getUpdateTypeRules(\n              updateConfig.packageRules\n            );\n            // apply major/minor/patch/pin/digest\n            updateConfig = mergeChildConfig(\n              updateConfig,\n              updateConfig[updateConfig.updateType]\n            );\n            for (const updateType of updateTypes) {\n              delete updateConfig[updateType];\n            }\n            // Apply again in case any were added by the updateType config\n            updateConfig = applyPackageRules(updateConfig);\n            delete updateConfig.packageRules;\n            updateConfig.depNameSanitized = updateConfig.depName\n              ? updateConfig.depName\n                  .replace('@types/', '')\n                  .replace('@', '')\n                  .replace(/\\//g, '-')\n                  .replace(/\\s+/g, '-')\n                  .toLowerCase()\n              : undefined;\n            if (\n              updateConfig.language === LANGUAGE_DOCKER &&\n              updateConfig.depName.match(/(^|\\/)node$/) &&\n              updateConfig.depName !== 'calico/node'\n            ) {\n              updateConfig.managerBranchPrefix = '';\n              updateConfig.depNameSanitized = 'node';\n            }\n            delete updateConfig.repoIsOnboarded;\n            delete updateConfig.renovateJsonPresent;\n            updateConfig.baseDeps = packageFile.deps;\n            updates.push(updateConfig);\n          }\n        }\n      }\n      if (\n        get(manager, 'supportsLockFileMaintenance') &&\n        packageFileConfig.lockFileMaintenance.enabled\n      ) {\n        // Apply lockFileMaintenance config before packageRules\n        let lockFileConfig = mergeChildConfig(\n          packageFileConfig,\n          packageFileConfig.lockFileMaintenance\n        );\n        lockFileConfig.updateType = 'lockFileMaintenance';\n        lockFileConfig = applyPackageRules(lockFileConfig);\n        // Apply lockFileMaintenance and packageRules again\n        lockFileConfig = mergeChildConfig(\n          lockFileConfig,\n          lockFileConfig.lockFileMaintenance\n        );\n        lockFileConfig = applyPackageRules(lockFileConfig);\n        // Remove unnecessary objects\n        for (const updateType of updateTypes) {\n          delete lockFileConfig[updateType];\n        }\n        delete lockFileConfig.packageRules;\n        delete lockFileConfig.deps;\n        updates.push(lockFileConfig);\n      }\n    }\n  }\n  return updates\n    .filter((update) => update.enabled)\n    .map((update) => filterConfig(update, 'branch'));\n}\n"]}