{"version":3,"file":"branchify.js","sourceRoot":"","sources":["../../../../lib/workers/repository/updates/branchify.ts"],"names":[],"mappings":"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","sourcesContent":["import { clean as cleanGitRef } from 'clean-git-ref';\nimport slugify from 'slugify';\nimport { RenovateConfig, ValidationMessage } from '../../../config';\nimport { addMeta, logger, removeMeta } from '../../../logger';\nimport * as template from '../../../util/template';\nimport { BranchConfig, BranchUpgradeConfig } from '../../common';\nimport { embedChangelogs } from '../changelog';\nimport { flattenUpdates } from './flatten';\nimport { generateBranchConfig } from './generate';\nimport { Merge } from 'type-fest';\n\n/**\n * Clean git branch name\n *\n * Remove what clean-git-ref fails to:\n * - leading dot/leading dot after slash\n * - trailing dot\n * - whitespace\n */\nfunction cleanBranchName(branchName: string): string {\n  return cleanGitRef(branchName)\n    .replace(/^\\.|\\.$/, '') // leading or trailing dot\n    .replace(/\\/\\./g, '/') // leading dot after slash\n    .replace(/\\s/g, ''); // whitespace\n}\n\nexport type BranchifiedConfig = Merge<\n  RenovateConfig,\n  {\n    branches: BranchConfig[];\n    branchList: string[];\n  }\n>;\nexport async function branchifyUpgrades(\n  config: RenovateConfig,\n  packageFiles: Record<string, any[]>\n): Promise<BranchifiedConfig> {\n  logger.debug('branchifyUpgrades');\n  const updates = await flattenUpdates(config, packageFiles);\n  logger.debug(\n    `${updates.length} flattened updates found: ${updates\n      .map((u) => u.depName)\n      .filter((txt) => txt?.length)\n      .join(', ')}`\n  );\n  const errors: ValidationMessage[] = [];\n  const warnings: ValidationMessage[] = [];\n  const branchUpgrades: Record<string, BranchUpgradeConfig[]> = {};\n  const branches: BranchConfig[] = [];\n  for (const u of updates) {\n    // extract parentDir and baseDir from packageFile\n    if (u.packageFile) {\n      const packagePath = u.packageFile.split('/');\n      if (packagePath.length > 0) {\n        packagePath.splice(-1, 1);\n      }\n      if (packagePath.length > 0) {\n        u.parentDir = packagePath[packagePath.length - 1];\n        u.baseDir = packagePath.join('/');\n      } else {\n        u.parentDir = '';\n        u.baseDir = '';\n      }\n    }\n    const update: BranchUpgradeConfig = { ...u } as any;\n    // Massage legacy vars just in case\n    update.currentVersion = update.currentValue;\n    update.newVersion = update.newVersion || update.newValue;\n    const upper = (str: string): string =>\n      str.charAt(0).toUpperCase() + str.substr(1);\n    if (update.updateType) {\n      update[`is${upper(update.updateType)}`] = true;\n    }\n    // Check whether to use a group name\n    if (update.groupName) {\n      logger.debug('Using group branchName template');\n      logger.debug(\n        `Dependency ${update.depName} is part of group ${update.groupName}`\n      );\n      update.groupSlug = slugify(update.groupSlug || update.groupName, {\n        lower: true,\n      });\n      if (update.updateType === 'major' && update.separateMajorMinor) {\n        if (update.separateMultipleMajor) {\n          update.groupSlug = `major-${update.newMajor}-${update.groupSlug}`;\n        } else {\n          update.groupSlug = `major-${update.groupSlug}`;\n        }\n      }\n      if (update.updateType === 'patch') {\n        update.groupSlug = `patch-${update.groupSlug}`;\n      }\n      update.branchTopic = update.group.branchTopic || update.branchTopic;\n      update.branchName = template.compile(\n        update.group.branchName || update.branchName,\n        update\n      );\n    } else {\n      update.branchName = template.compile(update.branchName, update);\n    }\n    // Compile extra times in case of nested templates\n    update.branchName = template.compile(update.branchName, update);\n    update.branchName = cleanBranchName(\n      template.compile(update.branchName, update)\n    );\n\n    branchUpgrades[update.branchName] = branchUpgrades[update.branchName] || [];\n    branchUpgrades[update.branchName] = [update].concat(\n      branchUpgrades[update.branchName]\n    );\n  }\n  logger.debug(`Returning ${Object.keys(branchUpgrades).length} branch(es)`);\n  await embedChangelogs(branchUpgrades);\n  for (const branchName of Object.keys(branchUpgrades)) {\n    // Add branch name to metadata before generating branch config\n    addMeta({\n      branch: branchName,\n    });\n    const seenUpdates = {};\n    // Filter out duplicates\n    branchUpgrades[branchName] = branchUpgrades[branchName]\n      .reverse()\n      .filter((upgrade) => {\n        const {\n          manager,\n          packageFile,\n          depName,\n          currentValue,\n          newValue,\n        } = upgrade;\n        const upgradeKey = `${packageFile}:${depName}:${currentValue}`;\n        const previousNewValue = seenUpdates[upgradeKey];\n        if (previousNewValue && previousNewValue !== newValue) {\n          logger.info(\n            {\n              manager,\n              packageFile,\n              depName,\n              currentValue,\n              previousNewValue,\n              thisNewValue: newValue,\n            },\n            'Ignoring upgrade collision'\n          );\n          return false;\n        }\n        seenUpdates[upgradeKey] = newValue;\n        return true;\n      })\n      .reverse();\n    const branch = generateBranchConfig(branchUpgrades[branchName]);\n    branch.branchName = branchName;\n    branch.packageFiles = packageFiles;\n    branches.push(branch);\n  }\n  removeMeta(['branch']);\n  logger.debug(`config.repoIsOnboarded=${config.repoIsOnboarded}`);\n  const branchList = config.repoIsOnboarded\n    ? branches.map((upgrade) => upgrade.branchName)\n    : config.branchList;\n  // istanbul ignore next\n  try {\n    // Here we check if there are updates from the same source repo\n    // that are not grouped into the same branch\n    const branchUpdates: Record<string, Record<string, string>> = {};\n    for (const branch of branches) {\n      const { sourceUrl, branchName, depName, toVersion } = branch;\n      if (sourceUrl && toVersion) {\n        const key = `${sourceUrl}|${toVersion}`;\n        branchUpdates[key] = branchUpdates[key] || {};\n        if (!branchUpdates[key][branchName]) {\n          branchUpdates[key][branchName] = depName;\n        }\n      }\n    }\n    for (const [key, value] of Object.entries(branchUpdates)) {\n      if (Object.keys(value).length > 1) {\n        const [sourceUrl, toVersion] = key.split('|');\n        logger.debug(\n          { sourceUrl, toVersion, branches: value },\n          'Found sourceUrl with multiple branches that should probably be combined into a group'\n        );\n      }\n    }\n  } catch (err) {\n    logger.debug({ err }, 'Error checking branch duplicates');\n  }\n  return {\n    errors: config.errors.concat(errors),\n    warnings: config.warnings.concat(warnings),\n    branches,\n    branchList,\n  };\n}\n"]}