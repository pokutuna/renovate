{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/workers/repository/init/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AACA,4CAAyC;AACzC,gDAA6C;AAC7C,qEAAuD;AACvD,gFAAkE;AAClE,2CAAoD;AACpD,8CAAkD;AAClD,iDAA6D;AAC7D,iCAAkC;AAClC,iCAAyC;AACzC,qCAA+C;AAC/C,yCAAmD;AACnD,mDAA4D;AAErD,KAAK,UAAU,QAAQ,CAAC,KAAqB;IAClD,QAAQ,CAAC,IAAI,EAAE,CAAC;IAChB,MAAM,eAAe,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;IACxC,IAAI,MAAM,GAAmB;QAC3B,GAAG,KAAK;QACR,MAAM,EAAE,EAAE;QACV,QAAQ,EAAE,EAAE;QACZ,UAAU,EAAE,EAAE;KACf,CAAC;IACF,MAAM,GAAG,MAAM,eAAQ,CAAC,MAAM,CAAC,CAAC;IAChC,MAAM,CAAC,eAAe,GAAG,MAAM,gCAAqB,CAAC,MAAM,CAAC,CAAC;IAC7D,MAAM,CAAC,UAAU,GAAG,MAAM,CAAC,aAAa,CAAC;IACzC,MAAM,CAAC,aAAa,GAAG,MAAM,mBAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;IACvE,MAAM,GAAG,MAAM,8BAAqB,CAAC,MAAM,CAAC,CAAC;IAC7C,MAAM,GAAG,MAAM,4BAAmB,CAAC,MAAM,CAAC,CAAC;IAC3C,8BAAiB,CAAC,MAAM,CAAC,CAAC;IAC1B,MAAM,GAAG,MAAM,sBAAe,CAAC,MAAM,CAAC,CAAC;IACvC,MAAM,qBAAe,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;IAC3C,MAAM,GAAG,MAAM,yCAAyB,CAAC,MAAM,CAAC,CAAC;IACjD,qBAAqB;IACrB,IAAI,MAAM,CAAC,WAAW,EAAE;QACtB,eAAM,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,EAAE,wCAAwC,CAAC,CAAC;KACpE;IACD,OAAO,MAAM,CAAC;AAChB,CAAC;AAxBD,4BAwBC","sourcesContent":["import { RenovateConfig } from '../../../config';\nimport { logger } from '../../../logger';\nimport { platform } from '../../../platform';\nimport * as memCache from '../../../util/cache/memory';\nimport * as repositoryCache from '../../../util/cache/repository';\nimport { setBranchPrefix } from '../../../util/git';\nimport { checkIfConfigured } from '../configured';\nimport { checkOnboardingBranch } from '../onboarding/branch';\nimport { initApis } from './apis';\nimport { checkBaseBranch } from './base';\nimport { mergeRenovateConfig } from './config';\nimport { detectSemanticCommits } from './semantic';\nimport { detectVulnerabilityAlerts } from './vulnerability';\n\nexport async function initRepo(input: RenovateConfig): Promise<RenovateConfig> {\n  memCache.init();\n  await repositoryCache.initialize(input);\n  let config: RenovateConfig = {\n    ...input,\n    errors: [],\n    warnings: [],\n    branchList: [],\n  };\n  config = await initApis(config);\n  config.semanticCommits = await detectSemanticCommits(config);\n  config.baseBranch = config.defaultBranch;\n  config.baseBranchSha = await platform.setBaseBranch(config.baseBranch);\n  config = await checkOnboardingBranch(config);\n  config = await mergeRenovateConfig(config);\n  checkIfConfigured(config);\n  config = await checkBaseBranch(config);\n  await setBranchPrefix(config.branchPrefix);\n  config = await detectVulnerabilityAlerts(config);\n  // istanbul ignore if\n  if (config.printConfig) {\n    logger.debug({ config }, 'Full resolved config including presets');\n  }\n  return config;\n}\n"]}