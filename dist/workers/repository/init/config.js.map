{"version":3,"file":"config.js","sourceRoot":"","sources":["../../../../lib/workers/repository/init/config.ts"],"names":[],"mappings":"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","sourcesContent":["import path from 'path';\nimport jsonValidator from 'json-dup-key-validator';\nimport JSON5 from 'json5';\n\nimport { RenovateConfig, mergeChildConfig } from '../../../config';\nimport { configFileNames } from '../../../config/app-strings';\nimport { decryptConfig } from '../../../config/decrypt';\nimport { migrateAndValidate } from '../../../config/migrate-validate';\nimport * as presets from '../../../config/presets';\nimport { CONFIG_VALIDATION } from '../../../constants/error-messages';\nimport * as npmApi from '../../../datasource/npm';\nimport { logger } from '../../../logger';\nimport { ExternalHostError } from '../../../types/errors/external-host-error';\nimport { getCache } from '../../../util/cache/repository';\nimport { clone } from '../../../util/clone';\nimport { readLocalFile } from '../../../util/fs';\nimport { getFileList } from '../../../util/git';\nimport * as hostRules from '../../../util/host-rules';\nimport { flattenPackageRules } from './flatten';\n\n// Check for repository config\nexport async function mergeRenovateConfig(\n  config: RenovateConfig\n): Promise<RenovateConfig> {\n  let returnConfig = { ...config };\n  const fileList = await getFileList();\n  async function detectConfigFile(): Promise<string | null> {\n    for (const fileName of configFileNames) {\n      if (fileName === 'package.json') {\n        try {\n          const pJson = JSON.parse(await readLocalFile('package.json', 'utf8'));\n          if (pJson.renovate) {\n            logger.debug('Using package.json for global renovate config');\n            return 'package.json';\n          }\n        } catch (err) {\n          // Do nothing\n        }\n      } else if (fileList.includes(fileName)) {\n        return fileName;\n      }\n    }\n    return null;\n  }\n  const configFile = await detectConfigFile();\n  if (!configFile) {\n    logger.debug('No renovate config file found');\n    return returnConfig;\n  }\n  logger.debug(`Found ${configFile} config file`);\n  let renovateJson;\n  if (configFile === 'package.json') {\n    // We already know it parses\n    renovateJson = JSON.parse(await readLocalFile('package.json', 'utf8'))\n      .renovate;\n    logger.debug({ config: renovateJson }, 'package.json>renovate config');\n  } else {\n    let renovateConfig = await readLocalFile(configFile, 'utf8');\n    // istanbul ignore if\n    if (renovateConfig === null) {\n      logger.warn('Fetching renovate config returns null');\n      throw new ExternalHostError(\n        Error('Fetching renovate config returns null'),\n        config.platform\n      );\n    }\n    // istanbul ignore if\n    if (!renovateConfig.length) {\n      renovateConfig = '{}';\n    }\n\n    const fileType = path.extname(configFile);\n\n    if (fileType === '.json5') {\n      try {\n        renovateJson = JSON5.parse(renovateConfig);\n      } catch (err) /* istanbul ignore next */ {\n        logger.debug(\n          { renovateConfig },\n          'Error parsing renovate config renovate.json5'\n        );\n        const error = new Error(CONFIG_VALIDATION);\n        error.configFile = configFile;\n        error.validationError = 'Invalid JSON5 (parsing failed)';\n        error.validationMessage = `JSON5.parse error:  ${err.message}`;\n        throw error;\n      }\n    } else {\n      let allowDuplicateKeys = true;\n      let jsonValidationError = jsonValidator.validate(\n        renovateConfig,\n        allowDuplicateKeys\n      );\n      if (jsonValidationError) {\n        const error = new Error(CONFIG_VALIDATION);\n        error.configFile = configFile;\n        error.validationError = 'Invalid JSON (parsing failed)';\n        error.validationMessage = jsonValidationError;\n        throw error;\n      }\n      allowDuplicateKeys = false;\n      jsonValidationError = jsonValidator.validate(\n        renovateConfig,\n        allowDuplicateKeys\n      );\n      if (jsonValidationError) {\n        const error = new Error(CONFIG_VALIDATION);\n        error.configFile = configFile;\n        error.validationError = 'Duplicate keys in JSON';\n        error.validationMessage = JSON.stringify(jsonValidationError);\n        throw error;\n      }\n      try {\n        renovateJson = JSON.parse(renovateConfig);\n      } catch (err) /* istanbul ignore next */ {\n        logger.debug({ renovateConfig }, 'Error parsing renovate config');\n        const error = new Error(CONFIG_VALIDATION);\n        error.configFile = configFile;\n        error.validationError = 'Invalid JSON (parsing failed)';\n        error.validationMessage = `JSON.parse error:  ${err.message}`;\n        throw error;\n      }\n    }\n    logger.debug({ configFile, config: renovateJson }, 'Repository config');\n  }\n  const cache = getCache();\n  cache.init = {\n    configFile,\n    contents: clone(renovateJson),\n  };\n  const migratedConfig = await migrateAndValidate(config, renovateJson);\n  if (migratedConfig.errors.length) {\n    const error = new Error(CONFIG_VALIDATION);\n    error.configFile = configFile;\n    error.validationError =\n      'The renovate configuration file contains some invalid settings';\n    error.validationMessage = migratedConfig.errors\n      .map((e) => e.message)\n      .join(', ');\n    throw error;\n  }\n  if (migratedConfig.warnings) {\n    returnConfig.warnings = returnConfig.warnings.concat(\n      migratedConfig.warnings\n    );\n  }\n  delete migratedConfig.errors;\n  delete migratedConfig.warnings;\n  logger.debug({ config: migratedConfig }, 'migrated config');\n  // Decrypt before resolving in case we need npm authentication for any presets\n  const decryptedConfig = decryptConfig(migratedConfig, config.privateKey);\n  // istanbul ignore if\n  if (decryptedConfig.npmrc) {\n    logger.debug('Found npmrc in decrypted config - setting');\n    npmApi.setNpmrc(decryptedConfig.npmrc);\n  }\n  // Decrypt after resolving in case the preset contains npm authentication instead\n  const resolvedConfig = decryptConfig(\n    await presets.resolveConfigPresets(decryptedConfig, config),\n    config.privateKey\n  );\n  delete resolvedConfig.privateKey;\n  logger.trace({ config: resolvedConfig }, 'resolved config');\n  // istanbul ignore if\n  if (resolvedConfig.npmrc) {\n    logger.debug(\n      'Ignoring any .npmrc files in repository due to configured npmrc'\n    );\n    npmApi.setNpmrc(resolvedConfig.npmrc);\n    resolvedConfig.ignoreNpmrcFile = true;\n  }\n  // istanbul ignore if\n  if (resolvedConfig.hostRules) {\n    logger.debug('Setting hostRules from config');\n    for (const rule of resolvedConfig.hostRules) {\n      try {\n        hostRules.add(rule);\n      } catch (err) {\n        logger.warn(\n          { err, config: rule },\n          'Error setting hostRule from config'\n        );\n      }\n    }\n    delete resolvedConfig.hostRules;\n  }\n  returnConfig = mergeChildConfig(returnConfig, resolvedConfig);\n  returnConfig.renovateJsonPresent = true;\n  returnConfig.packageRules = flattenPackageRules(returnConfig.packageRules);\n  // istanbul ignore if\n  if (returnConfig.ignorePaths?.length) {\n    logger.debug(\n      { ignorePaths: returnConfig.ignorePaths },\n      `Found repo ignorePaths`\n    );\n  }\n  return returnConfig;\n}\n"]}