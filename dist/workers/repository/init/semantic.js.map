{"version":3,"file":"semantic.js","sourceRoot":"","sources":["../../../../lib/workers/repository/init/semantic.ts"],"names":[],"mappings":";;;;;;AAAA,kGAAwE;AAExE,4CAAyC;AACzC,2CAAsD;AAE/C,KAAK,UAAU,qBAAqB,CACzC,MAAsB;IAEtB,eAAM,CAAC,KAAK,CAAC,yBAAyB,CAAC,CAAC;IACxC,eAAM,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;IACzB,IAAI,MAAM,CAAC,eAAe,KAAK,IAAI,EAAE;QACnC,eAAM,CAAC,KAAK,CACV,EAAE,eAAe,EAAE,MAAM,CAAC,eAAe,EAAE,EAC3C,iCAAiC,CAClC,CAAC;QACF,OAAO,MAAM,CAAC,eAAe,CAAC;KAC/B;IACD,MAAM,cAAc,GAAG,MAAM,uBAAiB,EAAE,CAAC;IACjD,IAAI,cAAc,EAAE;QAClB,cAAc,CAAC,MAAM,GAAG,EAAE,CAAC;KAC5B;IACD,eAAM,CAAC,KAAK,CAAC,kBAAkB,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;IACjE,MAAM,IAAI,GAAG,uCAA2B,CAAC,cAAc,CAAC,CAAC;IACzD,eAAM,CAAC,KAAK,CAAC,8BAA8B,GAAG,IAAI,CAAC,CAAC;IACpD,IAAI,IAAI,KAAK,SAAS,EAAE;QACtB,eAAM,CAAC,KAAK,CAAC,mCAAmC,CAAC,CAAC;QAClD,OAAO,IAAI,CAAC;KACb;IACD,eAAM,CAAC,KAAK,CAAC,8BAA8B,CAAC,CAAC;IAC7C,OAAO,KAAK,CAAC;AACf,CAAC;AAzBD,sDAyBC","sourcesContent":["import conventionalCommitsDetector from 'conventional-commits-detector';\nimport { RenovateConfig } from '../../../config';\nimport { logger } from '../../../logger';\nimport { getCommitMessages } from '../../../util/git';\n\nexport async function detectSemanticCommits(\n  config: RenovateConfig\n): Promise<boolean> {\n  logger.debug('detectSemanticCommits()');\n  logger.trace({ config });\n  if (config.semanticCommits !== null) {\n    logger.debug(\n      { semanticCommits: config.semanticCommits },\n      `semanticCommits already defined`\n    );\n    return config.semanticCommits;\n  }\n  const commitMessages = await getCommitMessages();\n  if (commitMessages) {\n    commitMessages.length = 10;\n  }\n  logger.trace(`commitMessages=${JSON.stringify(commitMessages)}`);\n  const type = conventionalCommitsDetector(commitMessages);\n  logger.debug('Semantic commits detection: ' + type);\n  if (type === 'angular') {\n    logger.debug('angular semantic commits detected');\n    return true;\n  }\n  logger.debug('No semantic commits detected');\n  return false;\n}\n"]}