{"version":3,"file":"vulnerability.js","sourceRoot":"","sources":["../../../../lib/workers/repository/init/vulnerability.ts"],"names":[],"mappings":"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","sourcesContent":["import { RenovateConfig } from '../../../config';\nimport { REPOSITORY_NO_VULNERABILITY } from '../../../constants/error-messages';\nimport * as datasourceMaven from '../../../datasource/maven';\nimport * as datasourceNpm from '../../../datasource/npm';\nimport * as datasourceNuget from '../../../datasource/nuget';\nimport * as datasourcePypi from '../../../datasource/pypi';\nimport * as datasourceRubygems from '../../../datasource/rubygems';\nimport { logger } from '../../../logger';\nimport { platform } from '../../../platform';\nimport { SecurityAdvisory } from '../../../types';\nimport * as allVersioning from '../../../versioning';\nimport * as mavenVersioning from '../../../versioning/maven';\nimport * as npmVersioning from '../../../versioning/npm';\nimport * as pep440Versioning from '../../../versioning/pep440';\nimport * as rubyVersioning from '../../../versioning/ruby';\nimport * as semverVersioning from '../../../versioning/semver';\n\ntype CombinedAlert = Record<\n  string,\n  Record<\n    string,\n    {\n      advisories: SecurityAdvisory[];\n      fileNames: string[];\n      firstPatchedVersion?: string;\n      vulnerableRequirements?: string;\n    }\n  >\n>;\n\nexport async function detectVulnerabilityAlerts(\n  input: RenovateConfig\n): Promise<RenovateConfig> {\n  if (!input?.vulnerabilityAlerts) {\n    return input;\n  }\n  if (input.vulnerabilityAlerts.enabled === false) {\n    logger.debug('Vulnerability alerts are disabled');\n    return input;\n  }\n  const alerts = await platform.getVulnerabilityAlerts();\n  if (!alerts.length) {\n    logger.debug('No vulnerability alerts found');\n    if (input.vulnerabilityAlertsOnly) {\n      throw new Error(REPOSITORY_NO_VULNERABILITY);\n    }\n    return input;\n  }\n  const config = { ...input };\n  const combinedAlerts: CombinedAlert = {};\n  for (const alert of alerts) {\n    try {\n      if (alert.dismissReason) {\n        continue; // eslint-disable-line no-continue\n      }\n      if (!alert.securityVulnerability.firstPatchedVersion) {\n        logger.debug(\n          { alert },\n          'Vulnerability alert has no firstPatchedVersion - skipping'\n        );\n        continue; // eslint-disable-line no-continue\n      }\n      const datasourceMapping: Record<string, string> = {\n        MAVEN: datasourceMaven.id,\n        NPM: datasourceNpm.id,\n        NUGET: datasourceNuget.id,\n        PIP: datasourcePypi.id,\n        RUBYGEMS: datasourceRubygems.id,\n      };\n      const datasource =\n        datasourceMapping[alert.securityVulnerability.package.ecosystem];\n      if (!combinedAlerts[datasource]) {\n        combinedAlerts[datasource] = {};\n      }\n      const depName = alert.securityVulnerability.package.name;\n      if (!combinedAlerts[datasource][depName]) {\n        combinedAlerts[datasource][depName] = {\n          advisories: [],\n          fileNames: [],\n        };\n      }\n      combinedAlerts[datasource][depName].advisories.push(\n        alert.securityAdvisory\n      );\n      const fileName = alert.vulnerableManifestFilename;\n      if (!combinedAlerts[datasource][depName].fileNames.includes(fileName)) {\n        combinedAlerts[datasource][depName].fileNames.push(fileName);\n      }\n      const firstPatchedVersion =\n        alert.securityVulnerability.firstPatchedVersion.identifier;\n      const versionings: Record<string, string> = {\n        maven: mavenVersioning.id,\n        npm: npmVersioning.id,\n        nuget: semverVersioning.id,\n        pip_requirements: pep440Versioning.id,\n        rubygems: rubyVersioning.id,\n      };\n      const version = allVersioning.get(versionings[datasource]);\n      if (version.isVersion(firstPatchedVersion)) {\n        if (combinedAlerts[datasource][depName].firstPatchedVersion) {\n          if (\n            version.isGreaterThan(\n              firstPatchedVersion,\n              combinedAlerts[datasource][depName].firstPatchedVersion\n            )\n          ) {\n            combinedAlerts[datasource][\n              depName\n            ].firstPatchedVersion = firstPatchedVersion;\n            combinedAlerts[datasource][depName].vulnerableRequirements =\n              alert.vulnerableRequirements;\n          }\n        } else {\n          combinedAlerts[datasource][\n            depName\n          ].firstPatchedVersion = firstPatchedVersion;\n          combinedAlerts[datasource][depName].vulnerableRequirements =\n            alert.vulnerableRequirements;\n        }\n      } else {\n        logger.debug('Invalid firstPatchedVersion: ' + firstPatchedVersion);\n      }\n    } catch (err) {\n      logger.warn({ err }, 'Error parsing vulnerability alert');\n    }\n  }\n  const alertPackageRules = [];\n  for (const [datasource, dependencies] of Object.entries(combinedAlerts)) {\n    for (const [depName, val] of Object.entries(dependencies)) {\n      let prBodyNotes: string[] = [];\n      try {\n        prBodyNotes = ['### GitHub Vulnerability Alerts'].concat(\n          val.advisories.map((advisory) => {\n            let content = '#### ';\n            let heading;\n            if (advisory.identifiers.some((id) => id.type === 'CVE')) {\n              heading = advisory.identifiers\n                .filter((id) => id.type === 'CVE')\n                .map((id) => id.value)\n                .join(' / ');\n            } else {\n              heading = advisory.identifiers.map((id) => id.value).join(' / ');\n            }\n            if (advisory.references.length) {\n              heading = `[${heading}](${advisory.references[0].url})`;\n            }\n            content += heading;\n            content += '\\n\\n';\n            content += advisory.description;\n            return content;\n          })\n        );\n      } catch (err) /* istanbul ignore next */ {\n        logger.warn({ err }, 'Error generating vulnerability PR notes');\n      }\n      let matchCurrentVersion = val.vulnerableRequirements;\n      // istanbul ignore if\n      if (!matchCurrentVersion) {\n        if (datasource === datasourceMaven.id) {\n          matchCurrentVersion = `(,${val.firstPatchedVersion})`;\n        } else {\n          matchCurrentVersion = `< ${val.firstPatchedVersion}`;\n        }\n      }\n      const allowedVersions =\n        datasource === datasourcePypi.id\n          ? `==${val.firstPatchedVersion}`\n          : val.firstPatchedVersion;\n      const matchRule = {\n        datasources: [datasource],\n        packageNames: [depName],\n        matchCurrentVersion,\n        allowedVersions,\n        prBodyNotes,\n        force: {\n          ...config.vulnerabilityAlerts,\n          vulnerabilityAlert: true,\n          branchTopic: `${datasource}-${depName}-vulnerability`,\n        },\n      };\n      alertPackageRules.push(matchRule);\n    }\n  }\n  logger.debug({ alertPackageRules }, 'alert package rules');\n  config.packageRules = (config.packageRules || []).concat(alertPackageRules);\n  return config;\n}\n"]}