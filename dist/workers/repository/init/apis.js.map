{"version":3,"file":"apis.js","sourceRoot":"","sources":["../../../../lib/workers/repository/init/apis.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AACA,gEAAkD;AAClD,gDAAqE;AAOrE,kBAAkB;AAClB,KAAK,UAAU,iBAAiB,CAC9B,MAAkB;IAElB,MAAM,cAAc,GAAG,MAAM,mBAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;IACvD,OAAO;QACL,GAAG,MAAM;QACT,GAAG,cAAc;KAClB,CAAC;AACJ,CAAC;AAED,kBAAkB;AACX,KAAK,UAAU,QAAQ,CAC5B,KAAqB;IAErB,IAAI,MAAM,GAAyB,EAAE,GAAG,KAAK,EAAW,CAAC;IACzD,MAAM,GAAG,MAAM,iBAAiB,CAAC,MAAe,CAAC,CAAC;IAClD,MAAM,CAAC,aAAa,EAAE,CAAC;IACvB,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAC9B,OAAO,MAAM,CAAC;AAChB,CAAC;AARD,4BAQC","sourcesContent":["import { RenovateConfig } from '../../../config';\nimport * as npmApi from '../../../datasource/npm';\nimport { RepoParams, RepoResult, platform } from '../../../platform';\n\n// TODO: fix types\nexport type WorkerPlatformConfig = RepoResult &\n  RenovateConfig &\n  Record<string, any>;\n\n// TODO: fix types\nasync function getPlatformConfig(\n  config: RepoParams\n): Promise<WorkerPlatformConfig> {\n  const platformConfig = await platform.initRepo(config);\n  return {\n    ...config,\n    ...platformConfig,\n  };\n}\n\n// TODO: fix types\nexport async function initApis(\n  input: RenovateConfig\n): Promise<WorkerPlatformConfig> {\n  let config: WorkerPlatformConfig = { ...input } as never;\n  config = await getPlatformConfig(config as never);\n  npmApi.resetMemCache();\n  npmApi.setNpmrc(config.npmrc);\n  return config;\n}\n"]}