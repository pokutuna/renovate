{"version":3,"file":"initialize.js","sourceRoot":"","sources":["../../../lib/workers/global/initialize.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,4CAAoB;AACpB,gDAAwB;AACxB,wDAA0B;AAE1B,yCAAsC;AACtC,6CAA8C;AAC9C,uEAAyD;AACzD,4CAAkD;AAClD,iDAAmC;AAEnC,KAAK,UAAU,cAAc,CAAC,KAAqB;IACjD,MAAM,MAAM,GAAmB,EAAE,GAAG,KAAK,EAAE,CAAC;IAC5C,OAAO,CAAC,GAAG,CAAC,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,eAAe,IAAI,YAAE,CAAC,MAAM,EAAE,CAAC;IAChE,IAAI,MAAM,CAAC,OAAO,EAAE;QAClB,eAAM,CAAC,KAAK,CAAC,4BAA4B,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC;KAC7D;SAAM;QACL,MAAM,CAAC,OAAO,GAAG,cAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;QAC3D,eAAM,CAAC,KAAK,CAAC,iBAAiB,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC;KAClD;IACD,MAAM,kBAAE,CAAC,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IACnC,IAAI,MAAM,CAAC,QAAQ,EAAE;QACnB,eAAM,CAAC,KAAK,CAAC,6BAA6B,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;KAC/D;SAAM;QACL,MAAM,CAAC,QAAQ,GAAG,cAAI,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QACrD,eAAM,CAAC,KAAK,CAAC,kBAAkB,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;KACpD;IACD,MAAM,kBAAE,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IACpC,OAAO,MAAM,CAAC;AAChB,CAAC;AAEM,KAAK,UAAU,gBAAgB,CACpC,OAAuB;IAEvB,IAAI,MAAM,GAAG,OAAO,CAAC;IACrB,MAAM,GAAG,MAAM,uBAAY,CAAC,MAAM,CAAC,CAAC;IACpC,MAAM,GAAG,MAAM,cAAc,CAAC,MAAM,CAAC,CAAC;IACtC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC1B,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACpB,sBAAc,CAAC,MAAM,CAAC,CAAC;IACvB,OAAO,MAAM,CAAC;AAChB,CAAC;AAVD,4CAUC;AAED,SAAgB,cAAc,CAAC,MAAsB;IACnD,YAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;AAC/B,CAAC;AAFD,wCAEC","sourcesContent":["import os from 'os';\nimport path from 'path';\nimport fs from 'fs-extra';\nimport { RenovateConfig } from '../../config/common';\nimport { logger } from '../../logger';\nimport { initPlatform } from '../../platform';\nimport * as packageCache from '../../util/cache/package';\nimport { setEmojiConfig } from '../../util/emoji';\nimport * as limits from './limits';\n\nasync function setDirectories(input: RenovateConfig): Promise<RenovateConfig> {\n  const config: RenovateConfig = { ...input };\n  process.env.TMPDIR = process.env.RENOVATE_TMPDIR || os.tmpdir();\n  if (config.baseDir) {\n    logger.debug('Using configured baseDir: ' + config.baseDir);\n  } else {\n    config.baseDir = path.join(process.env.TMPDIR, 'renovate');\n    logger.debug('Using baseDir: ' + config.baseDir);\n  }\n  await fs.ensureDir(config.baseDir);\n  if (config.cacheDir) {\n    logger.debug('Using configured cacheDir: ' + config.cacheDir);\n  } else {\n    config.cacheDir = path.join(config.baseDir, 'cache');\n    logger.debug('Using cacheDir: ' + config.cacheDir);\n  }\n  await fs.ensureDir(config.cacheDir);\n  return config;\n}\n\nexport async function globalInitialize(\n  config_: RenovateConfig\n): Promise<RenovateConfig> {\n  let config = config_;\n  config = await initPlatform(config);\n  config = await setDirectories(config);\n  packageCache.init(config);\n  limits.init(config);\n  setEmojiConfig(config);\n  return config;\n}\n\nexport function globalFinalize(config: RenovateConfig): void {\n  packageCache.cleanup(config);\n}\n"]}