{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/workers/global/index.ts"],"names":[],"mappings":"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","sourcesContent":["import path from 'path';\nimport is from '@sindresorhus/is';\nimport fs from 'fs-extra';\nimport * as configParser from '../../config';\nimport { getErrors, logger, setMeta } from '../../logger';\nimport { setUtilConfig } from '../../util';\nimport * as hostRules from '../../util/host-rules';\nimport * as repositoryWorker from '../repository';\nimport { autodiscoverRepositories } from './autodiscover';\nimport { globalFinalize, globalInitialize } from './initialize';\nimport * as limits from './limits';\n\ntype RenovateConfig = configParser.RenovateConfig;\ntype RenovateRepository = configParser.RenovateRepository;\n\nexport async function getRepositoryConfig(\n  globalConfig: RenovateConfig,\n  repository: RenovateRepository\n): Promise<RenovateConfig> {\n  const repoConfig = configParser.mergeChildConfig(\n    globalConfig,\n    is.string(repository) ? { repository } : repository\n  );\n  repoConfig.localDir = path.join(\n    repoConfig.baseDir,\n    `./repos/${repoConfig.platform}/${repoConfig.repository}`\n  );\n  await fs.ensureDir(repoConfig.localDir);\n  delete repoConfig.baseDir;\n  return configParser.filterConfig(repoConfig, 'repository');\n}\n\nfunction getGlobalConfig(): Promise<RenovateConfig> {\n  return configParser.parseConfigs(process.env, process.argv);\n}\n\nfunction haveReachedLimits(): boolean {\n  if (limits.getLimitRemaining('prCommitsPerRunLimit') <= 0) {\n    logger.info('Max commits created for this run.');\n    return true;\n  }\n  return false;\n}\n\nexport async function start(): Promise<0 | 1> {\n  let config: RenovateConfig;\n  try {\n    // read global config from file, env and cli args\n    config = await getGlobalConfig();\n    // initialize all submodules\n    config = await globalInitialize(config);\n    // autodiscover repositories (needs to come after platform initialization)\n    config = await autodiscoverRepositories(config);\n    // Iterate through repositories sequentially\n    for (const repository of config.repositories) {\n      if (haveReachedLimits()) {\n        break;\n      }\n      const repoConfig = await getRepositoryConfig(config, repository);\n      await setUtilConfig(repoConfig);\n      if (repoConfig.hostRules) {\n        hostRules.clear();\n        repoConfig.hostRules.forEach((rule) => hostRules.add(rule));\n        repoConfig.hostRules = [];\n      }\n      await repositoryWorker.renovateRepository(repoConfig);\n      setMeta({});\n    }\n  } catch (err) /* istanbul ignore next */ {\n    if (err.message.startsWith('Init: ')) {\n      logger.fatal(err.message.substring(6));\n    } else {\n      logger.fatal({ err }, `Fatal error: ${err.message}`);\n    }\n  } finally {\n    globalFinalize(config);\n    logger.debug(`Renovate exiting`);\n  }\n  const loggerErrors = getErrors();\n  /* istanbul ignore if */\n  if (loggerErrors.length) {\n    logger.info(\n      { loggerErrors },\n      'Renovate is exiting with a non-zero code due to the following logged errors'\n    );\n    return 1;\n  }\n  return 0;\n}\n"]}