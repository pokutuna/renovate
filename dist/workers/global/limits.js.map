{"version":3,"file":"limits.js","sourceRoot":"","sources":["../../../lib/workers/global/limits.ts"],"names":[],"mappings":";;;AAAA,yCAAsC;AAEtC,MAAM,YAAY,GAAG,CAAC,sBAAsB,CAAC,CAAC;AAC9C,MAAM,CAAC,GAA2B,EAAE,CAAC;AACrC,MAAM,CAAC,GAA2B,EAAE,CAAC;AAErC,SAAgB,QAAQ,CAAC,IAAY,EAAE,KAAa;IAClD,eAAM,CAAC,KAAK,CAAC,qBAAqB,IAAI,OAAO,KAAK,EAAE,CAAC,CAAC;IACtD,CAAC,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;AAClB,CAAC;AAHD,4BAGC;AAED,SAAgB,IAAI,CAAC,MAA2B;IAC9C,eAAM,CAAC,KAAK,CAAC,0BAA0B,CAAC,CAAC;IACzC,KAAK,MAAM,KAAK,IAAI,YAAY,EAAE;QAChC,eAAM,CAAC,KAAK,CAAC,eAAe,KAAK,aAAa,CAAC,CAAC;QAChD,IAAI,MAAM,CAAC,KAAK,CAAC,EAAE;YACjB,QAAQ,CAAC,KAAK,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;YAC/B,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;SACd;aAAM;YACL,eAAM,CAAC,KAAK,CACV,eAAe,KAAK,kCAAkC,KAAK,EAAE,CAC9D,CAAC;SACH;KACF;AACH,CAAC;AAbD,oBAaC;AAED,SAAgB,iBAAiB,CAAC,IAAY;IAC5C,IAAI,MAAM,CAAC;IACX,IAAI,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,WAAW,EAAE;QAClC,MAAM,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;KAC5B;SAAM;QACL,MAAM,GAAG,SAAS,CAAC;KACpB;IACD,OAAO,MAAM,CAAC;AAChB,CAAC;AARD,8CAQC;AAED,SAAgB,cAAc,CAAC,IAAY,EAAE,KAAK,GAAG,CAAC;IACpD,IAAI,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,WAAW,EAAE;QAClC,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC;KAClB;AACH,CAAC;AAJD,wCAIC","sourcesContent":["import { logger } from '../../logger';\n\nconst limitsToInit = ['prCommitsPerRunLimit'];\nconst l: Record<string, number> = {};\nconst v: Record<string, number> = {};\n\nexport function setLimit(name: string, value: number): void {\n  logger.debug(`Limits.setLimit l[${name}] = ${value}`);\n  l[name] = value;\n}\n\nexport function init(config: Record<string, any>): void {\n  logger.debug(`Limits.init enter method`);\n  for (const limit of limitsToInit) {\n    logger.debug(`Limits.init ${limit} processing`);\n    if (config[limit]) {\n      setLimit(limit, config[limit]);\n      v[limit] = 0;\n    } else {\n      logger.debug(\n        `Limits.init ${limit} variable is not set. Ignoring ${limit}`\n      );\n    }\n  }\n}\n\nexport function getLimitRemaining(name: string): number {\n  let result;\n  if (typeof v[name] !== 'undefined') {\n    result = l[name] - v[name];\n  } else {\n    result = undefined;\n  }\n  return result;\n}\n\nexport function incrementLimit(name: string, value = 1): void {\n  if (typeof v[name] !== 'undefined') {\n    v[name] += value;\n  }\n}\n"]}