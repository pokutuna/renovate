{"version":3,"file":"schedule.js","sourceRoot":"","sources":["../../../lib/workers/branch/schedule.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport later from 'later';\nimport moment from 'moment-timezone';\nimport { RenovateConfig } from '../../config';\nimport { logger } from '../../logger';\n\nconst scheduleMappings: Record<string, string> = {\n  'every month': 'before 3am on the first day of the month',\n  monthly: 'before 3am on the first day of the month',\n};\n\nfunction fixShortHours(input: string): string {\n  return input.replace(/( \\d?\\d)((a|p)m)/g, '$1:00$2');\n}\n\nexport function hasValidTimezone(\n  timezone: string\n): [boolean] | [boolean, string] {\n  if (!moment.tz.zone(timezone)) {\n    return [false, `Invalid schedule: Unsupported timezone ${timezone}`];\n  }\n  return [true];\n}\n\nexport function hasValidSchedule(\n  schedule: string[] | null | 'at any time'\n): [boolean] | [boolean, string] {\n  let message: string;\n  if (\n    !schedule ||\n    schedule === 'at any time' ||\n    schedule[0] === 'at any time'\n  ) {\n    return [true];\n  }\n  // check if any of the schedules fail to parse\n  const hasFailedSchedules = schedule.some((scheduleText) => {\n    const massagedText = fixShortHours(\n      scheduleMappings[scheduleText] || scheduleText\n    );\n    const parsedSchedule = later.parse.text(massagedText);\n    if (parsedSchedule.error !== -1) {\n      message = `Invalid schedule: Failed to parse \"${scheduleText}\"`;\n      // It failed to parse\n      return true;\n    }\n    if (parsedSchedule.schedules.some((s) => s.m)) {\n      message = `Invalid schedule: \"${scheduleText}\" should not specify minutes`;\n      return true;\n    }\n    if (\n      !parsedSchedule.schedules.some(\n        (s) => s.M || s.d !== undefined || s.D || s.t_a !== undefined || s.t_b\n      )\n    ) {\n      message = `Invalid schedule: \"${scheduleText}\" has no months, days of week or time of day`;\n      return true;\n    }\n    // It must be OK\n    return false;\n  });\n  if (hasFailedSchedules) {\n    // If any fail then we invalidate the whole thing\n    return [false, message];\n  }\n  return [true, ''];\n}\n\nexport function isScheduledNow(config: RenovateConfig): boolean {\n  let configSchedule = config.schedule;\n  logger.debug(`Checking schedule(${configSchedule}, ${config.timezone})`);\n  if (\n    !configSchedule ||\n    configSchedule.length === 0 ||\n    configSchedule[0] === '' ||\n    configSchedule === ('at any time' as never) ||\n    configSchedule[0] === 'at any time'\n  ) {\n    logger.debug('No schedule defined');\n    return true;\n  }\n  if (!is.array(configSchedule)) {\n    logger.warn(\n      `config schedule is not an array: ${JSON.stringify(configSchedule)}`\n    );\n    configSchedule = [configSchedule];\n  }\n  const [validSchedule, errorMessage] = hasValidSchedule(configSchedule);\n  if (!validSchedule) {\n    logger.warn(errorMessage);\n    return true;\n  }\n  let now = moment();\n  logger.trace(`now=${now.format()}`);\n  // Adjust the time if repo is in a different timezone to renovate\n  if (config.timezone) {\n    logger.debug({ timezone: config.timezone }, 'Found timezone');\n    const [validTimezone, error] = hasValidTimezone(config.timezone);\n    if (!validTimezone) {\n      logger.warn(error);\n      return true;\n    }\n    logger.debug('Adjusting now for timezone');\n    now = now.tz(config.timezone);\n    logger.trace(`now=${now.format()}`);\n  }\n  // Get today in text form, e.g. \"Monday\";\n  const currentDay = now.format('dddd');\n  logger.trace(`currentDay=${currentDay}`);\n  // Get the number of seconds since midnight\n  const currentSeconds =\n    now.hours() * 3600 + now.minutes() * 60 + now.seconds();\n  logger.trace(`currentSeconds=${currentSeconds}`);\n  // Support a single string but massage to array for processing\n  logger.debug(`Checking ${configSchedule.length} schedule(s)`);\n  // We run if any schedule matches\n  const isWithinSchedule = configSchedule.some((scheduleText) => {\n    const massagedText = scheduleMappings[scheduleText] || scheduleText;\n    const parsedSchedule = later.parse.text(fixShortHours(massagedText));\n    logger.debug({ parsedSchedule }, `Checking schedule \"${scheduleText}\"`);\n    // Later library returns array of schedules\n    return parsedSchedule.schedules.some((schedule) => {\n      // Check if months are defined\n      if (schedule.M) {\n        const currentMonth = parseInt(now.format('M'), 10);\n        if (!schedule.M.includes(currentMonth)) {\n          logger.debug(\n            `Does not match schedule because ${currentMonth} is not in ${schedule.M}`\n          );\n          return false;\n        }\n      }\n      // Check if days are defined\n      if (schedule.d) {\n        // We need to compare text instead of numbers because\n        // 'moment' adjusts day of week for locale while 'later' does not\n        // later days run from 1..7\n        const dowMap = [\n          null,\n          'Sunday',\n          'Monday',\n          'Tuesday',\n          'Wednesday',\n          'Thursday',\n          'Friday',\n          'Saturday',\n        ];\n        const scheduledDays = schedule.d.map((day) => dowMap[day]);\n        logger.trace({ scheduledDays }, `scheduledDays`);\n        if (!scheduledDays.includes(currentDay)) {\n          logger.debug(\n            `Does not match schedule because ${currentDay} is not in ${scheduledDays}`\n          );\n          return false;\n        }\n      }\n      if (schedule.D) {\n        logger.debug({ schedule_D: schedule.D }, `schedule.D`);\n        // moment outputs as string but later outputs as integer\n        const currentDayOfMonth = parseInt(now.format('D'), 10);\n        if (!schedule.D.includes(currentDayOfMonth)) {\n          return false;\n        }\n      }\n      // Check for start time\n      if (schedule.t_a) {\n        const startSeconds = schedule.t_a[0];\n        if (currentSeconds < startSeconds) {\n          logger.debug(\n            `Does not match schedule because ${currentSeconds} is earlier than ${startSeconds}`\n          );\n          return false;\n        }\n      }\n      // Check for end time\n      if (schedule.t_b) {\n        const endSeconds = schedule.t_b[0];\n        if (currentSeconds > endSeconds) {\n          logger.debug(\n            `Does not match schedule because ${currentSeconds} is later than ${endSeconds}`\n          );\n          return false;\n        }\n      }\n      // Check for week of year\n      if (schedule.wy && !schedule.wy.includes(now.week())) {\n        return false;\n      }\n      logger.debug(`Matches schedule ${scheduleText}`);\n      return true;\n    });\n  });\n  if (!isWithinSchedule) {\n    logger.debug('Package not scheduled');\n    return false;\n  }\n  return true;\n}\n"]}