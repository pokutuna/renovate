{"version":3,"file":"reuse.js","sourceRoot":"","sources":["../../../lib/workers/branch/reuse.ts"],"names":[],"mappings":"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","sourcesContent":["import { RenovateConfig } from '../../config';\nimport { logger } from '../../logger';\nimport { platform } from '../../platform';\nimport { branchExists, isBranchModified, isBranchStale } from '../../util/git';\n\ntype ParentBranch = {\n  reuseExistingBranch: boolean;\n  isModified?: boolean;\n};\n\nexport async function shouldReuseExistingBranch(\n  config: RenovateConfig\n): Promise<ParentBranch> {\n  const { branchName } = config;\n  // Check if branch exists\n  if (!(await branchExists(branchName))) {\n    logger.debug(`Branch needs creating`);\n    return { reuseExistingBranch: false };\n  }\n  logger.debug(`Branch already exists`);\n\n  // Check for existing PR\n  const pr = await platform.getBranchPr(branchName);\n\n  if (pr) {\n    if (pr.title && pr.title.startsWith('rebase!')) {\n      logger.debug('Manual rebase requested via PR title for #' + pr.number);\n      return { reuseExistingBranch: false };\n    }\n    if (pr.body && pr.body.includes(`- [x] <!-- rebase-check -->`)) {\n      logger.debug('Manual rebase requested via PR checkbox for #' + pr.number);\n      return { reuseExistingBranch: false };\n    }\n    if (pr.labels && pr.labels.includes(config.rebaseLabel)) {\n      logger.debug('Manual rebase requested via PR labels for #' + pr.number);\n      // istanbul ignore if\n      if (config.dryRun) {\n        logger.info(\n          `DRY-RUN: Would delete label ${config.rebaseLabel} from #${pr.number}`\n        );\n      } else {\n        await platform.deleteLabel(pr.number, config.rebaseLabel);\n      }\n      return { reuseExistingBranch: false };\n    }\n  }\n\n  if (\n    config.rebaseWhen === 'behind-base-branch' ||\n    (config.rebaseWhen === 'auto' && (await platform.getRepoForceRebase())) ||\n    (config.automerge && config.automergeType === 'branch')\n  ) {\n    if (await isBranchStale(branchName)) {\n      logger.debug(`Branch is stale and needs rebasing`);\n      // We can rebase the branch only if no PR or PR can be rebased\n      if (await isBranchModified(branchName)) {\n        // TODO: Warn here so that it appears in PR body\n        logger.debug('Cannot rebase branch as it has been modified');\n        return { reuseExistingBranch: true, isModified: true };\n      }\n      return { reuseExistingBranch: false };\n    }\n  }\n\n  // Now check if PR is unmergeable. If so then we also rebase\n  if (pr?.isConflicted) {\n    logger.debug('PR is conflicted');\n\n    if ((await isBranchModified(branchName)) === false) {\n      logger.debug(`Branch is not mergeable and needs rebasing`);\n      if (config.rebaseWhen === 'never') {\n        logger.debug('Rebasing disabled by config');\n        return { reuseExistingBranch: true, isModified: false };\n      }\n      // Setting reuseExistingBranch back to undefined means that we'll use the default branch\n      return { reuseExistingBranch: false };\n    }\n    // Don't do anything different, but warn\n    // TODO: Add warning to PR\n    logger.debug(`Branch is not mergeable but can't be rebased`);\n  }\n  logger.debug(`Branch does not need rebasing`);\n  return { reuseExistingBranch: true, isModified: false };\n}\n"]}