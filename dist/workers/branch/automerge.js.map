{"version":3,"file":"automerge.js","sourceRoot":"","sources":["../../../lib/workers/branch/automerge.ts"],"names":[],"mappings":";;;AACA,yCAAsC;AACtC,6CAA0C;AAC1C,uCAA2C;AAC3C,wCAA6C;AAUtC,KAAK,UAAU,kBAAkB,CACtC,MAAsB;IAEtB,eAAM,CAAC,KAAK,CAAC,qCAAqC,CAAC,CAAC;IACpD,IAAI,CAAC,CAAC,MAAM,CAAC,SAAS,IAAI,MAAM,CAAC,aAAa,KAAK,QAAQ,CAAC,EAAE;QAC5D,OAAO,cAAc,CAAC;KACvB;IACD,MAAM,UAAU,GAAG,MAAM,mBAAQ,CAAC,WAAW,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;IACjE,IAAI,UAAU,EAAE;QACd,OAAO,+BAA+B,CAAC;KACxC;IACD,MAAM,YAAY,GAAG,MAAM,mBAAQ,CAAC,eAAe,CACjD,MAAM,CAAC,UAAU,EACjB,MAAM,CAAC,oBAAoB,CAC5B,CAAC;IACF,IAAI,YAAY,KAAK,oBAAY,CAAC,KAAK,EAAE;QACvC,eAAM,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC;QACnC,IAAI;YACF,IAAI,MAAM,CAAC,MAAM,EAAE;gBACjB,eAAM,CAAC,IAAI,CAAC,iCAAiC,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC;aACpE;iBAAM;gBACL,MAAM,iBAAW,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;aACtC;YACD,eAAM,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,MAAM,CAAC,UAAU,EAAE,EAAE,mBAAmB,CAAC,CAAC;YAChE,OAAO,YAAY,CAAC,CAAC,0BAA0B;SAChD;QAAC,OAAO,GAAG,EAAE;YACZ,qBAAqB;YACrB,IAAI,GAAG,CAAC,OAAO,KAAK,WAAW,EAAE;gBAC/B,eAAM,CAAC,KAAK,CAAC,mCAAmC,CAAC,CAAC;gBAClD,OAAO,WAAW,CAAC;aACpB;YACD,eAAM,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,EAAE,4BAA4B,CAAC,CAAC;YACnD,OAAO,QAAQ,CAAC;SACjB;KACF;SAAM,IAAI,YAAY,KAAK,oBAAY,CAAC,GAAG,EAAE;QAC5C,OAAO,qBAAqB,CAAC;KAC9B;SAAM;QACL,eAAM,CAAC,KAAK,CAAC,qBAAqB,YAAY,wBAAwB,CAAC,CAAC;KACzE;IACD,OAAO,cAAc,CAAC;AACxB,CAAC;AAxCD,gDAwCC","sourcesContent":["import { RenovateConfig } from '../../config';\nimport { logger } from '../../logger';\nimport { platform } from '../../platform';\nimport { BranchStatus } from '../../types';\nimport { mergeBranch } from '../../util/git';\n\nexport type AutomergeResult =\n  | 'automerged'\n  | 'automerge aborted - PR exists'\n  | 'branch status error'\n  | 'failed'\n  | 'no automerge'\n  | 'not ready';\n\nexport async function tryBranchAutomerge(\n  config: RenovateConfig\n): Promise<AutomergeResult> {\n  logger.debug('Checking if we can automerge branch');\n  if (!(config.automerge && config.automergeType === 'branch')) {\n    return 'no automerge';\n  }\n  const existingPr = await platform.getBranchPr(config.branchName);\n  if (existingPr) {\n    return 'automerge aborted - PR exists';\n  }\n  const branchStatus = await platform.getBranchStatus(\n    config.branchName,\n    config.requiredStatusChecks\n  );\n  if (branchStatus === BranchStatus.green) {\n    logger.debug(`Automerging branch`);\n    try {\n      if (config.dryRun) {\n        logger.info('DRY-RUN: Would automerge branch' + config.branchName);\n      } else {\n        await mergeBranch(config.branchName);\n      }\n      logger.info({ branch: config.branchName }, 'Branch automerged');\n      return 'automerged'; // Branch no longer exists\n    } catch (err) {\n      // istanbul ignore if\n      if (err.message === 'not ready') {\n        logger.debug('Branch is not ready for automerge');\n        return 'not ready';\n      }\n      logger.info({ err }, `Failed to automerge branch`);\n      return 'failed';\n    }\n  } else if (branchStatus === BranchStatus.red) {\n    return 'branch status error';\n  } else {\n    logger.debug(`Branch status is \"${branchStatus}\" - skipping automerge`);\n  }\n  return 'no automerge';\n}\n"]}