{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/util/git/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { join } from 'path';\nimport URL from 'url';\nimport fs from 'fs-extra';\nimport Git, {\n  DiffResult as DiffResult_,\n  Options,\n  ResetMode,\n  SimpleGit,\n  StatusResult as StatusResult_,\n} from 'simple-git';\nimport {\n  CONFIG_VALIDATION,\n  REPOSITORY_CHANGED,\n  REPOSITORY_EMPTY,\n  REPOSITORY_TEMPORARY_ERROR,\n  SYSTEM_INSUFFICIENT_DISK_SPACE,\n} from '../../constants/error-messages';\nimport { logger } from '../../logger';\nimport { ExternalHostError } from '../../types/errors/external-host-error';\nimport * as limits from '../../workers/global/limits';\nimport { writePrivateKey } from './private-key';\n\nexport * from './private-key';\n\ndeclare module 'fs-extra' {\n  export function exists(pathLike: string): Promise<boolean>;\n}\n\nexport type StatusResult = StatusResult_;\n\nexport type DiffResult = DiffResult_;\n\ninterface StorageConfig {\n  localDir: string;\n  currentBranch?: string;\n  url: string;\n  extraCloneOpts?: Options;\n  gitAuthorName?: string;\n  gitAuthorEmail?: string;\n}\n\ninterface LocalConfig extends StorageConfig {\n  currentBranch: string;\n  currentBranchSha: string;\n  branchExists: Record<string, boolean>;\n  branchIsModified: Record<string, boolean>;\n  branchPrefix: string;\n}\n\n// istanbul ignore next\nfunction checkForPlatformFailure(err: Error): void {\n  if (process.env.NODE_ENV === 'test') {\n    return;\n  }\n  const platformFailureStrings = [\n    'remote: Invalid username or password',\n    'gnutls_handshake() failed',\n    'The requested URL returned error: 5',\n    'The remote end hung up unexpectedly',\n    'access denied or repository not exported',\n    'Could not write new index file',\n    'Failed to connect to',\n    'Connection timed out',\n  ];\n  for (const errorStr of platformFailureStrings) {\n    if (err.message.includes(errorStr)) {\n      logger.debug({ err }, 'Converting git error to ExternalHostError');\n      throw new ExternalHostError(err, 'git');\n    }\n  }\n}\n\nfunction localName(branchName: string): string {\n  return branchName.replace(/^origin\\//, '');\n}\n\nfunction throwBranchValidationError(branchName: string): never {\n  const error = new Error(CONFIG_VALIDATION);\n  error.validationError = 'branch not found';\n  error.validationMessage =\n    'The following branch could not be found: ' + branchName;\n  throw error;\n}\n\nasync function isDirectory(dir: string): Promise<boolean> {\n  try {\n    return (await fs.stat(dir)).isDirectory();\n  } catch (err) {\n    return false;\n  }\n}\n\nasync function getDefaultBranch(git: SimpleGit): Promise<string> {\n  // see https://stackoverflow.com/a/44750379/1438522\n  try {\n    const res = await git.raw(['symbolic-ref', 'refs/remotes/origin/HEAD']);\n    return res.replace('refs/remotes/origin/', '').trim();\n  } catch (err) /* istanbul ignore next */ {\n    checkForPlatformFailure(err);\n    if (\n      err.message.startsWith(\n        'fatal: ref refs/remotes/origin/HEAD is not a symbolic ref'\n      )\n    ) {\n      throw new Error(REPOSITORY_EMPTY);\n    }\n    throw err;\n  }\n}\n\nlet config: LocalConfig = {} as any;\n\nlet git: SimpleGit | undefined;\n\nlet privateKeySet = false;\n\nasync function resetToBranch(branchName: string): Promise<void> {\n  logger.debug(`resetToBranch(${branchName})`);\n  await git.raw(['reset', '--hard']);\n  await git.checkout(branchName);\n  await git.raw(['reset', '--hard', 'origin/' + branchName]);\n  await git.raw(['clean', '-fd']);\n}\n\nasync function deleteLocalBranch(branchName: string): Promise<void> {\n  await git.branch(['-D', branchName]);\n}\n\nasync function cleanLocalBranches(): Promise<void> {\n  const existingBranches = (await git.raw(['branch']))\n    .split('\\n')\n    .map((branch) => branch.trim())\n    .filter((branch) => branch.length)\n    .filter((branch) => !branch.startsWith('* '));\n  logger.debug({ existingBranches });\n  for (const branchName of existingBranches) {\n    await deleteLocalBranch(branchName);\n  }\n}\n\n/*\n * When we initially clone, we clone only the default branch so how no knowledge of other branches existing.\n * By calling this function once the repo's branchPrefix is known, we can fetch all of Renovate's branches in one command.\n */\nexport async function setBranchPrefix(branchPrefix: string): Promise<void> {\n  logger.debug('Setting branchPrefix: ' + branchPrefix);\n  config.branchPrefix = branchPrefix;\n  const ref = `refs/heads/${branchPrefix}*:refs/remotes/origin/${branchPrefix}*`;\n  try {\n    await git.fetch(['origin', ref, '--depth=2', '--force']);\n  } catch (err) /* istanbul ignore next */ {\n    checkForPlatformFailure(err);\n    throw err;\n  }\n}\n\nexport async function getSubmodules(): Promise<string[]> {\n  return (\n    (await git.raw([\n      'config',\n      '--file',\n      '.gitmodules',\n      '--get-regexp',\n      'path',\n    ])) || ''\n  )\n    .trim()\n    .split(/[\\n\\s]/)\n    .filter((_e: string, i: number) => i % 2);\n}\n\nexport async function syncGit(): Promise<void> {\n  if (git) {\n    return;\n  }\n  logger.debug('Initializing git repository into ' + config.localDir);\n  const gitHead = join(config.localDir, '.git/HEAD');\n  let clone = true;\n\n  if (await fs.exists(gitHead)) {\n    try {\n      git = Git(config.localDir).silent(true);\n      await git.raw(['remote', 'set-url', 'origin', config.url]);\n      const fetchStart = Date.now();\n      await git.fetch(['--depth=10']);\n      config.currentBranch =\n        config.currentBranch || (await getDefaultBranch(git));\n      await resetToBranch(config.currentBranch);\n      await cleanLocalBranches();\n      await git.raw(['remote', 'prune', 'origin']);\n      const durationMs = Math.round(Date.now() - fetchStart);\n      logger.debug({ durationMs }, 'git fetch completed');\n      clone = false;\n    } catch (err) /* istanbul ignore next */ {\n      logger.error({ err }, 'git fetch error');\n    }\n  }\n  if (clone) {\n    await fs.emptyDir(config.localDir);\n    git = Git(config.localDir).silent(true);\n    const cloneStart = Date.now();\n    try {\n      // clone only the default branch\n      let opts = ['--depth=2'];\n      if (config.extraCloneOpts) {\n        opts = opts.concat(\n          Object.entries(config.extraCloneOpts).map((e) => `${e[0]}=${e[1]}`)\n        );\n      }\n      await git.clone(config.url, '.', opts);\n    } catch (err) /* istanbul ignore next */ {\n      logger.debug({ err }, 'git clone error');\n      if (err.message?.includes('No space left on device')) {\n        throw new Error(SYSTEM_INSUFFICIENT_DISK_SPACE);\n      }\n      throw new ExternalHostError(err, 'git');\n    }\n    const durationMs = Math.round(Date.now() - cloneStart);\n    logger.debug({ durationMs }, 'git clone completed');\n  }\n  const submodules = await getSubmodules();\n  for (const submodule of submodules) {\n    try {\n      logger.debug(`Cloning git submodule at ${submodule}`);\n      await git.submoduleUpdate(['--init', '--', submodule]);\n    } catch (err) {\n      logger.warn(`Unable to initialise git submodule at ${submodule}`);\n    }\n  }\n  try {\n    const latestCommitDate = (await git.log({ n: 1 })).latest.date;\n    logger.debug({ latestCommitDate }, 'latest commit');\n  } catch (err) /* istanbul ignore next */ {\n    checkForPlatformFailure(err);\n    if (err.message.includes('does not have any commits yet')) {\n      throw new Error(REPOSITORY_EMPTY);\n    }\n    logger.warn({ err }, 'Cannot retrieve latest commit date');\n  }\n  try {\n    const { gitAuthorName, gitAuthorEmail } = config;\n    if (gitAuthorName) {\n      logger.debug({ gitAuthorName }, 'Setting git author name');\n      await git.raw(['config', 'user.name', gitAuthorName]);\n    }\n    if (gitAuthorEmail) {\n      logger.debug({ gitAuthorEmail }, 'Setting git author email');\n      await git.raw(['config', 'user.email', gitAuthorEmail]);\n    }\n  } catch (err) /* istanbul ignore next */ {\n    checkForPlatformFailure(err);\n    logger.debug({ err }, 'Error setting git author config');\n    throw new Error(REPOSITORY_TEMPORARY_ERROR);\n  }\n\n  config.currentBranch = config.currentBranch || (await getDefaultBranch(git));\n}\n\nexport async function initRepo(args: StorageConfig): Promise<void> {\n  config = { ...args } as any;\n  config.branchExists = {};\n  config.branchIsModified = {};\n  git = undefined;\n  await syncGit();\n}\n\n// istanbul ignore next\nexport function getRepoStatus(): Promise<StatusResult> {\n  return git.status();\n}\n\nexport async function createBranch(\n  branchName: string,\n  sha: string\n): Promise<void> {\n  logger.debug(`createBranch(${branchName})`);\n  await git.reset(ResetMode.HARD);\n  await git.raw(['clean', '-fd']);\n  await git.checkout(['-B', branchName, sha]);\n  await git.push('origin', branchName, { '--force': true });\n  config.branchExists[branchName] = true;\n  config.branchIsModified[branchName] = false;\n}\n\nexport async function branchExists(branchName: string): Promise<boolean> {\n  // First check cache\n  if (config.branchExists[branchName] !== undefined) {\n    return config.branchExists[branchName];\n  }\n  if (!branchName.startsWith(config.branchPrefix)) {\n    // fetch the branch only if it's not part of the existing branchPrefix\n    try {\n      await git.raw(['remote', 'set-branches', '--add', 'origin', branchName]);\n      await git.fetch(['origin', branchName, '--depth=2']);\n    } catch (err) {\n      checkForPlatformFailure(err);\n    }\n  }\n  try {\n    await git.raw(['show-branch', 'origin/' + branchName]);\n    config.branchExists[branchName] = true;\n    return true;\n  } catch (err) {\n    checkForPlatformFailure(err);\n    config.branchExists[branchName] = false;\n    return false;\n  }\n}\n\n// Return the commit SHA for a branch\nexport async function getBranchCommit(branchName: string): Promise<string> {\n  if (!(await branchExists(branchName))) {\n    throw Error(\n      'Cannot fetch commit for branch that does not exist: ' + branchName\n    );\n  }\n  const res = await git.revparse(['origin/' + branchName]);\n  return res.trim();\n}\n\nexport async function getCommitMessages(): Promise<string[]> {\n  logger.debug('getCommitMessages');\n  const res = await git.log({\n    n: 10,\n    format: { message: '%s' },\n  });\n  return res.all.map((commit) => commit.message);\n}\n\nexport async function setBranch(branchName: string): Promise<string> {\n  if (!(await branchExists(branchName))) {\n    throwBranchValidationError(branchName);\n  }\n  logger.debug(`Setting current branch to ${branchName}`);\n  try {\n    config.currentBranch = branchName;\n    config.currentBranchSha = (\n      await git.raw(['rev-parse', 'origin/' + branchName])\n    ).trim();\n    await git.checkout([branchName, '-f']);\n    const latestCommitDate = (await git.log({ n: 1 }))?.latest?.date;\n    if (latestCommitDate) {\n      logger.debug({ branchName, latestCommitDate }, 'latest commit');\n    }\n    await git.reset(ResetMode.HARD);\n    return config.currentBranchSha;\n  } catch (err) /* istanbul ignore next */ {\n    checkForPlatformFailure(err);\n    if (\n      err.message.includes(\n        'unknown revision or path not in the working tree'\n      ) ||\n      err.message.includes('did not match any file(s) known to git')\n    ) {\n      throwBranchValidationError(branchName);\n    }\n    throw err;\n  }\n}\n\nexport async function getFileList(): Promise<string[]> {\n  const branch = config.currentBranch;\n  const submodules = await getSubmodules();\n  const files: string = await git.raw(['ls-tree', '-r', branch]);\n  // istanbul ignore if\n  if (!files) {\n    return [];\n  }\n  return files\n    .split('\\n')\n    .filter(Boolean)\n    .filter((line) => line.startsWith('100'))\n    .map((line) => line.split(/\\t/).pop())\n    .filter((file: string) =>\n      submodules.every((submodule: string) => !file.startsWith(submodule))\n    );\n}\n\nexport async function getAllRenovateBranches(\n  branchPrefix: string\n): Promise<string[]> {\n  const branches = await git.branch(['--remotes', '--verbose']);\n  return branches.all\n    .map(localName)\n    .filter((branchName) => branchName.startsWith(branchPrefix));\n}\n\nexport async function isBranchStale(branchName: string): Promise<boolean> {\n  if (!(await branchExists(branchName))) {\n    throw Error(\n      'Cannot check staleness for branch that does not exist: ' + branchName\n    );\n  }\n  const branches = await git.branch([\n    '--remotes',\n    '--verbose',\n    '--contains',\n    config.currentBranchSha,\n  ]);\n  return !branches.all.map(localName).includes(branchName);\n}\n\nexport async function isBranchModified(branchName: string): Promise<boolean> {\n  // First check cache\n  if (config.branchIsModified[branchName] !== undefined) {\n    return config.branchIsModified[branchName];\n  }\n  if (!(await branchExists(branchName))) {\n    throw Error(\n      'Cannot check modification for branch that does not exist: ' + branchName\n    );\n  }\n  // Retrieve the author of the most recent commit\n  const lastAuthor = (\n    await git.raw(['log', '-1', '--pretty=format:%ae', `origin/${branchName}`])\n  ).trim();\n  const { gitAuthorEmail } = config;\n  if (\n    lastAuthor === process.env.RENOVATE_LEGACY_GIT_AUTHOR_EMAIL || // remove in next major release\n    lastAuthor === gitAuthorEmail\n  ) {\n    // author matches - branch has not been modified\n    config.branchIsModified[branchName] = false;\n    return false;\n  }\n  logger.debug(\n    { branchName, lastAuthor, gitAuthorEmail },\n    'Last commit author does not match git author email - branch has been modified'\n  );\n  config.branchIsModified[branchName] = true;\n  return true;\n}\n\nexport async function deleteBranch(branchName: string): Promise<void> {\n  try {\n    await git.raw(['push', '--delete', 'origin', branchName]);\n    logger.debug({ branchName }, 'Deleted remote branch');\n  } catch (err) /* istanbul ignore next */ {\n    checkForPlatformFailure(err);\n    logger.debug({ branchName }, 'No remote branch to delete');\n  }\n  try {\n    await deleteLocalBranch(branchName);\n    // istanbul ignore next\n    logger.debug({ branchName }, 'Deleted local branch');\n  } catch (err) {\n    checkForPlatformFailure(err);\n    logger.debug({ branchName }, 'No local branch to delete');\n  }\n  config.branchExists[branchName] = false;\n}\n\nexport async function mergeBranch(branchName: string): Promise<void> {\n  await git.reset(ResetMode.HARD);\n  await git.checkout(['-B', branchName, 'origin/' + branchName]);\n  await git.checkout(config.currentBranch);\n  await git.merge(['--ff-only', branchName]);\n  await git.push('origin', config.currentBranch);\n  limits.incrementLimit('prCommitsPerRunLimit');\n}\n\nexport async function getBranchLastCommitTime(\n  branchName: string\n): Promise<Date> {\n  try {\n    const time = await git.show(['-s', '--format=%ai', 'origin/' + branchName]);\n    return new Date(Date.parse(time));\n  } catch (err) {\n    checkForPlatformFailure(err);\n    return new Date();\n  }\n}\n\nexport async function getBranchFiles(branchName: string): Promise<string[]> {\n  try {\n    const diff = await git.diffSummary([branchName, config.currentBranch]);\n    return diff.files.map((file) => file.file);\n  } catch (err) /* istanbul ignore next */ {\n    checkForPlatformFailure(err);\n    return null;\n  }\n}\n\nexport async function getFile(\n  filePath: string,\n  branchName?: string\n): Promise<string | null> {\n  if (branchName) {\n    const exists = await branchExists(branchName);\n    if (!exists) {\n      logger.debug({ branchName }, 'branch no longer exists - aborting');\n      throw new Error(REPOSITORY_CHANGED);\n    }\n  }\n  try {\n    const content = await git.show([\n      'origin/' + (branchName || config.currentBranch) + ':' + filePath,\n    ]);\n    return content;\n  } catch (err) {\n    checkForPlatformFailure(err);\n    return null;\n  }\n}\n\nexport async function hasDiff(branchName: string): Promise<boolean> {\n  try {\n    return (await git.diff(['HEAD', branchName])) !== '';\n  } catch (err) {\n    return true;\n  }\n}\n\n/**\n * File to commit\n */\nexport interface File {\n  /**\n   * Relative file path\n   */\n  name: string;\n\n  /**\n   * file contents\n   */\n  contents: string | Buffer;\n}\n\nexport type CommitFilesConfig = {\n  branchName: string;\n  files: File[];\n  message: string;\n  force?: boolean;\n};\n\nexport async function commitFiles({\n  branchName,\n  files,\n  message,\n  force = false,\n}: CommitFilesConfig): Promise<string | null> {\n  logger.debug(`Committing files to branch ${branchName}`);\n  if (!privateKeySet) {\n    await writePrivateKey(config.localDir);\n    privateKeySet = true;\n  }\n  try {\n    await git.reset(ResetMode.HARD);\n    await git.raw(['clean', '-fd']);\n    await git.checkout(['-B', branchName, 'origin/' + config.currentBranch]);\n    const fileNames: string[] = [];\n    const deleted: string[] = [];\n    for (const file of files) {\n      // istanbul ignore if\n      if (file.name === '|delete|') {\n        deleted.push(file.contents as string);\n      } else if (await isDirectory(join(config.localDir, file.name))) {\n        fileNames.push(file.name);\n        await git.add(file.name);\n      } else {\n        fileNames.push(file.name);\n        let contents: Buffer;\n        // istanbul ignore else\n        if (typeof file.contents === 'string') {\n          contents = Buffer.from(file.contents);\n        } else {\n          contents = file.contents;\n        }\n        await fs.outputFile(join(config.localDir, file.name), contents);\n      }\n    }\n    // istanbul ignore if\n    if (fileNames.length === 1 && fileNames[0] === 'renovate.json') {\n      fileNames.unshift('-f');\n    }\n    if (fileNames.length) {\n      await git.add(fileNames);\n    }\n    if (deleted.length) {\n      for (const f of deleted) {\n        try {\n          await git.rm([f]);\n        } catch (err) /* istanbul ignore next */ {\n          checkForPlatformFailure(err);\n          logger.debug({ err }, 'Cannot delete ' + f);\n        }\n      }\n    }\n    const commitRes = await git.commit(message, [], {\n      '--no-verify': true,\n    });\n    const commit = commitRes?.commit || 'unknown';\n    if (!force && !(await hasDiff(`origin/${branchName}`))) {\n      logger.debug(\n        { branchName, fileNames },\n        'No file changes detected. Skipping commit'\n      );\n      return null;\n    }\n    await git.push('origin', `${branchName}:${branchName}`, {\n      '--force': true,\n      '-u': true,\n      '--no-verify': true,\n    });\n    // Fetch it after create\n    const ref = `refs/heads/${branchName}:refs/remotes/origin/${branchName}`;\n    await git.fetch(['origin', ref, '--depth=2', '--force']);\n    config.branchExists[branchName] = true;\n    config.branchIsModified[branchName] = false;\n    limits.incrementLimit('prCommitsPerRunLimit');\n    return commit;\n  } catch (err) /* istanbul ignore next */ {\n    checkForPlatformFailure(err);\n    if (\n      err.message.includes(\n        'refusing to allow a GitHub App to create or update workflow'\n      )\n    ) {\n      logger.warn(\n        'App has not been granted permissios to update Workflows - aborting branch.'\n      );\n      return null;\n    }\n    logger.debug({ err }, 'Error commiting files');\n    throw new Error(REPOSITORY_CHANGED);\n  }\n}\n\nexport function getUrl({\n  protocol,\n  auth,\n  hostname,\n  host,\n  repository,\n}: {\n  protocol?: 'ssh' | 'http' | 'https';\n  auth?: string;\n  hostname?: string;\n  host?: string;\n  repository: string;\n}): string {\n  if (protocol === 'ssh') {\n    return `git@${hostname}:${repository}.git`;\n  }\n  return URL.format({\n    protocol: protocol || 'https',\n    auth,\n    hostname,\n    host,\n    pathname: repository + '.git',\n  });\n}\n"]}