{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/util/cache/repository/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,6CAA+B;AAC/B,iCAA6B;AAE7B,4CAAyC;AAkBzC,IAAI,eAAe,GAA0B,UAAU,CAAC;AACxD,IAAI,aAAqB,CAAC;AAC1B,IAAI,KAAK,GAAU,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;AAErC,SAAgB,gBAAgB,CAAC,MAAsB;IACrD,OAAO,YAAI,CACT,MAAM,CAAC,QAAQ,EACf,uBAAuB,EACvB,MAAM,CAAC,QAAQ,EACf,MAAM,CAAC,UAAU,GAAG,OAAO,CAC5B,CAAC;AACJ,CAAC;AAPD,4CAOC;AAED,SAAS,QAAQ,CAAC,MAAsB,EAAE,KAAU;IAClD,IAAI,CAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,UAAU,MAAK,MAAM,CAAC,UAAU,EAAE;QAC3C,eAAM,CAAC,KAAK,CAAC,2BAA2B,CAAC,CAAC;QAC1C,OAAO,KAAc,CAAC;KACvB;IACD,eAAM,CAAC,IAAI,CAAC,8BAA8B,CAAC,CAAC;IAC5C,QAAQ;IACR,OAAO,IAAI,CAAC;AACd,CAAC;AAEM,KAAK,UAAU,UAAU,CAAC,MAAsB;IACrD,KAAK,GAAG,IAAI,CAAC;IACb,IAAI;QACF,aAAa,GAAG,gBAAgB,CAAC,MAAM,CAAC,CAAC;QACzC,eAAe,GAAG,MAAM,CAAC,eAAe,CAAC;QACzC,IAAI,eAAe,KAAK,SAAS,EAAE;YACjC,KAAK,GAAG,QAAQ,CACd,MAAM,EACN,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC,CACrD,CAAC;SACH;KACF;IAAC,OAAO,GAAG,EAAE;QACZ,eAAM,CAAC,KAAK,CAAC,EAAE,aAAa,EAAE,EAAE,4BAA4B,CAAC,CAAC;KAC/D;IACD,KAAK,GAAG,KAAK,IAAI,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IACnC,KAAK,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;AACvC,CAAC;AAhBD,gCAgBC;AAED,SAAgB,QAAQ;IACtB,KAAK,GAAG,KAAK,IAAI,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IACnC,OAAO,KAAK,CAAC;AACf,CAAC;AAHD,4BAGC;AAEM,KAAK,UAAU,QAAQ;IAC5B,IAAI,aAAa,IAAI,KAAK,IAAI,eAAe,KAAK,UAAU,EAAE;QAC5D,MAAM,EAAE,CAAC,UAAU,CAAC,aAAa,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;KAC3D;IACD,aAAa,GAAG,IAAI,CAAC;IACrB,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;AAC5B,CAAC;AAND,4BAMC","sourcesContent":["import * as fs from 'fs-extra';\nimport { join } from 'upath';\nimport { RenovateConfig, RepositoryCacheConfig } from '../../../config/common';\nimport { logger } from '../../../logger';\nimport { PackageFile } from '../../../manager/common';\n\nexport interface BaseBranchCache {\n  sha: string; // branch commit sha\n  configHash: string; // object hash of config\n  packageFiles: PackageFile[]; // extract result\n}\n\nexport interface Cache {\n  repository?: string;\n  init?: {\n    configFile: string;\n    contents: RenovateConfig;\n  };\n  scan?: Record<string, BaseBranchCache>;\n}\n\nlet repositoryCache: RepositoryCacheConfig = 'disabled';\nlet cacheFileName: string;\nlet cache: Cache = Object.create({});\n\nexport function getCacheFileName(config: RenovateConfig): string {\n  return join(\n    config.cacheDir,\n    '/renovate/repository/',\n    config.platform,\n    config.repository + '.json'\n  );\n}\n\nfunction validate(config: RenovateConfig, input: any): Cache | null {\n  if (input?.repository === config.repository) {\n    logger.debug('Repository cache is valid');\n    return input as Cache;\n  }\n  logger.info('Repository cache invalidated');\n  // reset\n  return null;\n}\n\nexport async function initialize(config: RenovateConfig): Promise<void> {\n  cache = null;\n  try {\n    cacheFileName = getCacheFileName(config);\n    repositoryCache = config.repositoryCache;\n    if (repositoryCache === 'enabled') {\n      cache = validate(\n        config,\n        JSON.parse(await fs.readFile(cacheFileName, 'utf8'))\n      );\n    }\n  } catch (err) {\n    logger.debug({ cacheFileName }, 'Repository cache not found');\n  }\n  cache = cache || Object.create({});\n  cache.repository = config.repository;\n}\n\nexport function getCache(): Cache {\n  cache = cache || Object.create({});\n  return cache;\n}\n\nexport async function finalize(): Promise<void> {\n  if (cacheFileName && cache && repositoryCache !== 'disabled') {\n    await fs.outputFile(cacheFileName, JSON.stringify(cache));\n  }\n  cacheFileName = null;\n  cache = Object.create({});\n}\n"]}