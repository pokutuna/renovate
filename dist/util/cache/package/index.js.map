{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/util/cache/package/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AACA,oDAAsC;AAEtC,kDAAoC;AACpC,oDAAsC;AAEtC,IAAI,UAAwB,CAAC;AAE7B,SAAS,YAAY,CAAC,SAAiB,EAAE,GAAW;IAClD,OAAO,WAAW,SAAS,KAAK,GAAG,EAAE,CAAC;AACxC,CAAC;AAED,SAAgB,GAAG,CAAU,SAAiB,EAAE,GAAW;IACzD,IAAI,CAAC,UAAU,EAAE;QACf,OAAO,SAAS,CAAC;KAClB;IACD,MAAM,SAAS,GAAG,YAAY,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;IAC/C,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE;QAC5B,QAAQ,CAAC,GAAG,CAAC,SAAS,EAAE,UAAU,CAAC,GAAG,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC,CAAC;KACzD;IACD,OAAO,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;AACjC,CAAC;AATD,kBASC;AAED,SAAgB,GAAG,CACjB,SAAiB,EACjB,GAAW,EACX,KAAU,EACV,OAAe;IAEf,IAAI,CAAC,UAAU,EAAE;QACf,OAAO,SAAS,CAAC;KAClB;IACD,MAAM,SAAS,GAAG,YAAY,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;IAC/C,QAAQ,CAAC,GAAG,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;IAC/B,OAAO,UAAU,CAAC,GAAG,CAAC,SAAS,EAAE,GAAG,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;AACxD,CAAC;AAZD,kBAYC;AAED,SAAgB,IAAI,CAAC,MAAsB;IACzC,IAAI,MAAM,CAAC,QAAQ,EAAE;QACnB,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QACjC,UAAU,GAAG;YACX,GAAG,EAAE,UAAU,CAAC,GAAG;YACnB,GAAG,EAAE,UAAU,CAAC,GAAG;SACpB,CAAC;KACH;SAAM;QACL,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QAChC,UAAU,GAAG;YACX,GAAG,EAAE,SAAS,CAAC,GAAG;YAClB,GAAG,EAAE,SAAS,CAAC,GAAG;SACnB,CAAC;KACH;AACH,CAAC;AAdD,oBAcC;AAED,SAAgB,OAAO,CAAC,MAAsB;IAC5C,IAAI,MAAM,CAAC,QAAQ,EAAE;QACnB,UAAU,CAAC,GAAG,EAAE,CAAC;KAClB;AACH,CAAC;AAJD,0BAIC","sourcesContent":["import { RenovateConfig } from '../../../config/common';\nimport * as memCache from '../memory';\nimport { PackageCache } from './common';\nimport * as fileCache from './file';\nimport * as redisCache from './redis';\n\nlet cacheProxy: PackageCache;\n\nfunction getGlobalKey(namespace: string, key: string): string {\n  return `global%%${namespace}%%${key}`;\n}\n\nexport function get<T = any>(namespace: string, key: string): Promise<T> {\n  if (!cacheProxy) {\n    return undefined;\n  }\n  const globalKey = getGlobalKey(namespace, key);\n  if (!memCache.get(globalKey)) {\n    memCache.set(globalKey, cacheProxy.get(namespace, key));\n  }\n  return memCache.get(globalKey);\n}\n\nexport function set(\n  namespace: string,\n  key: string,\n  value: any,\n  minutes: number\n): Promise<void> {\n  if (!cacheProxy) {\n    return undefined;\n  }\n  const globalKey = getGlobalKey(namespace, key);\n  memCache.set(globalKey, value);\n  return cacheProxy.set(namespace, key, value, minutes);\n}\n\nexport function init(config: RenovateConfig): void {\n  if (config.redisUrl) {\n    redisCache.init(config.redisUrl);\n    cacheProxy = {\n      get: redisCache.get,\n      set: redisCache.set,\n    };\n  } else {\n    fileCache.init(config.cacheDir);\n    cacheProxy = {\n      get: fileCache.get,\n      set: fileCache.set,\n    };\n  }\n}\n\nexport function cleanup(config: RenovateConfig): void {\n  if (config.redisUrl) {\n    redisCache.end();\n  }\n}\n"]}