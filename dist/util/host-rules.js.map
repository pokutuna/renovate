{"version":3,"file":"host-rules.js","sourceRoot":"","sources":["../../lib/util/host-rules.ts"],"names":[],"mappings":"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","sourcesContent":["import URL from 'url';\nimport merge from 'deepmerge';\nimport { logger } from '../logger';\nimport { HostRule } from '../types';\nimport * as sanitize from './sanitize';\n\nlet hostRules: HostRule[] = [];\n\nexport function add(params: HostRule): void {\n  if (params.domainName && params.hostName) {\n    throw new Error('hostRules cannot contain both a domainName and hostName');\n  }\n  if (params.domainName && params.baseUrl) {\n    throw new Error('hostRules cannot contain both a domainName and baseUrl');\n  }\n  if (params.hostName && params.baseUrl) {\n    throw new Error('hostRules cannot contain both a hostName and baseUrl');\n  }\n  hostRules.push(params);\n  const confidentialFields = ['password', 'token'];\n  confidentialFields.forEach((field) => {\n    const secret = params[field];\n    if (secret && secret.length > 3) {\n      sanitize.add(secret);\n    }\n  });\n  if (params.username && params.password) {\n    const secret = Buffer.from(\n      `${params.username}:${params.password}`\n    ).toString('base64');\n    sanitize.add(secret);\n  }\n}\n\nexport interface HostRuleSearch {\n  hostType?: string;\n  url?: string;\n}\n\nfunction isEmptyRule(rule: HostRule): boolean {\n  return !rule.hostType && !rule.domainName && !rule.hostName && !rule.baseUrl;\n}\n\nfunction isHostTypeRule(rule: HostRule): boolean {\n  return rule.hostType && !rule.domainName && !rule.hostName && !rule.baseUrl;\n}\n\nfunction isDomainNameRule(rule: HostRule): boolean {\n  return !rule.hostType && !!rule.domainName;\n}\n\nfunction isHostNameRule(rule: HostRule): boolean {\n  return !rule.hostType && !!rule.hostName;\n}\n\nfunction isBaseUrlRule(rule: HostRule): boolean {\n  return !rule.hostType && !!rule.baseUrl;\n}\n\nfunction isMultiRule(rule: HostRule): boolean {\n  return rule.hostType && !!(rule.domainName || rule.hostName || rule.baseUrl);\n}\n\nfunction matchesHostType(rule: HostRule, search: HostRuleSearch): boolean {\n  return rule.hostType === search.hostType;\n}\n\nfunction matchesDomainName(rule: HostRule, search: HostRuleSearch): boolean {\n  const hostname = search.url && URL.parse(search.url).hostname;\n  return (\n    search.url &&\n    rule.domainName &&\n    hostname &&\n    hostname.endsWith(rule.domainName)\n  );\n}\n\nfunction matchesHostName(rule: HostRule, search: HostRuleSearch): boolean {\n  return (\n    search.url &&\n    rule.hostName &&\n    URL.parse(search.url).hostname === rule.hostName\n  );\n}\n\nfunction matchesBaseUrl(rule: HostRule, search: HostRuleSearch): boolean {\n  return search.url && rule.baseUrl && search.url.startsWith(rule.baseUrl);\n}\n\nexport function find(search: HostRuleSearch): HostRule {\n  if (!(search.hostType || search.url)) {\n    logger.warn({ search }, 'Invalid hostRules search');\n    return {};\n  }\n  let res = ({} as any) as HostRule;\n  // First, apply empty rule matches\n  hostRules\n    .filter((rule) => isEmptyRule(rule))\n    .forEach((rule) => {\n      res = merge(res, rule);\n    });\n  // Next, find hostType-only matches\n  hostRules\n    .filter((rule) => isHostTypeRule(rule) && matchesHostType(rule, search))\n    .forEach((rule) => {\n      res = merge(res, rule);\n    });\n  // Next, find domainName-only matches\n  hostRules\n    .filter((rule) => isDomainNameRule(rule) && matchesDomainName(rule, search))\n    .forEach((rule) => {\n      res = merge(res, rule);\n    });\n  // Next, find hostName-only matches\n  hostRules\n    .filter((rule) => isHostNameRule(rule) && matchesHostName(rule, search))\n    .forEach((rule) => {\n      res = merge(res, rule);\n    });\n  // Next, find baseUrl-only matches\n  hostRules\n    .filter((rule) => isBaseUrlRule(rule) && matchesBaseUrl(rule, search))\n    .forEach((rule) => {\n      res = merge(res, rule);\n    });\n  // Finally, find combination matches\n  hostRules\n    .filter(\n      (rule) =>\n        isMultiRule(rule) &&\n        matchesHostType(rule, search) &&\n        (matchesDomainName(rule, search) ||\n          matchesHostName(rule, search) ||\n          matchesBaseUrl(rule, search))\n    )\n    .forEach((rule) => {\n      res = merge(res, rule);\n    });\n  delete res.hostType;\n  delete res.domainName;\n  delete res.hostName;\n  delete res.baseUrl;\n  return res;\n}\n\nexport function hosts({ hostType }: { hostType: string }): string[] {\n  return hostRules\n    .filter((rule) => rule.hostType === hostType)\n    .map((rule) => {\n      if (rule.hostName) {\n        return rule.hostName;\n      }\n      if (rule.baseUrl) {\n        return URL.parse(rule.baseUrl).hostname;\n      }\n      return null;\n    })\n    .filter(Boolean);\n}\n\nexport function findAll({ hostType }: { hostType: string }): HostRule[] {\n  return hostRules.filter((rule) => rule.hostType === hostType);\n}\n\nexport function clear(): void {\n  hostRules = [];\n  sanitize.clear();\n}\n"]}