{"version":3,"file":"index.js","sourceRoot":"","sources":["../../lib/util/index.ts"],"names":[],"mappings":";;;;;;AAAA,sDAA6B;AAC7B,iCAA6B;AAE7B,iCAAuC;AACvC,6BAAmC;AAE5B,KAAK,UAAU,aAAa,CACjC,MAA+B;IAE/B,MAAM,oBAAa,CAAC,MAAM,CAAC,CAAC;IAC5B,gBAAW,CAAC,MAAM,CAAC,CAAC;AACtB,CAAC;AALD,sCAKC;AAED;;;GAGG;AACI,KAAK,UAAU,WAAW,CAAC,IAAY;IAC5C,MAAM,GAAG,GAAG,MAAM,iBAAM,CAAC,cAAc,EAAE,EAAE,GAAG,EAAE,SAAS,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC;IAC3E,qBAAqB;IACrB,IAAI,CAAC,GAAG,EAAE;QACR,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;KACzC;IACD,OAAO,YAAI,CAAC,GAAG,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;AAChC,CAAC;AAPD,kCAOC;AAED,SAAgB,UAAU,CAAC,KAAe,EAAE,CAAS;IACnD,MAAM,MAAM,GAAG,KAAK,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC;IAChD,IAAI,CAAC,MAAM,IAAI,CAAC,GAAG,CAAC,EAAE;QACpB,OAAO,EAAE,CAAC;KACX;IACD,6CAA6C;IAC7C,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5B,IAAI,KAAK,GAAG,CAAC,CAAC;IACd,MAAM,SAAS,GAAG,MAAM,GAAG,CAAC,CAAC;IAC7B,MAAM,MAAM,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC;IAC1B,OAAO,KAAK,GAAG,CAAC,EAAE;QAChB,MAAM,IAAI,GAAG,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,SAAS,GAAG,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC;QACzE,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;QAC9D,KAAK,IAAI,CAAC,CAAC;KACZ;IACD,OAAO,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAC5B,CAAC;AAhBD,gCAgBC","sourcesContent":["import findUp from 'find-up';\nimport { join } from 'upath';\nimport { RenovateConfig } from '../config/common';\nimport { setExecConfig } from './exec';\nimport { setFsConfig } from './fs';\n\nexport async function setUtilConfig(\n  config: Partial<RenovateConfig>\n): Promise<void> {\n  await setExecConfig(config);\n  setFsConfig(config);\n}\n\n/**\n * Resolve path for a file relative to renovate root directory (our package.json)\n * @param file a file to resolve\n */\nexport async function resolveFile(file: string): Promise<string> {\n  const pkg = await findUp('package.json', { cwd: __dirname, type: 'file' });\n  // istanbul ignore if\n  if (!pkg) {\n    throw new Error('Missing package.json');\n  }\n  return join(pkg, '../', file);\n}\n\nexport function sampleSize(array: string[], n: number): string[] {\n  const length = array == null ? 0 : array.length;\n  if (!length || n < 1) {\n    return [];\n  }\n  // eslint-disable-next-line no-param-reassign\n  n = n > length ? length : n;\n  let index = 0;\n  const lastIndex = length - 1;\n  const result = [...array];\n  while (index < n) {\n    const rand = index + Math.floor(Math.random() * (lastIndex - index + 1));\n    [result[rand], result[index]] = [result[index], result[rand]];\n    index += 1;\n  }\n  return result.slice(0, n);\n}\n"]}