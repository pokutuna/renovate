{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/util/http/index.ts"],"names":[],"mappings":"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","sourcesContent":["import crypto from 'crypto';\nimport URL from 'url';\nimport got, { Options } from 'got';\nimport { HOST_DISABLED } from '../../constants/error-messages';\nimport { ExternalHostError } from '../../types/errors/external-host-error';\nimport * as memCache from '../cache/memory';\nimport { clone } from '../clone';\nimport { applyAuthorization, removeAuthorization } from './auth';\nimport { applyHostRules } from './host-rules';\nimport { GotOptions } from './types';\n\n// TODO: refactor code to remove this\nimport './legacy';\n\nexport * from './types';\n\ninterface OutgoingHttpHeaders {\n  [header: string]: number | string | string[] | undefined;\n}\n\nexport interface HttpOptions {\n  body?: any;\n  username?: string;\n  password?: string;\n  baseUrl?: string;\n  headers?: OutgoingHttpHeaders;\n  throwHttpErrors?: boolean;\n  useCache?: boolean;\n}\n\nexport interface HttpPostOptions extends HttpOptions {\n  body: unknown;\n}\n\nexport interface InternalHttpOptions extends HttpOptions {\n  json?: object;\n  responseType?: 'json';\n  method?: 'get' | 'post' | 'put' | 'patch' | 'delete' | 'head';\n}\n\nexport interface HttpResponse<T = string> {\n  body: T;\n  headers: any;\n}\n\nfunction cloneResponse<T>(response: any): HttpResponse<T> {\n  // clone body and headers so that the cached result doesn't get accidentally mutated\n  return {\n    body: clone<T>(response.body),\n    headers: clone(response.headers),\n  };\n}\n\nasync function resolveResponse<T>(\n  promisedRes: Promise<HttpResponse<T>>,\n  { abortOnError, abortIgnoreStatusCodes }: GotOptions\n): Promise<HttpResponse<T>> {\n  try {\n    const res = await promisedRes;\n    return cloneResponse(res);\n  } catch (err) {\n    if (abortOnError && !abortIgnoreStatusCodes?.includes(err.statusCode)) {\n      throw new ExternalHostError(err);\n    }\n    throw err;\n  }\n}\n\nfunction applyDefaultHeaders(options: Options): void {\n  // eslint-disable-next-line no-param-reassign\n  options.headers = {\n    // TODO: remove. Will be \"gzip, deflate, br\" by new got default\n    'accept-encoding': 'gzip, deflate',\n    ...options.headers,\n    'user-agent':\n      process.env.RENOVATE_USER_AGENT ||\n      'https://github.com/renovatebot/renovate',\n  };\n}\n\nexport class Http<GetOptions = HttpOptions, PostOptions = HttpPostOptions> {\n  constructor(private hostType: string, private options?: HttpOptions) {}\n\n  protected async request<T>(\n    requestUrl: string | URL,\n    httpOptions?: InternalHttpOptions\n  ): Promise<HttpResponse<T> | null> {\n    let url = requestUrl.toString();\n    if (httpOptions?.baseUrl) {\n      url = URL.resolve(httpOptions.baseUrl, url);\n    }\n    // TODO: deep merge in order to merge headers\n    let options: GotOptions = {\n      method: 'get',\n      ...this.options,\n      hostType: this.hostType,\n      ...httpOptions,\n    } as unknown; // TODO: fixme\n    if (process.env.NODE_ENV === 'test') {\n      options.retry = 0;\n    }\n    options.hooks = {\n      beforeRedirect: [removeAuthorization],\n    };\n\n    applyDefaultHeaders(options);\n\n    options = applyHostRules(url, options);\n    if (options.enabled === false) {\n      throw new Error(HOST_DISABLED);\n    }\n    options = applyAuthorization(options);\n\n    // Cache GET requests unless useCache=false\n    const cacheKey = crypto\n      .createHash('md5')\n      .update('got-' + JSON.stringify({ url, headers: options.headers }))\n      .digest('hex');\n    if (options.method === 'get' && options.useCache !== false) {\n      // return from cache if present\n      const cachedRes = memCache.get(cacheKey);\n      // istanbul ignore if\n      if (cachedRes) {\n        return resolveResponse<T>(cachedRes, options);\n      }\n    }\n    const startTime = Date.now();\n    const promisedRes = got<T>(url, options);\n    if (options.method === 'get') {\n      memCache.set(cacheKey, promisedRes); // always set if it's a get\n    }\n    const res = await resolveResponse<T>(promisedRes, options);\n    const httpRequests = memCache.get('http-requests') || [];\n    httpRequests.push({\n      method: options.method,\n      url,\n      duration: Date.now() - startTime,\n    });\n    memCache.set('http-requests', httpRequests);\n    return res;\n  }\n\n  get(url: string, options: HttpOptions = {}): Promise<HttpResponse> {\n    return this.request<string>(url, options);\n  }\n\n  head(url: string, options: HttpOptions = {}): Promise<HttpResponse> {\n    return this.request<string>(url, { ...options, method: 'head' });\n  }\n\n  private async requestJson<T = unknown>(\n    url: string,\n    options: InternalHttpOptions\n  ): Promise<HttpResponse<T>> {\n    const { body, ...jsonOptions } = options;\n    if (body) {\n      jsonOptions.json = body;\n    }\n    const res = await this.request<T>(url, {\n      ...jsonOptions,\n      responseType: 'json',\n    });\n    return { ...res, body: res.body };\n  }\n\n  getJson<T = unknown>(\n    url: string,\n    options?: GetOptions\n  ): Promise<HttpResponse<T>> {\n    return this.requestJson<T>(url, { ...options });\n  }\n\n  headJson<T = unknown>(\n    url: string,\n    options?: GetOptions\n  ): Promise<HttpResponse<T>> {\n    return this.requestJson<T>(url, { ...options, method: 'head' });\n  }\n\n  postJson<T = unknown>(\n    url: string,\n    options?: PostOptions\n  ): Promise<HttpResponse<T>> {\n    return this.requestJson<T>(url, { ...options, method: 'post' });\n  }\n\n  putJson<T = unknown>(\n    url: string,\n    options?: PostOptions\n  ): Promise<HttpResponse<T>> {\n    return this.requestJson<T>(url, { ...options, method: 'put' });\n  }\n\n  patchJson<T = unknown>(\n    url: string,\n    options?: PostOptions\n  ): Promise<HttpResponse<T>> {\n    return this.requestJson<T>(url, { ...options, method: 'patch' });\n  }\n\n  deleteJson<T = unknown>(\n    url: string,\n    options?: PostOptions\n  ): Promise<HttpResponse<T>> {\n    return this.requestJson<T>(url, { ...options, method: 'delete' });\n  }\n\n  stream(url: string, options?: HttpOptions): NodeJS.ReadableStream {\n    const combinedOptions: any = {\n      method: 'get',\n      ...this.options,\n      hostType: this.hostType,\n      ...options,\n    };\n\n    // istanbul ignore else: needs test\n    if (options?.baseUrl) {\n      // eslint-disable-next-line no-param-reassign\n      url = URL.resolve(options.baseUrl, url);\n    }\n\n    applyDefaultHeaders(combinedOptions);\n    return got.stream(url, combinedOptions);\n  }\n}\n"]}