{"version":3,"file":"bitbucket-server.js","sourceRoot":"","sources":["../../../lib/util/http/bitbucket-server.ts"],"names":[],"mappings":";;;;;;AAAA,8CAAsB;AACtB,yDAA2E;AAC3E,wBAAyE;AAEzE,IAAI,OAAe,CAAC;AACP,QAAA,UAAU,GAAG,CAAC,GAAW,EAAQ,EAAE;IAC9C,OAAO,GAAG,GAAG,CAAC;AAChB,CAAC,CAAC;AAEF,MAAa,mBAAoB,SAAQ,OAAI;IAC3C,YAAY,OAAqB;QAC/B,KAAK,CAAC,0CAA8B,EAAE,OAAO,CAAC,CAAC;IACjD,CAAC;IAES,OAAO,CACf,IAAY,EACZ,OAA6B;QAE7B,MAAM,GAAG,GAAG,aAAG,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QACvC,MAAM,IAAI,GAAG;YACX,OAAO;YACP,GAAG,OAAO;SACX,CAAC;QACF,IAAI,CAAC,OAAO,GAAG;YACb,GAAG,IAAI,CAAC,OAAO;YACf,mBAAmB,EAAE,UAAU;SAChC,CAAC;QACF,OAAO,KAAK,CAAC,OAAO,CAAI,GAAG,EAAE,IAAI,CAAC,CAAC;IACrC,CAAC;CACF;AApBD,kDAoBC","sourcesContent":["import URL from 'url';\nimport { PLATFORM_TYPE_BITBUCKET_SERVER } from '../../constants/platforms';\nimport { Http, HttpOptions, HttpResponse, InternalHttpOptions } from '.';\n\nlet baseUrl: string;\nexport const setBaseUrl = (url: string): void => {\n  baseUrl = url;\n};\n\nexport class BitbucketServerHttp extends Http {\n  constructor(options?: HttpOptions) {\n    super(PLATFORM_TYPE_BITBUCKET_SERVER, options);\n  }\n\n  protected request<T>(\n    path: string,\n    options?: InternalHttpOptions\n  ): Promise<HttpResponse<T> | null> {\n    const url = URL.resolve(baseUrl, path);\n    const opts = {\n      baseUrl,\n      ...options,\n    };\n    opts.headers = {\n      ...opts.headers,\n      'X-Atlassian-Token': 'no-check',\n    };\n    return super.request<T>(url, opts);\n  }\n}\n"]}