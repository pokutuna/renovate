{"version":3,"file":"bitbucket.js","sourceRoot":"","sources":["../../../lib/util/http/bitbucket.ts"],"names":[],"mappings":";;;AACA,yDAAoE;AACpE,wBAAyE;AAEzE,IAAI,OAAO,GAAG,4BAA4B,CAAC;AAC9B,QAAA,UAAU,GAAG,CAAC,GAAW,EAAQ,EAAE;IAC9C,OAAO,GAAG,GAAG,CAAC;AAChB,CAAC,CAAC;AAEF,MAAa,aAAc,SAAQ,OAAI;IACrC,YAAY,OAAqB;QAC/B,KAAK,CAAC,mCAAuB,EAAE,OAAO,CAAC,CAAC;IAC1C,CAAC;IAES,OAAO,CACf,GAAiB,EACjB,OAA6B;QAE7B,MAAM,IAAI,GAAG;YACX,OAAO;YACP,GAAG,OAAO;SACX,CAAC;QACF,OAAO,KAAK,CAAC,OAAO,CAAI,GAAG,EAAE,IAAI,CAAC,CAAC;IACrC,CAAC;CACF;AAfD,sCAeC","sourcesContent":["import { URL } from 'url';\nimport { PLATFORM_TYPE_BITBUCKET } from '../../constants/platforms';\nimport { Http, HttpOptions, HttpResponse, InternalHttpOptions } from '.';\n\nlet baseUrl = 'https://api.bitbucket.org/';\nexport const setBaseUrl = (url: string): void => {\n  baseUrl = url;\n};\n\nexport class BitbucketHttp extends Http {\n  constructor(options?: HttpOptions) {\n    super(PLATFORM_TYPE_BITBUCKET, options);\n  }\n\n  protected request<T>(\n    url: string | URL,\n    options?: InternalHttpOptions\n  ): Promise<HttpResponse<T> | null> {\n    const opts = {\n      baseUrl,\n      ...options,\n    };\n    return super.request<T>(url, opts);\n  }\n}\n"]}