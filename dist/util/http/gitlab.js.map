{"version":3,"file":"gitlab.js","sourceRoot":"","sources":["../../../lib/util/http/gitlab.ts"],"names":[],"mappings":";;;;;;AACA,0EAAgD;AAChD,yDAAiE;AACjE,yCAAsC;AACtC,gFAA2E;AAC3E,wBAA4D;AAE5D,IAAI,OAAO,GAAG,4BAA4B,CAAC;AAC9B,QAAA,UAAU,GAAG,CAAC,GAAW,EAAQ,EAAE;IAC9C,OAAO,GAAG,GAAG,CAAC;AAChB,CAAC,CAAC;AAWF,MAAa,UAAW,SAAQ,OAA0C;IACxE,YAAY,OAA2B;QACrC,KAAK,CAAC,gCAAoB,EAAE,OAAO,CAAC,CAAC;IACvC,CAAC;IAES,KAAK,CAAC,OAAO,CACrB,GAAiB,EACjB,OAAmD;QAEnD,IAAI,MAAM,GAAG,IAAI,CAAC;QAElB,MAAM,IAAI,GAAG;YACX,OAAO;YACP,GAAG,OAAO;YACV,eAAe,EAAE,IAAI;SACtB,CAAC;QAEF,IAAI;YACF,MAAM,GAAG,MAAM,KAAK,CAAC,OAAO,CAAI,GAAG,EAAE,IAAI,CAAC,CAAC;YAC3C,IAAI,IAAI,CAAC,QAAQ,EAAE;gBACjB,+BAA+B;gBAC/B,IAAI;oBACF,MAAM,UAAU,GAAG,2BAAe,CAAC,MAAM,CAAC,OAAO,CAAC,IAAc,CAAC,CAAC;oBAClE,IAAI,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,IAAI,EAAE;wBACpB,MAAM,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAC9B,CAAC,MAAM,IAAI,CAAC,OAAO,CAAI,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,IAAI,CACxD,CAAC;qBACH;iBACF;gBAAC,OAAO,GAAG,EAAE,0BAA0B,CAAC;oBACvC,eAAM,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,EAAE,kBAAkB,CAAC,CAAC;iBAC1C;aACF;YACD,OAAO,MAAM,CAAC;SACf;QAAC,OAAO,GAAG,EAAE;YACZ,IAAI,GAAG,CAAC,UAAU,KAAK,GAAG,EAAE;gBAC1B,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,EAAE,YAAY,CAAC,CAAC;gBACpC,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE,gBAAgB,CAAC,CAAC;gBACjD,MAAM,GAAG,CAAC;aACX;YACD,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,EAAE,kBAAkB,CAAC,CAAC;YAC1C,IACE,GAAG,CAAC,UAAU,KAAK,GAAG;gBACtB,CAAC,GAAG,CAAC,UAAU,IAAI,GAAG,IAAI,GAAG,CAAC,UAAU,GAAG,GAAG,CAAC,EAC/C;gBACA,MAAM,IAAI,uCAAiB,CAAC,GAAG,EAAE,gCAAoB,CAAC,CAAC;aACxD;YACD,MAAM,oBAAoB,GAAG;gBAC3B,WAAW;gBACX,YAAY;gBACZ,WAAW;gBACX,iCAAiC;aAClC,CAAC;YACF,IAAI,oBAAoB,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;gBAC3C,MAAM,IAAI,uCAAiB,CAAC,GAAG,EAAE,gCAAoB,CAAC,CAAC;aACxD;YACD,IAAI,GAAG,CAAC,IAAI,KAAK,YAAY,EAAE;gBAC7B,MAAM,IAAI,uCAAiB,CAAC,GAAG,EAAE,gCAAoB,CAAC,CAAC;aACxD;YACD,MAAM,GAAG,CAAC;SACX;IACH,CAAC;CACF;AA7DD,gCA6DC","sourcesContent":["import { URL } from 'url';\nimport parseLinkHeader from 'parse-link-header';\nimport { PLATFORM_TYPE_GITLAB } from '../../constants/platforms';\nimport { logger } from '../../logger';\nimport { ExternalHostError } from '../../types/errors/external-host-error';\nimport { Http, HttpResponse, InternalHttpOptions } from '.';\n\nlet baseUrl = 'https://gitlab.com/api/v4/';\nexport const setBaseUrl = (url: string): void => {\n  baseUrl = url;\n};\n\ninterface GitlabInternalOptions extends InternalHttpOptions {\n  body?: string;\n}\n\nexport interface GitlabHttpOptions extends InternalHttpOptions {\n  paginate?: boolean;\n  token?: string;\n}\n\nexport class GitlabHttp extends Http<GitlabHttpOptions, GitlabHttpOptions> {\n  constructor(options?: GitlabHttpOptions) {\n    super(PLATFORM_TYPE_GITLAB, options);\n  }\n\n  protected async request<T>(\n    url: string | URL,\n    options?: GitlabInternalOptions & GitlabHttpOptions\n  ): Promise<HttpResponse<T> | null> {\n    let result = null;\n\n    const opts = {\n      baseUrl,\n      ...options,\n      throwHttpErrors: true,\n    };\n\n    try {\n      result = await super.request<T>(url, opts);\n      if (opts.paginate) {\n        // Check if result is paginated\n        try {\n          const linkHeader = parseLinkHeader(result.headers.link as string);\n          if (linkHeader?.next) {\n            result.body = result.body.concat(\n              (await this.request<T>(linkHeader.next.url, opts)).body\n            );\n          }\n        } catch (err) /* istanbul ignore next */ {\n          logger.warn({ err }, 'Pagination error');\n        }\n      }\n      return result;\n    } catch (err) {\n      if (err.statusCode === 404) {\n        logger.trace({ err }, 'GitLab 404');\n        logger.debug({ url: err.url }, 'GitLab API 404');\n        throw err;\n      }\n      logger.debug({ err }, 'Gitlab API error');\n      if (\n        err.statusCode === 429 ||\n        (err.statusCode >= 500 && err.statusCode < 600)\n      ) {\n        throw new ExternalHostError(err, PLATFORM_TYPE_GITLAB);\n      }\n      const platformFailureCodes = [\n        'EAI_AGAIN',\n        'ECONNRESET',\n        'ETIMEDOUT',\n        'UNABLE_TO_VERIFY_LEAF_SIGNATURE',\n      ];\n      if (platformFailureCodes.includes(err.code)) {\n        throw new ExternalHostError(err, PLATFORM_TYPE_GITLAB);\n      }\n      if (err.name === 'ParseError') {\n        throw new ExternalHostError(err, PLATFORM_TYPE_GITLAB);\n      }\n      throw err;\n    }\n  }\n}\n"]}