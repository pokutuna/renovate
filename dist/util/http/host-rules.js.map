{"version":3,"file":"host-rules.js","sourceRoot":"","sources":["../../../lib/util/http/host-rules.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,yCAAsC;AACtC,uCAAuC;AACvC,yDAA2C;AAG3C,+BAA+B;AAE/B,SAAgB,cAAc,CAAC,GAAW,EAAE,SAAqB;;IAC/D,MAAM,OAAO,GAAG,EAAE,GAAG,SAAS,EAAE,CAAC;IACjC,MAAM,UAAU,GACd,SAAS,CAAC,IAAI,CAAC;QACb,QAAQ,EAAE,OAAO,CAAC,QAAQ;QAC1B,GAAG;KACJ,CAAC,IAAI,oDAAoD,CAAC,EAAE,CAAC;IAChE,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,UAAU,CAAC;IAC1D,IAAI,OAAA,OAAO,CAAC,OAAO,0CAAE,aAAa,KAAI,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC,KAAK,EAAE;QACvE,eAAM,CAAC,KAAK,CAAC,wCAAwC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;KAC1E;SAAM,IAAI,QAAQ,EAAE;QACnB,eAAM,CAAC,KAAK,CAAC,0CAA0C,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC3E,OAAO,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAC5B,OAAO,CAAC,QAAQ,GAAG,QAAQ,CAAC;KAC7B;SAAM,IAAI,KAAK,EAAE;QAChB,eAAM,CAAC,KAAK,CAAC,2CAA2C,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC5E,OAAO,CAAC,KAAK,GAAG,KAAK,CAAC;KACvB;SAAM,IAAI,OAAO,KAAK,KAAK,EAAE;QAC5B,OAAO,CAAC,OAAO,GAAG,KAAK,CAAC;KACzB;IACD,wBAAwB;IACxB,CAAC,cAAc,EAAE,wBAAwB,EAAE,SAAS,CAAC,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;QACtE,IAAI,UAAU,CAAC,KAAK,CAAC,EAAE;YACrB,OAAO,CAAC,KAAK,CAAC,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC;SACpC;IACH,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,gBAAQ,EAAE,IAAI,UAAU,CAAC,WAAW,KAAK,IAAI,EAAE;QAClD,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC;KACtB;IACD,OAAO,OAAO,CAAC;AACjB,CAAC;AA/BD,wCA+BC","sourcesContent":["import { logger } from '../../logger';\nimport { hasProxy } from '../../proxy';\nimport * as hostRules from '../host-rules';\nimport { GotOptions } from './types';\n\n// Apply host rules to requests\n\nexport function applyHostRules(url: string, inOptions: GotOptions): GotOptions {\n  const options = { ...inOptions };\n  const foundRules =\n    hostRules.find({\n      hostType: options.hostType,\n      url,\n    }) || /* istanbul ignore next: can only happen in tests */ {};\n  const { username, password, token, enabled } = foundRules;\n  if (options.headers?.authorization || options.password || options.token) {\n    logger.trace(`Authorization already set for host:  ${options.hostname}`);\n  } else if (password) {\n    logger.trace(`Applying Basic authentication for host ${options.hostname}`);\n    options.username = username;\n    options.password = password;\n  } else if (token) {\n    logger.trace(`Applying Bearer authentication for host ${options.hostname}`);\n    options.token = token;\n  } else if (enabled === false) {\n    options.enabled = false;\n  }\n  // Apply optional params\n  ['abortOnError', 'abortIgnoreStatusCodes', 'timeout'].forEach((param) => {\n    if (foundRules[param]) {\n      options[param] = foundRules[param];\n    }\n  });\n\n  if (!hasProxy() && foundRules.enableHttp2 === true) {\n    options.http2 = true;\n  }\n  return options;\n}\n"]}