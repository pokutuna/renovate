{"version":3,"file":"github.js","sourceRoot":"","sources":["../../../lib/util/http/github.ts"],"names":[],"mappings":"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","sourcesContent":["import URL from 'url';\nimport pAll from 'p-all';\nimport parseLinkHeader from 'parse-link-header';\nimport {\n  PLATFORM_BAD_CREDENTIALS,\n  PLATFORM_INTEGRATION_UNAUTHORIZED,\n  PLATFORM_RATE_LIMIT_EXCEEDED,\n  REPOSITORY_CHANGED,\n} from '../../constants/error-messages';\nimport { PLATFORM_TYPE_GITHUB } from '../../constants/platforms';\nimport { logger } from '../../logger';\nimport { ExternalHostError } from '../../types/errors/external-host-error';\nimport { maskToken } from '../mask';\nimport { GotLegacyError } from './legacy';\nimport { Http, HttpPostOptions, HttpResponse, InternalHttpOptions } from '.';\n\nlet baseUrl = 'https://api.github.com/';\nexport const setBaseUrl = (url: string): void => {\n  baseUrl = url;\n};\n\ninterface GithubInternalOptions extends InternalHttpOptions {\n  body?: string;\n}\n\nexport interface GithubHttpOptions extends InternalHttpOptions {\n  paginate?: boolean | string;\n  pageLimit?: number;\n  token?: string;\n}\n\ninterface GithubGraphqlResponse<T = unknown> {\n  data?: {\n    repository?: T;\n  };\n  errors?: { message: string; locations: unknown }[];\n}\n\nfunction handleGotError(\n  err: GotLegacyError,\n  url: string | URL,\n  opts: GithubHttpOptions\n): never {\n  const path = url.toString();\n  let message = err.message || '';\n  if (err.body?.message) {\n    message = err.body.message;\n  }\n  if (\n    err.name === 'RequestError' &&\n    (err.code === 'ENOTFOUND' ||\n      err.code === 'ETIMEDOUT' ||\n      err.code === 'EAI_AGAIN')\n  ) {\n    logger.debug({ err }, 'GitHub failure: RequestError');\n    throw new ExternalHostError(err, PLATFORM_TYPE_GITHUB);\n  }\n  if (err.name === 'ParseError') {\n    logger.debug({ err }, '');\n    throw new ExternalHostError(err, PLATFORM_TYPE_GITHUB);\n  }\n  if (err.statusCode >= 500 && err.statusCode < 600) {\n    logger.debug({ err }, 'GitHub failure: 5xx');\n    throw new ExternalHostError(err, PLATFORM_TYPE_GITHUB);\n  }\n  if (\n    err.statusCode === 403 &&\n    message.startsWith('You have triggered an abuse detection mechanism')\n  ) {\n    logger.debug({ err }, 'GitHub failure: abuse detection');\n    throw new Error(PLATFORM_RATE_LIMIT_EXCEEDED);\n  }\n  if (err.statusCode === 403 && message.includes('Upgrade to GitHub Pro')) {\n    logger.debug({ path }, 'Endpoint needs paid GitHub plan');\n    throw err;\n  }\n  if (err.statusCode === 403 && message.includes('rate limit exceeded')) {\n    logger.debug({ err }, 'GitHub failure: rate limit');\n    throw new Error(PLATFORM_RATE_LIMIT_EXCEEDED);\n  }\n  if (\n    err.statusCode === 403 &&\n    message.startsWith('Resource not accessible by integration')\n  ) {\n    logger.debug(\n      { err },\n      'GitHub failure: Resource not accessible by integration'\n    );\n    throw new Error(PLATFORM_INTEGRATION_UNAUTHORIZED);\n  }\n  if (err.statusCode === 401 && message.includes('Bad credentials')) {\n    const rateLimit = err.headers?.['x-ratelimit-limit'] ?? -1;\n    logger.debug(\n      {\n        token: maskToken(opts.token),\n        err,\n      },\n      'GitHub failure: Bad credentials'\n    );\n    if (rateLimit === '60') {\n      throw new ExternalHostError(err, PLATFORM_TYPE_GITHUB);\n    }\n    throw new Error(PLATFORM_BAD_CREDENTIALS);\n  }\n  if (err.statusCode === 422) {\n    if (\n      message.includes('Review cannot be requested from pull request author')\n    ) {\n      throw err;\n    } else if (err.body?.errors?.find((e: any) => e.code === 'invalid')) {\n      throw new Error(REPOSITORY_CHANGED);\n    }\n    logger.debug({ err }, '422 Error thrown from GitHub');\n    throw new ExternalHostError(err, PLATFORM_TYPE_GITHUB);\n  }\n  if (err.statusCode === 404) {\n    logger.debug({ url: err.options?.url }, 'GitHub 404');\n  } else {\n    logger.debug({ err }, 'Unknown GitHub error');\n  }\n  throw err;\n}\n\ninterface GraphqlOptions {\n  paginate?: boolean;\n  count?: number;\n  acceptHeader?: string;\n  fromEnd?: boolean;\n}\n\nfunction constructAcceptString(input?: any): string {\n  const defaultAccept = 'application/vnd.github.v3+json';\n  const acceptStrings = typeof input === 'string' ? input.split(/\\s*,\\s*/) : [];\n  if (\n    !acceptStrings.some((x) => x.startsWith('application/vnd.github.')) ||\n    acceptStrings.length < 2\n  ) {\n    acceptStrings.push(defaultAccept);\n  }\n  return acceptStrings.join(', ');\n}\n\nexport class GithubHttp extends Http<GithubHttpOptions, GithubHttpOptions> {\n  constructor(options?: GithubHttpOptions) {\n    super(PLATFORM_TYPE_GITHUB, options);\n  }\n\n  protected async request<T>(\n    url: string | URL,\n    options?: GithubInternalOptions & GithubHttpOptions,\n    okToRetry = true\n  ): Promise<HttpResponse<T> | null> {\n    let result = null;\n\n    const opts = {\n      baseUrl,\n      ...options,\n      throwHttpErrors: true,\n    };\n\n    const method = opts.method || 'get';\n\n    if (method.toLowerCase() === 'post' && url === 'graphql') {\n      // GitHub Enterprise uses unversioned graphql path\n      opts.baseUrl = opts.baseUrl.replace('/v3/', '/');\n    }\n\n    const accept = constructAcceptString(opts.headers?.accept);\n\n    opts.headers = {\n      ...opts.headers,\n      accept,\n    };\n\n    try {\n      result = await super.request<T>(url, opts);\n\n      // istanbul ignore else: Can result be null ???\n      if (result !== null) {\n        if (opts.paginate) {\n          // Check if result is paginated\n          const pageLimit = opts.pageLimit || 10;\n          const linkHeader =\n            result?.headers?.link &&\n            parseLinkHeader(result.headers.link as string);\n          if (linkHeader?.next && linkHeader?.last) {\n            let lastPage = +linkHeader.last.page;\n            // istanbul ignore else: needs a test\n            if (!process.env.RENOVATE_PAGINATE_ALL && opts.paginate !== 'all') {\n              lastPage = Math.min(pageLimit, lastPage);\n            }\n            const pageNumbers = Array.from(\n              new Array(lastPage),\n              (x, i) => i + 1\n            ).slice(1);\n            const queue = pageNumbers.map((page) => (): Promise<\n              HttpResponse\n            > => {\n              const nextUrl = URL.parse(linkHeader.next.url, true);\n              delete nextUrl.search;\n              nextUrl.query.page = page.toString();\n              return this.request(\n                URL.format(nextUrl),\n                { ...opts, paginate: false },\n                okToRetry\n              );\n            });\n            const pages = await pAll(queue, { concurrency: 5 });\n            result.body = result.body.concat(\n              ...pages.filter(Boolean).map((page) => page.body)\n            );\n          }\n        }\n      }\n    } catch (err) {\n      handleGotError(err, url, opts);\n    }\n\n    return result;\n  }\n\n  public async queryRepo<T = unknown>(\n    query: string,\n    options: GraphqlOptions = {}\n  ): Promise<T> {\n    let result = null;\n\n    const path = 'graphql';\n\n    const opts: HttpPostOptions = {\n      body: { query },\n      headers: { accept: options?.acceptHeader },\n    };\n\n    logger.trace(`Performing Github GraphQL request`);\n\n    try {\n      const res = await this.postJson<GithubGraphqlResponse<T>>(\n        'graphql',\n        opts\n      );\n      result = res?.body?.data?.repository;\n    } catch (gotErr) {\n      handleGotError(gotErr, path, opts);\n    }\n    return result;\n  }\n\n  async queryRepoField<T = Record<string, unknown>>(\n    queryOrig: string,\n    fieldName: string,\n    options: GraphqlOptions = {}\n  ): Promise<T[]> {\n    const result: T[] = [];\n\n    const regex = new RegExp(`(\\\\W)${fieldName}(\\\\s*)\\\\(`);\n\n    const { paginate = true } = options;\n    let count = options.count || 100;\n    let cursor = null;\n\n    let isIterating = true;\n    while (isIterating) {\n      let query = queryOrig;\n      if (paginate) {\n        let replacement = `$1${fieldName}$2(first: ${count}`;\n        replacement += cursor ? `, after: \"${cursor}\", ` : ', ';\n        query = query.replace(regex, replacement);\n      }\n      const gqlRes = await this.queryRepo<T>(query, options);\n      if (gqlRes?.[fieldName]) {\n        const { nodes = [], edges = [], pageInfo } = gqlRes[fieldName];\n        result.push(...nodes);\n        result.push(...edges);\n\n        if (paginate && pageInfo) {\n          const { hasNextPage, endCursor } = pageInfo;\n          if (hasNextPage && endCursor) {\n            cursor = endCursor;\n          } else {\n            isIterating = false;\n          }\n        }\n      } else {\n        count = Math.floor(count / 2);\n        if (count === 0) {\n          logger.error({ gqlRes }, 'Error fetching GraphQL nodes');\n          isIterating = false;\n        }\n      }\n\n      if (!paginate) {\n        isIterating = false;\n      }\n    }\n\n    return result;\n  }\n}\n"]}