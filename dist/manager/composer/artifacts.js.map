{"version":3,"file":"artifacts.js","sourceRoot":"","sources":["../../../lib/manager/composer/artifacts.ts"],"names":[],"mappings":"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","sourcesContent":["import URL from 'url';\nimport is from '@sindresorhus/is';\nimport { quote } from 'shlex';\nimport upath from 'upath';\nimport { SYSTEM_INSUFFICIENT_DISK_SPACE } from '../../constants/error-messages';\nimport {\n  PLATFORM_TYPE_GITHUB,\n  PLATFORM_TYPE_GITLAB,\n} from '../../constants/platforms';\nimport * as datasourcePackagist from '../../datasource/packagist';\nimport { logger } from '../../logger';\nimport { ExecOptions, exec } from '../../util/exec';\nimport {\n  deleteLocalFile,\n  ensureDir,\n  ensureLocalDir,\n  getSiblingFileName,\n  readLocalFile,\n  writeLocalFile,\n} from '../../util/fs';\nimport { getRepoStatus } from '../../util/git';\nimport * as hostRules from '../../util/host-rules';\nimport { UpdateArtifact, UpdateArtifactsResult } from '../common';\n\nexport async function updateArtifacts({\n  packageFileName,\n  updatedDeps,\n  newPackageFileContent,\n  config,\n}: UpdateArtifact): Promise<UpdateArtifactsResult[] | null> {\n  logger.debug(`composer.updateArtifacts(${packageFileName})`);\n\n  const cacheDir =\n    process.env.COMPOSER_CACHE_DIR ||\n    upath.join(config.cacheDir, './others/composer');\n  await ensureDir(cacheDir);\n  logger.debug(`Using composer cache ${cacheDir}`);\n\n  const lockFileName = packageFileName.replace(/\\.json$/, '.lock');\n  const existingLockFileContent = await readLocalFile(lockFileName);\n  if (!existingLockFileContent) {\n    logger.debug('No composer.lock found');\n    return null;\n  }\n  await ensureLocalDir(getSiblingFileName(packageFileName, 'vendor'));\n  try {\n    await writeLocalFile(packageFileName, newPackageFileContent);\n    if (config.isLockFileMaintenance) {\n      await deleteLocalFile(lockFileName);\n    }\n    const authJson = {};\n    let credentials = hostRules.find({\n      hostType: PLATFORM_TYPE_GITHUB,\n      url: 'https://api.github.com/',\n    });\n    // istanbul ignore if\n    if (credentials?.token) {\n      authJson['github-oauth'] = {\n        'github.com': credentials.token,\n      };\n    }\n    credentials = hostRules.find({\n      hostType: PLATFORM_TYPE_GITLAB,\n      url: 'https://gitlab.com/api/v4/',\n    });\n    // istanbul ignore if\n    if (credentials?.token) {\n      authJson['gitlab-token'] = {\n        'gitlab.com': credentials.token,\n      };\n    }\n    try {\n      // istanbul ignore else\n      if (is.array(config.registryUrls)) {\n        for (const regUrl of config.registryUrls) {\n          if (regUrl) {\n            const { host } = URL.parse(regUrl);\n            const hostRule = hostRules.find({\n              hostType: datasourcePackagist.id,\n              url: regUrl,\n            });\n            // istanbul ignore else\n            if (hostRule.username && hostRule.password) {\n              logger.debug('Setting packagist auth for host ' + host);\n              authJson['http-basic'] = authJson['http-basic'] || {};\n              authJson['http-basic'][host] = {\n                username: hostRule.username,\n                password: hostRule.password,\n              };\n            } else {\n              logger.debug('No packagist auth found for ' + regUrl);\n            }\n          }\n        }\n      } else if (config.registryUrls) {\n        logger.warn(\n          { registryUrls: config.registryUrls },\n          'Non-array composer registryUrls'\n        );\n      }\n    } catch (err) /* istanbul ignore next */ {\n      logger.warn({ err }, 'Error setting registryUrls auth for composer');\n    }\n    if (authJson) {\n      await writeLocalFile('auth.json', JSON.stringify(authJson));\n    }\n    const execOptions: ExecOptions = {\n      cwdFile: packageFileName,\n      extraEnv: {\n        COMPOSER_CACHE_DIR: cacheDir,\n      },\n      docker: {\n        image: 'renovate/composer',\n      },\n    };\n    const cmd = 'composer';\n    let args;\n    if (config.isLockFileMaintenance) {\n      args = 'install';\n    } else {\n      args =\n        ('update ' + updatedDeps.map(quote).join(' ')).trim() +\n        ' --with-dependencies';\n    }\n    if (config.composerIgnorePlatformReqs) {\n      args += ' --ignore-platform-reqs';\n    }\n    args += ' --no-ansi --no-interaction';\n    if (global.trustLevel !== 'high' || config.ignoreScripts) {\n      args += ' --no-scripts --no-autoloader';\n    }\n    logger.debug({ cmd, args }, 'composer command');\n    await exec(`${cmd} ${args}`, execOptions);\n    const status = await getRepoStatus();\n    if (!status.modified.includes(lockFileName)) {\n      return null;\n    }\n    logger.debug('Returning updated composer.lock');\n    return [\n      {\n        file: {\n          name: lockFileName,\n          contents: await readLocalFile(lockFileName),\n        },\n      },\n    ];\n  } catch (err) {\n    if (\n      err.message?.includes(\n        'Your requirements could not be resolved to an installable set of packages.'\n      )\n    ) {\n      logger.info('Composer requirements cannot be resolved');\n    } else if (err.message?.includes('write error (disk full?)')) {\n      throw new Error(SYSTEM_INSUFFICIENT_DISK_SPACE);\n    } else {\n      logger.debug({ err }, 'Failed to generate composer.lock');\n    }\n    return [\n      {\n        artifactError: {\n          lockFile: lockFileName,\n          stderr: err.message,\n        },\n      },\n    ];\n  }\n}\n"]}