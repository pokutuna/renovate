{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../lib/manager/composer/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport * as datasourceGitTags from '../../datasource/git-tags';\nimport * as datasourcePackagist from '../../datasource/packagist';\nimport { logger } from '../../logger';\nimport { SkipReason } from '../../types';\nimport { readLocalFile } from '../../util/fs';\nimport { api as semverComposer } from '../../versioning/composer';\nimport { PackageDependency, PackageFile } from '../common';\n\ninterface Repo {\n  name?: string;\n  type: 'composer' | 'git' | 'package' | 'vcs';\n  packagist?: boolean;\n  'packagist.org'?: boolean;\n  url: string;\n}\n\ninterface ComposerConfig {\n  type?: string;\n  /**\n   * A repositories field can be an array of Repo objects or an object of repoName: Repo\n   * Also it can be a boolean (usually false) to disable packagist.\n   * (Yes this can be confusing, as it is also not properly documented in the composer docs)\n   * See https://getcomposer.org/doc/05-repositories.md#disabling-packagist-org\n   */\n  repositories: Record<string, Repo | boolean> | Repo[];\n\n  require: Record<string, string>;\n  'require-dev': Record<string, string>;\n}\n\n/**\n * The regUrl is expected to be a base URL. GitLab composer repository installation guide specifies\n * to use a base URL containing packages.json. Composer still works in this scenario by determining\n * whether to add / remove packages.json from the URL.\n *\n * See https://github.com/composer/composer/blob/750a92b4b7aecda0e5b2f9b963f1cb1421900675/src/Composer/Repository/ComposerRepository.php#L815\n */\nfunction transformRegUrl(url: string): string {\n  return url.replace(/(\\/packages\\.json)$/, '');\n}\n\n/**\n * Parse the repositories field from a composer.json\n *\n * Entries with type vcs or git will be added to repositories,\n * other entries will be added to registryUrls\n */\nfunction parseRepositories(\n  repoJson: ComposerConfig['repositories'],\n  repositories: Record<string, Repo>,\n  registryUrls: string[]\n): void {\n  try {\n    let packagist = true;\n    Object.entries(repoJson).forEach(([key, repo]) => {\n      if (is.object(repo)) {\n        const name = is.array(repoJson) ? repo.name : key;\n        // eslint-disable-next-line default-case\n        switch (repo.type) {\n          case 'vcs':\n          case 'git':\n            // eslint-disable-next-line no-param-reassign\n            repositories[name] = repo;\n            break;\n          case 'composer':\n            registryUrls.push(transformRegUrl(repo.url));\n            break;\n          case 'package':\n            logger.debug(\n              { url: repo.url },\n              'type package is not supported yet'\n            );\n        }\n        if (repo.packagist === false || repo['packagist.org'] === false) {\n          packagist = false;\n        }\n      } else if (\n        ['packagist', 'packagist.org'].includes(key) &&\n        repo === false\n      ) {\n        packagist = false;\n      }\n    });\n    if (packagist) {\n      registryUrls.push('https://packagist.org');\n    } else {\n      logger.debug('Disabling packagist.org');\n    }\n  } catch (e) /* istanbul ignore next */ {\n    logger.debug(\n      { repositories: repoJson },\n      'Error parsing composer.json repositories config'\n    );\n  }\n}\n\nexport async function extractPackageFile(\n  content: string,\n  fileName: string\n): Promise<PackageFile | null> {\n  logger.trace(`composer.extractPackageFile(${fileName})`);\n  let composerJson: ComposerConfig;\n  try {\n    composerJson = JSON.parse(content);\n  } catch (err) {\n    logger.debug({ fileName }, 'Invalid JSON');\n    return null;\n  }\n  const repositories: Record<string, Repo> = {};\n  const registryUrls: string[] = [];\n  const res: PackageFile = { deps: [] };\n\n  // handle lockfile\n  const lockfilePath = fileName.replace(/\\.json$/, '.lock');\n  const lockContents = await readLocalFile(lockfilePath, 'utf8');\n  let lockParsed;\n  if (lockContents) {\n    logger.debug({ packageFile: fileName }, 'Found composer lock file');\n    try {\n      lockParsed = JSON.parse(lockContents);\n    } catch (err) /* istanbul ignore next */ {\n      logger.warn({ err }, 'Error processing composer.lock');\n    }\n  }\n\n  // handle composer.json repositories\n  if (composerJson.repositories) {\n    parseRepositories(composerJson.repositories, repositories, registryUrls);\n  }\n  if (registryUrls.length !== 0) {\n    res.registryUrls = registryUrls;\n  }\n  const deps = [];\n  const depTypes = ['require', 'require-dev'];\n  for (const depType of depTypes) {\n    if (composerJson[depType]) {\n      try {\n        for (const [depName, version] of Object.entries(\n          composerJson[depType] as Record<string, string>\n        )) {\n          const currentValue = version.trim();\n          // Default datasource and lookupName\n          let datasource = datasourcePackagist.id;\n          let lookupName = depName;\n\n          // Check custom repositories by type\n          if (repositories[depName]) {\n            // eslint-disable-next-line default-case\n            switch (repositories[depName].type) {\n              case 'vcs':\n              case 'git':\n                datasource = datasourceGitTags.id;\n                lookupName = repositories[depName].url;\n                break;\n            }\n          }\n          const dep: PackageDependency = {\n            depType,\n            depName,\n            currentValue,\n            datasource,\n          };\n          if (depName !== lookupName) {\n            dep.lookupName = lookupName;\n          }\n          if (!depName.includes('/')) {\n            dep.skipReason = SkipReason.Unsupported;\n          }\n          if (currentValue === '*') {\n            dep.skipReason = SkipReason.AnyVersion;\n          }\n          if (lockParsed) {\n            const lockedDep = lockParsed.packages.find(\n              (item) => item.name === dep.depName\n            );\n            if (lockedDep && semverComposer.isVersion(lockedDep.version)) {\n              dep.lockedVersion = lockedDep.version.replace(/^v/i, '');\n            }\n          }\n          deps.push(dep);\n        }\n      } catch (err) /* istanbul ignore next */ {\n        logger.debug({ fileName, depType, err }, 'Error parsing composer.json');\n        return null;\n      }\n    }\n  }\n  if (!deps.length) {\n    return null;\n  }\n  res.deps = deps;\n  if (composerJson.type) {\n    res.managerData = { composerJsonType: composerJson.type };\n  }\n  return res;\n}\n"]}