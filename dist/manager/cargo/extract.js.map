{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../lib/manager/cargo/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import { parse } from 'toml';\nimport * as datasourceCrate from '../../datasource/crate';\nimport { logger } from '../../logger';\nimport { SkipReason } from '../../types';\nimport { PackageDependency, PackageFile } from '../common';\nimport { CargoConfig, CargoSection } from './types';\n\nfunction extractFromSection(\n  parsedContent: CargoSection,\n  section: keyof CargoSection,\n  target?: string\n): PackageDependency[] {\n  const deps: PackageDependency[] = [];\n  const sectionContent = parsedContent[section];\n  if (!sectionContent) {\n    return [];\n  }\n  Object.keys(sectionContent).forEach((depName) => {\n    let skipReason: SkipReason;\n    let currentValue = sectionContent[depName];\n    let nestedVersion = false;\n    if (typeof currentValue !== 'string') {\n      const version = currentValue.version;\n      const path = currentValue.path;\n      const git = currentValue.git;\n      if (version) {\n        currentValue = version;\n        nestedVersion = true;\n        if (path) {\n          skipReason = SkipReason.PathDependency;\n        }\n        if (git) {\n          skipReason = SkipReason.GitDependency;\n        }\n      } else if (path) {\n        currentValue = '';\n        skipReason = SkipReason.PathDependency;\n      } else if (git) {\n        currentValue = '';\n        skipReason = SkipReason.GitDependency;\n      } else {\n        currentValue = '';\n        skipReason = SkipReason.InvalidDependencySpecification;\n      }\n    }\n    const dep: PackageDependency = {\n      depName,\n      depType: section,\n      currentValue: currentValue as any,\n      managerData: { nestedVersion },\n      datasource: datasourceCrate.id,\n    };\n    if (skipReason) {\n      dep.skipReason = skipReason;\n    }\n    if (target) {\n      dep.target = target;\n    }\n    deps.push(dep);\n  });\n  return deps;\n}\n\nexport function extractPackageFile(\n  content: string,\n  fileName: string\n): PackageFile | null {\n  logger.trace(`cargo.extractPackageFile(${fileName})`);\n  let parsedContent: CargoConfig;\n  try {\n    parsedContent = parse(content);\n  } catch (err) {\n    logger.debug({ err }, 'Error parsing Cargo.toml file');\n    return null;\n  }\n  /*\n    There are the following sections in Cargo.toml:\n    [dependencies]\n    [dev-dependencies]\n    [build-dependencies]\n    [target.*.dependencies]\n  */\n  const targetSection = parsedContent.target;\n  // An array of all dependencies in the target section\n  let targetDeps: PackageDependency[] = [];\n  if (targetSection) {\n    const targets = Object.keys(targetSection);\n    targets.forEach((target) => {\n      const targetContent = parsedContent.target[target];\n      // Dependencies for `${target}`\n      const deps = [\n        ...extractFromSection(targetContent, 'dependencies', target),\n        ...extractFromSection(targetContent, 'dev-dependencies', target),\n        ...extractFromSection(targetContent, 'build-dependencies', target),\n      ];\n      targetDeps = targetDeps.concat(deps);\n    });\n  }\n  const deps = [\n    ...extractFromSection(parsedContent, 'dependencies'),\n    ...extractFromSection(parsedContent, 'dev-dependencies'),\n    ...extractFromSection(parsedContent, 'build-dependencies'),\n    ...targetDeps,\n  ];\n  if (!deps.length) {\n    return null;\n  }\n  return { deps };\n}\n"]}