{"version":3,"file":"artifacts.js","sourceRoot":"","sources":["../../../lib/manager/cargo/artifacts.ts"],"names":[],"mappings":"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","sourcesContent":["import { quote } from 'shlex';\nimport { logger } from '../../logger';\nimport { ExecOptions, exec } from '../../util/exec';\nimport {\n  getSiblingFileName,\n  readLocalFile,\n  writeLocalFile,\n} from '../../util/fs';\nimport { UpdateArtifact, UpdateArtifactsResult } from '../common';\n\nexport async function updateArtifacts({\n  packageFileName,\n  updatedDeps,\n  newPackageFileContent,\n  config,\n}: UpdateArtifact): Promise<UpdateArtifactsResult[] | null> {\n  logger.debug(`cargo.updateArtifacts(${packageFileName})`);\n  if (updatedDeps === undefined || updatedDeps.length < 1) {\n    logger.debug('No updated cargo deps - returning null');\n    return null;\n  }\n  const lockFileName = getSiblingFileName(packageFileName, 'Cargo.lock');\n  const existingLockFileContent = await readLocalFile(lockFileName);\n  if (!existingLockFileContent) {\n    logger.debug('No Cargo.lock found');\n    return null;\n  }\n  try {\n    await writeLocalFile(packageFileName, newPackageFileContent);\n    logger.debug('Updating ' + lockFileName);\n    for (let i = 0; i < updatedDeps.length; i += 1) {\n      const dep = updatedDeps[i];\n      // Update dependency `${dep}` in Cargo.lock file corresponding to Cargo.toml file located\n      // at ${localPackageFileName} path\n      let cmd = `cargo update --manifest-path ${quote(\n        packageFileName\n      )} --package ${quote(dep)}`;\n      const execOptions: ExecOptions = {\n        docker: {\n          image: 'renovate/rust',\n        },\n      };\n      try {\n        await exec(cmd, execOptions);\n      } catch (err) /* istanbul ignore next */ {\n        // Two different versions of one dependency can be present in the same\n        // crate, and when that happens an attempt to update it with --package ${dep}\n        // key results in cargo exiting with error code `101` and an error mssage:\n        // \"error: There are multiple `${dep}` packages in your project\".\n        //\n        // If exception `err` was caused by this, we execute `updateAll` function\n        // instead of returning an error. `updateAll` function just executes\n        // \"cargo update --manifest-path ${localPackageFileName}\" without the `--package` key.\n        //\n        // If exception `err` was not caused by this, we just rethrow it. It will be caught\n        // by the outer try { } catch {} and processed normally.\n        const msgStart = 'error: There are multiple';\n        if (err.code === 101 && err.stderr.startsWith(msgStart)) {\n          cmd = cmd.replace(/ --package.*/, '');\n          await exec(cmd, execOptions);\n        } else {\n          throw err; // this is caught below\n        }\n      }\n    }\n    logger.debug('Returning updated Cargo.lock');\n    const newCargoLockContent = await readLocalFile(lockFileName);\n    if (existingLockFileContent === newCargoLockContent) {\n      logger.debug('Cargo.lock is unchanged');\n      return null;\n    }\n    return [\n      {\n        file: {\n          name: lockFileName,\n          contents: newCargoLockContent,\n        },\n      },\n    ];\n  } catch (err) {\n    logger.warn({ err }, 'Failed to update Cargo lock file');\n    return [\n      {\n        artifactError: {\n          lockFile: lockFileName,\n          stderr: err.message,\n        },\n      },\n    ];\n  }\n}\n"]}