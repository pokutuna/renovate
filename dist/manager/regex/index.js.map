{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/manager/regex/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,yCAAsC;AACtC,4CAAyC;AACzC,8DAAgD;AAGnC,QAAA,aAAa,GAAG;IAC3B,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF,SAAgB,kBAAkB,CAChC,OAAe,EACf,WAAmB,EACnB,MAA2B;IAE3B,MAAM,UAAU,GAAG,aAAK,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;IACtD,MAAM,IAAI,GAAG,EAAE,CAAC;IAChB,IAAI,WAAW,CAAC;IAChB,GAAG;QACD,WAAW,GAAG,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACvC,IAAI,WAAW,EAAE;YACf,MAAM,GAAG,GAAQ,EAAE,CAAC;YACpB,MAAM,EAAE,MAAM,EAAE,GAAG,WAAW,CAAC;YAC/B,MAAM,MAAM,GAAG;gBACb,SAAS;gBACT,YAAY;gBACZ,cAAc;gBACd,eAAe;gBACf,YAAY;gBACZ,YAAY;aACb,CAAC;YACF,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE;gBAC1B,MAAM,aAAa,GAAG,GAAG,KAAK,UAAU,CAAC;gBACzC,IAAI,MAAM,CAAC,aAAa,CAAC,EAAE;oBACzB,IAAI;wBACF,GAAG,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,aAAa,CAAC,EAAE,MAAM,CAAC,CAAC;qBAC9D;oBAAC,OAAO,GAAG,EAAE;wBACZ,eAAM,CAAC,IAAI,CACT,EAAE,QAAQ,EAAE,MAAM,CAAC,aAAa,CAAC,EAAE,EACnC,6CAA6C,CAC9C,CAAC;wBACF,OAAO,IAAI,CAAC;qBACb;iBACF;qBAAM,IAAI,MAAM,CAAC,KAAK,CAAC,EAAE;oBACxB,GAAG,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;iBAC5B;aACF;YACD,GAAG,CAAC,aAAa,GAAG,GAAG,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC;YACxC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SAChB;KACF,QAAQ,WAAW,EAAE;IACtB,IAAI,IAAI,CAAC,MAAM,EAAE;QACf,OAAO,EAAE,IAAI,EAAE,YAAY,EAAE,MAAM,CAAC,YAAY,EAAE,CAAC;KACpD;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AA7CD,gDA6CC","sourcesContent":["import { logger } from '../../logger';\nimport { regEx } from '../../util/regex';\nimport * as template from '../../util/template';\nimport { CustomExtractConfig, PackageFile, Result } from '../common';\n\nexport const defaultConfig = {\n  pinDigests: false,\n};\n\nexport function extractPackageFile(\n  content: string,\n  packageFile: string,\n  config: CustomExtractConfig\n): Result<PackageFile | null> {\n  const regexMatch = regEx(config.matchStrings[0], 'g');\n  const deps = [];\n  let matchResult;\n  do {\n    matchResult = regexMatch.exec(content);\n    if (matchResult) {\n      const dep: any = {};\n      const { groups } = matchResult;\n      const fields = [\n        'depName',\n        'lookupName',\n        'currentValue',\n        'currentDigest',\n        'datasource',\n        'versioning',\n      ];\n      for (const field of fields) {\n        const fieldTemplate = `${field}Template`;\n        if (config[fieldTemplate]) {\n          try {\n            dep[field] = template.compile(config[fieldTemplate], groups);\n          } catch (err) {\n            logger.warn(\n              { template: config[fieldTemplate] },\n              'Error compiling template for custom manager'\n            );\n            return null;\n          }\n        } else if (groups[field]) {\n          dep[field] = groups[field];\n        }\n      }\n      dep.replaceString = `${matchResult[0]}`;\n      deps.push(dep);\n    }\n  } while (matchResult);\n  if (deps.length) {\n    return { deps, matchStrings: config.matchStrings };\n  }\n  return null;\n}\n"]}