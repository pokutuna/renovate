{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../lib/manager/dockerfile/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import * as datasourceDocker from '../../datasource/docker';\nimport { logger } from '../../logger';\nimport { SkipReason } from '../../types';\nimport { PackageDependency, PackageFile } from '../common';\n\nexport function splitImageParts(currentFrom: string): PackageDependency {\n  if (currentFrom.includes('$')) {\n    return {\n      skipReason: SkipReason.ContainsVariable,\n    };\n  }\n  const [currentDepTag, currentDigest] = currentFrom.split('@');\n  const depTagSplit = currentDepTag.split(':');\n  let depName: string;\n  let currentValue: string;\n  if (\n    depTagSplit.length === 1 ||\n    depTagSplit[depTagSplit.length - 1].includes('/')\n  ) {\n    depName = currentDepTag;\n  } else {\n    currentValue = depTagSplit.pop();\n    depName = depTagSplit.join(':');\n  }\n  const dep: PackageDependency = {\n    depName,\n    currentValue,\n    currentDigest,\n  };\n  return dep;\n}\n\nexport function getDep(\n  currentFrom: string,\n  specifyReplaceString = true\n): PackageDependency {\n  const dep = splitImageParts(currentFrom);\n  if (specifyReplaceString) {\n    dep.replaceString = currentFrom;\n    dep.autoReplaceStringTemplate =\n      '{{depName}}{{#if newValue}}:{{newValue}}{{/if}}{{#if newDigest}}@{{newDigest}}{{/if}}';\n  }\n  dep.datasource = datasourceDocker.id;\n  if (\n    dep.depName &&\n    (dep.depName === 'node' || dep.depName.endsWith('/node')) &&\n    dep.depName !== 'calico/node'\n  ) {\n    dep.commitMessageTopic = 'Node.js';\n  }\n  return dep;\n}\n\nexport function extractPackageFile(content: string): PackageFile | null {\n  const deps: PackageDependency[] = [];\n  const stageNames: string[] = [];\n  let lineNumber = 0;\n  for (const fromLine of content.split('\\n')) {\n    const fromMatch = /^FROM /i.test(fromLine);\n    if (fromMatch) {\n      logger.trace({ lineNumber, fromLine }, 'FROM line');\n      const [, currentFrom, ...fromRest] = fromLine.match(/\\S+/g);\n      if (fromRest.length === 2 && fromRest[0].toLowerCase() === 'as') {\n        logger.debug('Found a multistage build stage name');\n        stageNames.push(fromRest[1]);\n      }\n      if (currentFrom === 'scratch') {\n        logger.debug('Skipping scratch');\n      } else if (stageNames.includes(currentFrom)) {\n        logger.debug({ currentFrom }, 'Skipping alias FROM');\n      } else {\n        const dep = getDep(currentFrom);\n        logger.trace(\n          {\n            depName: dep.depName,\n            currentValue: dep.currentValue,\n            currentDigest: dep.currentDigest,\n          },\n          'Dockerfile FROM'\n        );\n        deps.push(dep);\n      }\n    }\n\n    const copyFromMatch = /^(COPY --from=)([^\\s]+)\\s+(.*)$/i.exec(fromLine);\n    if (copyFromMatch) {\n      const [, , currentFrom] = copyFromMatch;\n      logger.trace({ lineNumber, fromLine }, 'COPY --from line');\n      if (stageNames.includes(currentFrom)) {\n        logger.debug({ currentFrom }, 'Skipping alias COPY --from');\n      } else if (!Number.isNaN(Number(currentFrom))) {\n        logger.debug({ currentFrom }, 'Skipping index reference COPY --from');\n      } else {\n        const dep = getDep(currentFrom);\n        logger.debug(\n          {\n            depName: dep.depName,\n            currentValue: dep.currentValue,\n            currentDigest: dep.currentDigest,\n          },\n          'Dockerfile COPY --from'\n        );\n        deps.push(dep);\n      }\n    }\n    lineNumber += 1;\n  }\n  if (!deps.length) {\n    return null;\n  }\n  for (const d of deps) {\n    d.depType = 'stage';\n  }\n  deps[deps.length - 1].depType = 'final';\n  return { deps };\n}\n"]}