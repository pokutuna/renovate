{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../lib/manager/nuget/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'path';\nimport findUp from 'find-up';\nimport { XmlDocument } from 'xmldoc';\nimport * as datasourceNuget from '../../datasource/nuget';\nimport { logger } from '../../logger';\nimport { SkipReason } from '../../types';\nimport { clone } from '../../util/clone';\nimport { readFile } from '../../util/fs';\nimport { get } from '../../versioning';\nimport * as semverVersioning from '../../versioning/semver';\nimport { ExtractConfig, PackageDependency, PackageFile } from '../common';\nimport { DotnetToolsManifest } from './types';\n\nasync function readFileAsXmlDocument(file: string): Promise<XmlDocument> {\n  try {\n    return new XmlDocument(await readFile(file, 'utf8'));\n  } catch (err) {\n    logger.debug({ err }, `failed to parse '${file}' as XML document`);\n    return undefined;\n  }\n}\n\nasync function determineRegistryUrls(\n  packageFile: string,\n  localDir: string\n): Promise<string[]> {\n  // Valid file names taken from https://github.com/NuGet/NuGet.Client/blob/f64621487c0b454eda4b98af853bf4a528bef72a/src/NuGet.Core/NuGet.Configuration/Settings/Settings.cs#L34\n  const nuGetConfigFileNames = ['nuget.config', 'NuGet.config', 'NuGet.Config'];\n  const nuGetConfigPath = await findUp(nuGetConfigFileNames, {\n    cwd: path.dirname(path.join(localDir, packageFile)),\n    type: 'file',\n  });\n\n  if (nuGetConfigPath?.startsWith(localDir) !== true) {\n    return undefined;\n  }\n\n  logger.debug({ nuGetConfigPath }, 'found NuGet.config');\n  const nuGetConfig = await readFileAsXmlDocument(nuGetConfigPath);\n  if (!nuGetConfig) {\n    return undefined;\n  }\n\n  const packageSources = nuGetConfig.childNamed('packageSources');\n  if (!packageSources) {\n    return undefined;\n  }\n\n  const registryUrls = clone(datasourceNuget.defaultRegistryUrls);\n  for (const child of packageSources.children) {\n    if (child.type === 'element') {\n      if (child.name === 'clear') {\n        logger.debug(`clearing registry URLs`);\n        registryUrls.length = 0;\n      } else if (child.name === 'add') {\n        const isHttpUrl = /^https?:\\/\\//i.test(child.attr.value);\n        if (isHttpUrl) {\n          let registryUrl = child.attr.value;\n          if (child.attr.protocolVersion) {\n            registryUrl += `#protocolVersion=${child.attr.protocolVersion}`;\n          }\n          logger.debug({ registryUrl }, 'adding registry URL');\n          registryUrls.push(registryUrl);\n        } else {\n          logger.debug(\n            { registryUrl: child.attr.value },\n            'ignoring local registry URL'\n          );\n        }\n      }\n      // child.name === 'remove' not supported\n    }\n  }\n  return registryUrls;\n}\n\nconst packageRe = /<(?:PackageReference|DotNetCliToolReference|GlobalPackageReference).*(?:Include|Update)\\s*=\\s*\"(?<depName>[^\"]+)\".*(?:Version|VersionOverride)\\s*=\\s*\"(?:[[])?(?:(?<currentValue>[^\"(,[\\]]+)\\s*(?:,\\s*[)\\]]|])?)\"/;\nexport async function extractPackageFile(\n  content: string,\n  packageFile: string,\n  config: ExtractConfig\n): Promise<PackageFile | null> {\n  logger.trace({ packageFile }, 'nuget.extractPackageFile()');\n  const { isVersion } = get(config.versioning || semverVersioning.id);\n  const deps: PackageDependency[] = [];\n\n  const registryUrls = await determineRegistryUrls(\n    packageFile,\n    config.localDir\n  );\n\n  if (packageFile.endsWith('.config/dotnet-tools.json')) {\n    let manifest: DotnetToolsManifest;\n\n    try {\n      manifest = JSON.parse(content);\n    } catch (err) {\n      logger.debug({ fileName: packageFile }, 'Invalid JSON');\n      return null;\n    }\n\n    if (manifest.version !== 1) {\n      logger.debug({ contents: manifest }, 'Unsupported dotnet tools version');\n      return null;\n    }\n\n    for (const depName of Object.keys(manifest.tools)) {\n      const tool = manifest.tools[depName];\n      const currentValue = tool.version;\n      const dep: PackageDependency = {\n        depType: 'nuget',\n        depName,\n        currentValue,\n        datasource: datasourceNuget.id,\n      };\n      if (registryUrls) {\n        dep.registryUrls = registryUrls;\n      }\n\n      deps.push(dep);\n    }\n\n    return { deps };\n  }\n\n  for (const line of content.split('\\n')) {\n    /**\n     * https://docs.microsoft.com/en-us/nuget/concepts/package-versioning\n     * This article mentions that  Nuget 3.x and later tries to restore the lowest possible version\n     * regarding to given version range.\n     * 1.3.4 equals [1.3.4,)\n     * Due to guarantee that an update of package version will result in its usage by the next restore + build operation,\n     * only following constrained versions make sense\n     * 1.3.4, [1.3.4], [1.3.4, ], [1.3.4, )\n     * The update of the right boundary does not make sense regarding to the lowest version restore rule,\n     * so we don't include it in the extracting regexp\n     */\n\n    const match = packageRe.exec(line);\n    if (match) {\n      const { currentValue, depName } = match.groups;\n      const dep: PackageDependency = {\n        depType: 'nuget',\n        depName,\n        currentValue,\n        datasource: datasourceNuget.id,\n      };\n      if (registryUrls) {\n        dep.registryUrls = registryUrls;\n      }\n      if (!isVersion(currentValue)) {\n        dep.skipReason = SkipReason.NotAVersion;\n      }\n      deps.push(dep);\n    }\n  }\n  return { deps };\n}\n"]}