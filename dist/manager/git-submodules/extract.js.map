{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../lib/manager/git-submodules/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import URL from 'url';\nimport Git, { SimpleGit } from 'simple-git';\nimport upath from 'upath';\n\nimport * as datasourceGitSubmodules from '../../datasource/git-submodules';\nimport { logger } from '../../logger';\nimport { ManagerConfig, PackageFile } from '../common';\n\ntype GitModule = {\n  name: string;\n  path: string;\n};\n\nasync function getUrl(\n  git: SimpleGit,\n  gitModulesPath: string,\n  submoduleName: string\n): Promise<string> {\n  const path = (\n    await Git().raw([\n      'config',\n      '--file',\n      gitModulesPath,\n      '--get',\n      `submodule.${submoduleName}.url`,\n    ])\n  )?.trim();\n  if (!path?.startsWith('../')) {\n    return path;\n  }\n  const remoteUrl = (\n    await git.raw(['config', '--get', 'remote.origin.url'])\n  ).trim();\n  return URL.resolve(`${remoteUrl}/`, path);\n}\n\nasync function getBranch(\n  gitModulesPath: string,\n  submoduleName: string\n): Promise<string> {\n  return (\n    (await Git().raw([\n      'config',\n      '--file',\n      gitModulesPath,\n      '--get',\n      `submodule.${submoduleName}.branch`,\n    ])) || 'master'\n  ).trim();\n}\n\nasync function getModules(\n  git: SimpleGit,\n  gitModulesPath: string\n): Promise<GitModule[]> {\n  const res: GitModule[] = [];\n  try {\n    const modules = (\n      (await git.raw([\n        'config',\n        '--file',\n        gitModulesPath,\n        '--get-regexp',\n        'path',\n      ])) ?? /* istanbul ignore next: should never happen */ ''\n    )\n      .trim()\n      .split(/\\n/)\n      .filter((s) => !!s);\n\n    for (const line of modules) {\n      const [, name, path] = line.split(/submodule\\.(.+?)\\.path\\s(.+)/);\n      res.push({ name, path });\n    }\n  } catch (err) /* istanbul ignore next */ {\n    logger.warn({ err }, 'Error getting git submodules during extract');\n  }\n  return res;\n}\n\nexport default async function extractPackageFile(\n  _content: string,\n  fileName: string,\n  config: ManagerConfig\n): Promise<PackageFile | null> {\n  const git = Git(config.localDir);\n  const gitModulesPath = upath.join(config.localDir, fileName);\n\n  const depNames = await getModules(git, gitModulesPath);\n\n  if (!depNames.length) {\n    return null;\n  }\n\n  const deps = (\n    await Promise.all(\n      depNames.map(async ({ name, path }) => {\n        try {\n          const [currentValue] = (await git.subModule(['status', path]))\n            .trim()\n            .split(/[+\\s]/);\n          const submoduleBranch = await getBranch(gitModulesPath, name);\n          const subModuleUrl = await getUrl(git, gitModulesPath, name);\n          return {\n            depName: path,\n            registryUrls: [subModuleUrl, submoduleBranch],\n            currentValue,\n            currentDigest: currentValue,\n          };\n        } catch (err) /* istanbul ignore next */ {\n          logger.warn(\n            { err },\n            'Error mapping git submodules during extraction'\n          );\n          return null;\n        }\n      })\n    )\n  ).filter(Boolean);\n\n  return { deps, datasource: datasourceGitSubmodules.id };\n}\n"]}