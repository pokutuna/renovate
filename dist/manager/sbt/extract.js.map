{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../lib/manager/sbt/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import * as datasourceMaven from '../../datasource/maven';\nimport { MAVEN_REPO } from '../../datasource/maven/common';\nimport * as datasourceSbtPackage from '../../datasource/sbt-package';\nimport * as datasourceSbtPlugin from '../../datasource/sbt-plugin';\nimport { get } from '../../versioning';\nimport * as mavenVersioning from '../../versioning/maven';\nimport { PackageDependency, PackageFile } from '../common';\n\nconst stripComment = (str: string): string => str.replace(/(^|\\s+)\\/\\/.*$/, '');\n\nconst isSingleLineDep = (str: string): boolean =>\n  /^\\s*(libraryDependencies|dependencyOverrides)\\s*\\+=\\s*/.test(str);\n\nconst isDepsBegin = (str: string): boolean =>\n  /^\\s*(libraryDependencies|dependencyOverrides)\\s*\\+\\+=\\s*/.test(str);\n\nconst isPluginDep = (str: string): boolean =>\n  /^\\s*addSbtPlugin\\s*\\(.*\\)\\s*$/.test(str);\n\nconst isStringLiteral = (str: string): boolean => /^\"[^\"]*\"$/.test(str);\n\nconst isScalaVersion = (str: string): boolean =>\n  /^\\s*scalaVersion\\s*:=\\s*\"[^\"]*\"[\\s,]*$/.test(str);\n\nconst getScalaVersion = (str: string): string =>\n  str.replace(/^\\s*scalaVersion\\s*:=\\s*\"/, '').replace(/\"[\\s,]*$/, '');\n\n/*\n  https://www.scala-sbt.org/release/docs/Cross-Build.html#Publishing+conventions\n */\nconst normalizeScalaVersion = (str: string): string => {\n  // istanbul ignore if\n  if (!str) {\n    return str;\n  }\n  const versioning = get(mavenVersioning.id);\n  if (versioning.isVersion(str)) {\n    // Do not normalize unstable versions\n    if (!versioning.isStable(str)) {\n      return str;\n    }\n    // Do not normalize versions prior to 2.10\n    if (!versioning.isGreaterThan(str, '2.10.0')) {\n      return str;\n    }\n  }\n  if (/^\\d+\\.\\d+\\.\\d+$/.test(str)) {\n    return str.replace(/^(\\d+)\\.(\\d+)\\.\\d+$/, '$1.$2');\n  }\n  // istanbul ignore next\n  return str;\n};\n\nconst isScalaVersionVariable = (str: string): boolean =>\n  /^\\s*scalaVersion\\s*:=\\s*[_a-zA-Z][_a-zA-Z0-9]*[\\s,]*$/.test(str);\n\nconst getScalaVersionVariable = (str: string): string =>\n  str.replace(/^\\s*scalaVersion\\s*:=\\s*/, '').replace(/[\\s,]*$/, '');\n\nconst isResolver = (str: string): boolean =>\n  /^\\s*(resolvers\\s*\\+\\+?=\\s*(Seq\\()?)?\"[^\"]*\"\\s*at\\s*\"[^\"]*\"[\\s,)]*$/.test(\n    str\n  );\nconst getResolverUrl = (str: string): string =>\n  str\n    .replace(/^\\s*(resolvers\\s*\\+\\+?=\\s*(Seq\\()?)?\"[^\"]*\"\\s*at\\s*\"/, '')\n    .replace(/\"[\\s,)]*$/, '');\n\nconst isVarDependency = (str: string): boolean =>\n  /^\\s*(private\\s*)?(lazy\\s*)?val\\s[_a-zA-Z][_a-zA-Z0-9]*\\s*=.*(%%?).*%.*/.test(\n    str\n  );\n\nconst isVarDef = (str: string): boolean =>\n  /^\\s*(private\\s*)?(lazy\\s*)?val\\s+[_a-zA-Z][_a-zA-Z0-9]*\\s*=\\s*\"[^\"]*\"\\s*$/.test(\n    str\n  );\n\nconst getVarName = (str: string): string =>\n  str\n    .replace(/^\\s*(private\\s*)?(lazy\\s*)?val\\s+/, '')\n    .replace(/\\s*=\\s*\"[^\"]*\"\\s*$/, '');\n\nconst isVarName = (str: string): boolean =>\n  /^[_a-zA-Z][_a-zA-Z0-9]*$/.test(str);\n\nconst getVarInfo = (str: string, ctx: ParseContext): { val: string } => {\n  const rightPart = str.replace(\n    /^\\s*(private\\s*)?(lazy\\s*)?val\\s+[_a-zA-Z][_a-zA-Z0-9]*\\s*=\\s*\"/,\n    ''\n  );\n  const val = rightPart.replace(/\"\\s*$/, '');\n  return { val };\n};\n\ninterface ParseContext {\n  scalaVersion: string;\n  variables: any;\n  depType?: string;\n}\n\nfunction parseDepExpr(\n  expr: string,\n  ctx: ParseContext\n): PackageDependency | null {\n  const { scalaVersion, variables } = ctx;\n  let { depType } = ctx;\n\n  const isValidToken = (str: string): boolean =>\n    isStringLiteral(str) || (isVarName(str) && !!variables[str]);\n\n  const resolveToken = (str: string): string =>\n    isStringLiteral(str)\n      ? str.replace(/^\"/, '').replace(/\"$/, '')\n      : variables[str].val;\n\n  const tokens = expr\n    .trim()\n    .replace(/[()]/g, '')\n    .split(/\\s*(%%?)\\s*|\\s*classifier\\s*/);\n\n  const [\n    rawGroupId,\n    groupOp,\n    rawArtifactId,\n    artifactOp,\n    rawVersion,\n    scopeOp,\n    rawScope,\n  ] = tokens;\n\n  if (!rawGroupId) {\n    return null;\n  }\n  if (!isValidToken(rawGroupId)) {\n    return null;\n  }\n\n  if (!rawArtifactId) {\n    return null;\n  }\n  if (!isValidToken(rawArtifactId)) {\n    return null;\n  }\n  if (artifactOp !== '%') {\n    return null;\n  }\n\n  if (!rawVersion) {\n    return null;\n  }\n  if (!isValidToken(rawVersion)) {\n    return null;\n  }\n\n  if (scopeOp && scopeOp !== '%') {\n    return null;\n  }\n\n  const groupId = resolveToken(rawGroupId);\n  const depName = `${groupId}:${resolveToken(rawArtifactId)}`;\n  const artifactId =\n    groupOp === '%%' && scalaVersion\n      ? `${resolveToken(rawArtifactId)}_${scalaVersion}`\n      : resolveToken(rawArtifactId);\n  const lookupName = `${groupId}:${artifactId}`;\n  const currentValue = resolveToken(rawVersion);\n\n  if (!depType && rawScope) {\n    depType = rawScope.replace(/^\"/, '').replace(/\"$/, '');\n  }\n\n  const result: PackageDependency = {\n    depName,\n    lookupName,\n    currentValue,\n  };\n\n  if (depType) {\n    result.depType = depType;\n  }\n\n  return result;\n}\n\ninterface ParseOptions {\n  isMultiDeps?: boolean;\n  scalaVersion?: string;\n  variables?: Record<string, any>;\n}\n\nfunction parseSbtLine(\n  acc: PackageFile & ParseOptions,\n  line: string,\n  lineIndex: number,\n  lines: string[]\n): (PackageFile & ParseOptions) | null {\n  const { deps, registryUrls, variables } = acc;\n\n  let { isMultiDeps, scalaVersion } = acc;\n\n  const ctx: ParseContext = {\n    scalaVersion,\n    variables,\n  };\n\n  let dep: PackageDependency = null;\n  let scalaVersionVariable: string = null;\n  if (line !== '') {\n    if (isScalaVersion(line)) {\n      isMultiDeps = false;\n      const rawScalaVersion = getScalaVersion(line);\n      scalaVersion = normalizeScalaVersion(rawScalaVersion);\n      dep = {\n        datasource: datasourceMaven.id,\n        depName: 'scala',\n        lookupName: 'org.scala-lang:scala-library',\n        currentValue: rawScalaVersion,\n        separateMinorPatch: true,\n      };\n    } else if (isScalaVersionVariable(line)) {\n      isMultiDeps = false;\n      scalaVersionVariable = getScalaVersionVariable(line);\n    } else if (isResolver(line)) {\n      isMultiDeps = false;\n      const url = getResolverUrl(line);\n      registryUrls.push(url);\n    } else if (isVarDef(line)) {\n      variables[getVarName(line)] = getVarInfo(line, ctx);\n    } else if (isVarDependency(line)) {\n      isMultiDeps = false;\n      const depExpr = line.replace(\n        /^\\s*(private\\s*)?(lazy\\s*)?val\\s[_a-zA-Z][_a-zA-Z0-9]*\\s*=\\s*/,\n        ''\n      );\n      dep = parseDepExpr(depExpr, {\n        ...ctx,\n      });\n    } else if (isSingleLineDep(line)) {\n      isMultiDeps = false;\n      const depExpr = line.replace(/^.*\\+=\\s*/, '');\n      dep = parseDepExpr(depExpr, {\n        ...ctx,\n      });\n    } else if (isPluginDep(line)) {\n      isMultiDeps = false;\n      const rightPart = line.replace(/^\\s*addSbtPlugin\\s*\\(/, '');\n      const depExpr = rightPart.replace(/\\)\\s*$/, '');\n      dep = parseDepExpr(depExpr, {\n        ...ctx,\n        depType: 'plugin',\n      });\n    } else if (isDepsBegin(line)) {\n      isMultiDeps = true;\n    } else if (isMultiDeps) {\n      const rightPart = line.replace(/^[\\s,]*/, '');\n      const depExpr = rightPart.replace(/[\\s,]*$/, '');\n      dep = parseDepExpr(depExpr, {\n        ...ctx,\n      });\n    }\n  }\n\n  if (dep) {\n    if (!dep.datasource) {\n      if (dep.depType === 'plugin') {\n        dep.datasource = datasourceSbtPlugin.id;\n      } else {\n        dep.datasource = datasourceSbtPackage.id;\n      }\n    }\n    deps.push({\n      registryUrls,\n      ...dep,\n    });\n  }\n\n  if (lineIndex + 1 < lines.length) {\n    return {\n      ...acc,\n      isMultiDeps,\n      scalaVersion:\n        scalaVersion ||\n        (scalaVersionVariable &&\n          variables[scalaVersionVariable] &&\n          normalizeScalaVersion(variables[scalaVersionVariable].val)),\n    };\n  }\n  if (deps.length) {\n    return { deps };\n  }\n  return null;\n}\n\nexport function extractPackageFile(content: string): PackageFile {\n  if (!content) {\n    return null;\n  }\n  const lines = content.split(/\\n/).map(stripComment);\n  return lines.reduce(parseSbtLine, {\n    registryUrls: [MAVEN_REPO],\n    deps: [],\n    isMultiDeps: false,\n    scalaVersion: null,\n    variables: {},\n  });\n}\n"]}