{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../lib/manager/bundler/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import * as datasourceRubygems from '../../datasource/rubygems';\nimport { logger } from '../../logger';\nimport { SkipReason } from '../../types';\nimport { readLocalFile } from '../../util/fs';\nimport { regEx } from '../../util/regex';\nimport { PackageDependency, PackageFile } from '../common';\nimport { extractLockFileEntries } from './locked-version';\n\nexport async function extractPackageFile(\n  content: string,\n  fileName?: string\n): Promise<PackageFile | null> {\n  const res: PackageFile = {\n    registryUrls: [],\n    deps: [],\n  };\n  const lines = content.split('\\n');\n  const delimiters = ['\"', \"'\"];\n  for (let lineNumber = 0; lineNumber < lines.length; lineNumber += 1) {\n    const line = lines[lineNumber];\n    let sourceMatch: RegExpMatchArray;\n    for (const delimiter of delimiters) {\n      sourceMatch =\n        sourceMatch ||\n        regEx(`^source ${delimiter}([^${delimiter}]+)${delimiter}\\\\s*$`).exec(\n          line\n        );\n    }\n    if (sourceMatch) {\n      res.registryUrls.push(sourceMatch[1]);\n    }\n    let rubyMatch: RegExpMatchArray;\n    for (const delimiter of delimiters) {\n      rubyMatch =\n        rubyMatch ||\n        regEx(`^ruby ${delimiter}([^${delimiter}]+)${delimiter}`).exec(line);\n    }\n    if (rubyMatch) {\n      res.compatibility = { ruby: rubyMatch[1] };\n    }\n    let gemMatch: RegExpMatchArray;\n    let gemDelimiter: string;\n    for (const delimiter of delimiters) {\n      const gemMatchRegex = `^gem ${delimiter}([^${delimiter}]+)${delimiter}(,\\\\s+${delimiter}([^${delimiter}]+)${delimiter}){0,2}`;\n      if (regEx(gemMatchRegex).test(line)) {\n        gemDelimiter = delimiter;\n        gemMatch = gemMatch || regEx(gemMatchRegex).exec(line);\n      }\n    }\n    if (gemMatch) {\n      const dep: PackageDependency = {\n        depName: gemMatch[1],\n        managerData: { lineNumber },\n      };\n      if (gemMatch[3]) {\n        let currentValue = gemMatch[0]\n          .substring(`gem ${gemDelimiter}${dep.depName}${gemDelimiter},`.length)\n          .trim();\n        // strip quotes unless it's a complex constraint\n        if (\n          currentValue.startsWith(gemDelimiter) &&\n          currentValue.endsWith(gemDelimiter) &&\n          currentValue.split(gemDelimiter).length === 3\n        ) {\n          currentValue = currentValue.slice(1, -1);\n        }\n        dep.currentValue = currentValue;\n      } else {\n        dep.skipReason = SkipReason.NoVersion;\n      }\n      if (!dep.skipReason) {\n        dep.datasource = datasourceRubygems.id;\n      }\n      res.deps.push(dep);\n    }\n    const groupMatch = /^group\\s+(.*?)\\s+do/.exec(line);\n    if (groupMatch) {\n      const depTypes = groupMatch[1]\n        .split(',')\n        .map((group) => group.trim())\n        .map((group) => group.replace(/^:/, ''));\n      const groupLineNumber = lineNumber;\n      let groupContent = '';\n      let groupLine = '';\n      while (lineNumber < lines.length && groupLine !== 'end') {\n        lineNumber += 1;\n        groupLine = lines[lineNumber];\n        if (groupLine !== 'end') {\n          groupContent += (groupLine || '').replace(/^ {2}/, '') + '\\n';\n        }\n      }\n      const groupRes = await extractPackageFile(groupContent);\n      if (groupRes) {\n        res.deps = res.deps.concat(\n          groupRes.deps.map((dep) => ({\n            ...dep,\n            depTypes,\n            managerData: {\n              lineNumber: dep.managerData.lineNumber + groupLineNumber + 1,\n            },\n          }))\n        );\n      }\n    }\n    for (const delimiter of delimiters) {\n      const sourceBlockMatch = regEx(\n        `^source\\\\s+${delimiter}(.*?)${delimiter}\\\\s+do`\n      ).exec(line);\n      if (sourceBlockMatch) {\n        const repositoryUrl = sourceBlockMatch[1];\n        const sourceLineNumber = lineNumber;\n        let sourceContent = '';\n        let sourceLine = '';\n        while (lineNumber < lines.length && sourceLine.trim() !== 'end') {\n          lineNumber += 1;\n          sourceLine = lines[lineNumber];\n          // istanbul ignore if\n          if (sourceLine === null || sourceLine === undefined) {\n            logger.info({ content, fileName }, 'Undefined sourceLine');\n            sourceLine = 'end';\n          }\n          if (sourceLine !== 'end') {\n            sourceContent += sourceLine.replace(/^ {2}/, '') + '\\n';\n          }\n        }\n        const sourceRes = await extractPackageFile(sourceContent);\n        if (sourceRes) {\n          res.deps = res.deps.concat(\n            sourceRes.deps.map((dep) => ({\n              ...dep,\n              registryUrls: [repositoryUrl],\n              managerData: {\n                lineNumber: dep.managerData.lineNumber + sourceLineNumber + 1,\n              },\n            }))\n          );\n        }\n      }\n    }\n    const platformsMatch = /^platforms\\s+(.*?)\\s+do/.test(line);\n    if (platformsMatch) {\n      const platformsLineNumber = lineNumber;\n      let platformsContent = '';\n      let platformsLine = '';\n      while (lineNumber < lines.length && platformsLine !== 'end') {\n        lineNumber += 1;\n        platformsLine = lines[lineNumber];\n        if (platformsLine !== 'end') {\n          platformsContent += platformsLine.replace(/^ {2}/, '') + '\\n';\n        }\n      }\n      const platformsRes = await extractPackageFile(platformsContent);\n      if (platformsRes) {\n        res.deps = res.deps.concat(\n          // eslint-disable-next-line no-loop-func\n          platformsRes.deps.map((dep) => ({\n            ...dep,\n            managerData: {\n              lineNumber: dep.managerData.lineNumber + platformsLineNumber + 1,\n            },\n          }))\n        );\n      }\n    }\n    const ifMatch = /^if\\s+(.*?)/.test(line);\n    if (ifMatch) {\n      const ifLineNumber = lineNumber;\n      let ifContent = '';\n      let ifLine = '';\n      while (lineNumber < lines.length && ifLine !== 'end') {\n        lineNumber += 1;\n        ifLine = lines[lineNumber];\n        if (ifLine !== 'end') {\n          ifContent += ifLine.replace(/^ {2}/, '') + '\\n';\n        }\n      }\n      const ifRes = await extractPackageFile(ifContent);\n      if (ifRes) {\n        res.deps = res.deps.concat(\n          // eslint-disable-next-line no-loop-func\n          ifRes.deps.map((dep) => ({\n            ...dep,\n            managerData: {\n              lineNumber: dep.managerData.lineNumber + ifLineNumber + 1,\n            },\n          }))\n        );\n      }\n    }\n  }\n  if (!res.deps.length && !res.registryUrls.length) {\n    return null;\n  }\n\n  if (fileName) {\n    const gemfileLock = fileName + '.lock';\n    const lockContent = await readLocalFile(gemfileLock, 'utf8');\n    if (lockContent) {\n      logger.debug({ packageFile: fileName }, 'Found Gemfile.lock file');\n      const lockedEntries = extractLockFileEntries(lockContent);\n      for (const dep of res.deps) {\n        const lockedDepValue = lockedEntries.get(dep.depName);\n        if (lockedDepValue) {\n          dep.lockedVersion = lockedDepValue;\n        }\n      }\n      const bundledWith = /\\nBUNDLED WITH\\n\\s+(.*?)(\\n|$)/.exec(lockContent);\n      if (bundledWith) {\n        res.compatibility = res.compatibility || {};\n        res.compatibility.bundler = bundledWith[1];\n      }\n    }\n  }\n  return res;\n}\n"]}