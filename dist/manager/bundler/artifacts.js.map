{"version":3,"file":"artifacts.js","sourceRoot":"","sources":["../../../lib/manager/bundler/artifacts.ts"],"names":[],"mappings":"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","sourcesContent":["import { quote } from 'shlex';\nimport { BUNDLER_INVALID_CREDENTIALS } from '../../constants/error-messages';\nimport { logger } from '../../logger';\nimport { HostRule } from '../../types';\nimport * as memCache from '../../util/cache/memory';\nimport { ExecOptions, exec } from '../../util/exec';\nimport {\n  deleteLocalFile,\n  getSiblingFileName,\n  readLocalFile,\n  writeLocalFile,\n} from '../../util/fs';\nimport { getRepoStatus } from '../../util/git';\nimport { isValid } from '../../versioning/ruby';\nimport { UpdateArtifact, UpdateArtifactsResult } from '../common';\nimport {\n  findAllAuthenticatable,\n  getAuthenticationHeaderValue,\n  getDomain,\n} from './host-rules';\nimport { getGemHome } from './utils';\n\nconst hostConfigVariablePrefix = 'BUNDLE_';\n\nasync function getRubyConstraint(\n  updateArtifact: UpdateArtifact\n): Promise<string> {\n  const { packageFileName, config } = updateArtifact;\n  const { compatibility = {} } = config;\n  const { ruby } = compatibility;\n\n  let rubyConstraint: string;\n  if (ruby) {\n    logger.debug('Using rubyConstraint from config');\n    rubyConstraint = ruby;\n  } else {\n    const rubyVersionFile = getSiblingFileName(\n      packageFileName,\n      '.ruby-version'\n    );\n    const rubyVersionFileContent = await readLocalFile(rubyVersionFile, 'utf8');\n    if (rubyVersionFileContent) {\n      logger.debug('Using ruby version specified in .ruby-version');\n      rubyConstraint = rubyVersionFileContent\n        .replace(/^ruby-/, '')\n        .replace(/\\n/g, '')\n        .trim();\n    }\n  }\n  return rubyConstraint;\n}\n\nfunction buildBundleHostVariable(hostRule: HostRule): Record<string, string> {\n  const varName =\n    hostConfigVariablePrefix +\n    getDomain(hostRule)\n      .split('.')\n      .map((term) => term.toUpperCase())\n      .join('__');\n\n  return {\n    [varName]: `${getAuthenticationHeaderValue(hostRule)}`,\n  };\n}\n\nexport async function updateArtifacts(\n  updateArtifact: UpdateArtifact\n): Promise<UpdateArtifactsResult[] | null> {\n  const {\n    packageFileName,\n    updatedDeps,\n    newPackageFileContent,\n    config,\n  } = updateArtifact;\n  const { compatibility = {} } = config;\n  logger.debug(`bundler.updateArtifacts(${packageFileName})`);\n  const existingError = memCache.get<string>('bundlerArtifactsError');\n  // istanbul ignore if\n  if (existingError) {\n    logger.debug('Aborting Bundler artifacts due to previous failed attempt');\n    throw new Error(existingError);\n  }\n  const lockFileName = `${packageFileName}.lock`;\n  const existingLockFileContent = await readLocalFile(lockFileName, 'utf8');\n  if (!existingLockFileContent) {\n    logger.debug('No Gemfile.lock found');\n    return null;\n  }\n\n  if (config.isLockFileMaintenance) {\n    await deleteLocalFile(lockFileName);\n  }\n\n  try {\n    await writeLocalFile(packageFileName, newPackageFileContent);\n\n    let cmd;\n\n    if (config.isLockFileMaintenance) {\n      cmd = 'bundle lock';\n    } else {\n      cmd = `bundle lock --update ${updatedDeps.map(quote).join(' ')}`;\n    }\n\n    let bundlerVersion = '';\n    const { bundler } = compatibility;\n    if (bundler) {\n      if (isValid(bundler)) {\n        logger.debug({ bundlerVersion: bundler }, 'Found bundler version');\n        bundlerVersion = ` -v ${quote(bundler)}`;\n      } else {\n        logger.warn({ bundlerVersion: bundler }, 'Invalid bundler version');\n      }\n    } else {\n      logger.debug('No bundler version constraint found - will use latest');\n    }\n    const preCommands = [\n      'ruby --version',\n      `gem install bundler${bundlerVersion}`,\n    ];\n\n    const bundlerHostRulesVariables = findAllAuthenticatable({\n      hostType: 'bundler',\n    }).reduce((variables, hostRule) => {\n      return { ...variables, ...buildBundleHostVariable(hostRule) };\n    }, {} as Record<string, string>);\n\n    const execOptions: ExecOptions = {\n      cwdFile: packageFileName,\n      extraEnv: {\n        ...bundlerHostRulesVariables,\n        GEM_HOME: await getGemHome(config),\n      },\n      docker: {\n        image: 'renovate/ruby',\n        tagScheme: 'ruby',\n        tagConstraint: await getRubyConstraint(updateArtifact),\n        preCommands,\n      },\n    };\n    await exec(cmd, execOptions);\n    const status = await getRepoStatus();\n    if (!status.modified.includes(lockFileName)) {\n      return null;\n    }\n    logger.debug('Returning updated Gemfile.lock');\n    const lockFileContent = await readLocalFile(lockFileName);\n    return [\n      {\n        file: {\n          name: lockFileName,\n          contents: lockFileContent,\n        },\n      },\n    ];\n  } catch (err) /* istanbul ignore next */ {\n    const output = `${err.stdout}\\n${err.stderr}`;\n    if (\n      err.message.includes('fatal: Could not parse object') ||\n      output.includes('but that version could not be found')\n    ) {\n      return [\n        {\n          artifactError: {\n            lockFile: lockFileName,\n            stderr: output,\n          },\n        },\n      ];\n    }\n    if (\n      err.stdout?.includes('Please supply credentials for this source') ||\n      err.stderr?.includes('Authentication is required') ||\n      err.stderr?.includes(\n        'Please make sure you have the correct access rights'\n      )\n    ) {\n      logger.debug(\n        { err },\n        'Gemfile.lock update failed due to missing credentials - skipping branch'\n      );\n      // Do not generate these PRs because we don't yet support Bundler authentication\n      memCache.set('bundlerArtifactsError', BUNDLER_INVALID_CREDENTIALS);\n      throw new Error(BUNDLER_INVALID_CREDENTIALS);\n    }\n    const resolveMatchRe = new RegExp('\\\\s+(.*) was resolved to', 'g');\n    if (output.match(resolveMatchRe) && !config.isLockFileMaintenance) {\n      logger.debug({ err }, 'Bundler has a resolve error');\n      const resolveMatches = [];\n      let resolveMatch;\n      do {\n        resolveMatch = resolveMatchRe.exec(output);\n        if (resolveMatch) {\n          resolveMatches.push(resolveMatch[1].split(' ').shift());\n        }\n      } while (resolveMatch);\n      if (resolveMatches.some((match) => !updatedDeps.includes(match))) {\n        logger.debug(\n          { resolveMatches, updatedDeps },\n          'Found new resolve matches - reattempting recursively'\n        );\n        const newUpdatedDeps = [\n          ...new Set([...updatedDeps, ...resolveMatches]),\n        ];\n        return updateArtifacts({\n          packageFileName,\n          updatedDeps: newUpdatedDeps,\n          newPackageFileContent,\n          config,\n        });\n      }\n      logger.debug(\n        { err },\n        'Gemfile.lock update failed due to incompatible packages'\n      );\n    } else {\n      logger.info(\n        { err },\n        'Gemfile.lock update failed due to an unknown reason'\n      );\n    }\n    return [\n      {\n        artifactError: {\n          lockFile: lockFileName,\n          stderr: `${err.stdout}\\n${err.stderr}`,\n        },\n      },\n    ];\n  }\n}\n"]}