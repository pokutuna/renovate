{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../lib/manager/gitlabci/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger } from '../../logger';\nimport { PackageDependency, PackageFile } from '../common';\nimport { getDep } from '../dockerfile/extract';\n\nfunction skipCommentLines(\n  lines: string[],\n  lineNumber: number\n): { lineNumber: number; line: string } {\n  let ln = lineNumber;\n  const commentsRe = /^\\s*#/;\n  while (ln < lines.length - 1 && commentsRe.test(lines[ln])) {\n    ln += 1;\n  }\n  return { line: lines[ln], lineNumber: ln };\n}\n\nexport function extractPackageFile(content: string): PackageFile | null {\n  const deps: PackageDependency[] = [];\n  try {\n    const lines = content.split('\\n');\n    for (let lineNumber = 0; lineNumber < lines.length; lineNumber += 1) {\n      const line = lines[lineNumber];\n      const imageMatch = /^\\s*image:\\s*'?\"?([^\\s'\"]+|)'?\"?\\s*$/.exec(line);\n      if (imageMatch) {\n        switch (imageMatch[1]) {\n          case '': {\n            const imageNameLine = skipCommentLines(lines, lineNumber + 1);\n            const imageNameMatch = /^\\s*name:\\s*'?\"?([^\\s'\"]+|)'?\"?\\s*$/.exec(\n              imageNameLine.line\n            );\n\n            if (imageNameMatch) {\n              lineNumber = imageNameLine.lineNumber;\n              logger.trace(`Matched image name on line ${lineNumber}`);\n              const currentFrom = imageNameMatch[1];\n              const dep = getDep(currentFrom);\n              dep.depType = 'image-name';\n              deps.push(dep);\n            }\n            break;\n          }\n          default: {\n            logger.trace(`Matched image on line ${lineNumber}`);\n            const currentFrom = imageMatch[1];\n            const dep = getDep(currentFrom);\n            dep.depType = 'image';\n            deps.push(dep);\n          }\n        }\n      }\n      const services = /^\\s*services:\\s*$/.test(line);\n      if (services) {\n        logger.trace(`Matched services on line ${lineNumber}`);\n        let foundImage: boolean;\n        do {\n          foundImage = false;\n          const serviceImageLine = skipCommentLines(lines, lineNumber + 1);\n          logger.trace(`serviceImageLine: \"${serviceImageLine.line}\"`);\n          const serviceImageMatch = /^\\s*-\\s*'?\"?([^\\s'\"]+)'?\"?\\s*$/.exec(\n            serviceImageLine.line\n          );\n          if (serviceImageMatch) {\n            logger.trace('serviceImageMatch');\n            foundImage = true;\n            const currentFrom = serviceImageMatch[1];\n            lineNumber = serviceImageLine.lineNumber;\n            const dep = getDep(currentFrom);\n            dep.depType = 'service-image';\n            deps.push(dep);\n          }\n        } while (foundImage);\n      }\n    }\n  } catch (err) /* istanbul ignore next */ {\n    logger.warn({ err }, 'Error extracting GitLab CI dependencies');\n  }\n  if (!deps.length) {\n    return null;\n  }\n  return { deps };\n}\n"]}