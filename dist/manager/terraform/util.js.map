{"version":3,"file":"util.js","sourceRoot":"","sources":["../../../lib/manager/terraform/util.ts"],"names":[],"mappings":";;;AAEa,QAAA,uBAAuB,GAAG,gDAAgD,CAAC;AAC3E,QAAA,2BAA2B,GAAG,yDAAyD,CAAC;AAOrG,IAAY,wBAMX;AAND,WAAY,wBAAwB;IAClC,+CAAmB,CAAA;IACnB,6CAAiB,CAAA;IACjB,iDAAqB,CAAA;IACrB,qEAAyC,CAAA;IACzC,iDAAqB,CAAA;AACvB,CAAC,EANW,wBAAwB,GAAxB,gCAAwB,KAAxB,gCAAwB,QAMnC;AAMD,IAAY,sBAkBX;AAlBD,WAAY,sBAAsB;IAChC,6CAAmB,CAAA;IACnB;;OAEG;IACH,+DAAqC,CAAA;IACrC;;OAEG;IACH,uDAA6B,CAAA;IAC7B;;OAEG;IACH,2DAAiC,CAAA;IACjC;;OAEG;IACH,uDAA6B,CAAA;AAC/B,CAAC,EAlBW,sBAAsB,GAAtB,8BAAsB,KAAtB,8BAAsB,QAkBjC;AAUD,SAAgB,0BAA0B,CACxC,KAAa;IAEb,QAAQ,KAAK,EAAE;QACb,KAAK,QAAQ,CAAC,CAAC;YACb,OAAO,wBAAwB,CAAC,MAAM,CAAC;SACxC;QACD,KAAK,UAAU,CAAC,CAAC;YACf,OAAO,wBAAwB,CAAC,QAAQ,CAAC;SAC1C;QACD,KAAK,oBAAoB,CAAC,CAAC;YACzB,OAAO,wBAAwB,CAAC,kBAAkB,CAAC;SACpD;QACD,KAAK,UAAU,CAAC,CAAC;YACf,OAAO,wBAAwB,CAAC,QAAQ,CAAC;SAC1C;QACD,OAAO,CAAC,CAAC;YACP,OAAO,wBAAwB,CAAC,OAAO,CAAC;SACzC;KACF;AACH,CAAC;AApBD,gEAoBC;AAED,SAAgB,2BAA2B,CACzC,OAAe,EACf,SAAmB;IAEnB,OAAO,SAAS,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;QAC9B,OAAO,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IACjC,CAAC,CAAC,CAAC;AACL,CAAC;AAPD,kEAOC;AAED,MAAM,eAAe,GAAG,kBAAkB,CAAC;AAC3C,SAAgB,mBAAmB,CAAC,IAAY;IAC9C,MAAM,KAAK,GAAG,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACzC,OAAO,CAAC,CAAC,KAAK,CAAC;AACjB,CAAC;AAHD,kDAGC","sourcesContent":["import { PackageDependency } from '../common';\n\nexport const keyValueExtractionRegex = /^\\s*(?<key>[^\\s]+)\\s+=\\s+\"(?<value>[^\"]+)\"\\s*$/;\nexport const resourceTypeExtractionRegex = /^\\s*resource\\s+\"(?<type>[^\\s]+)\"\\s+\"(?<name>[^\"]+)\"\\s*{/;\n\nexport interface ExtractionResult {\n  lineNumber: number;\n  dependencies: PackageDependency[];\n}\n\nexport enum TerraformDependencyTypes {\n  unknown = 'unknown',\n  module = 'module',\n  provider = 'provider',\n  required_providers = 'required_providers',\n  resource = 'resource',\n}\n\nexport interface TerraformManagerData {\n  terraformDependencyType: TerraformDependencyTypes;\n}\n\nexport enum TerraformResourceTypes {\n  unknown = 'unknown',\n  /**\n   * https://www.terraform.io/docs/providers/docker/r/container.html\n   */\n  docker_container = 'docker_container',\n  /**\n   * https://www.terraform.io/docs/providers/docker/r/image.html\n   */\n  docker_image = 'docker_image',\n  /**\n   * https://www.terraform.io/docs/providers/docker/r/service.html\n   */\n  docker_service = 'docker_service',\n  /**\n   * https://www.terraform.io/docs/providers/helm/r/release.html\n   */\n  helm_release = 'helm_release',\n}\n\nexport interface ResourceManagerData extends TerraformManagerData {\n  resourceType?: TerraformResourceTypes;\n  chart?: string;\n  image?: string;\n  name?: string;\n  repository?: string;\n}\n\nexport function getTerraformDependencyType(\n  value: string\n): TerraformDependencyTypes {\n  switch (value) {\n    case 'module': {\n      return TerraformDependencyTypes.module;\n    }\n    case 'provider': {\n      return TerraformDependencyTypes.provider;\n    }\n    case 'required_providers': {\n      return TerraformDependencyTypes.required_providers;\n    }\n    case 'resource': {\n      return TerraformDependencyTypes.resource;\n    }\n    default: {\n      return TerraformDependencyTypes.unknown;\n    }\n  }\n}\n\nexport function checkFileContainsDependency(\n  content: string,\n  checkList: string[]\n): boolean {\n  return checkList.some((check) => {\n    return content.includes(check);\n  });\n}\n\nconst pathStringRegex = /(.|..)?(\\/[^/])+/;\nexport function checkIfStringIsPath(path: string): boolean {\n  const match = pathStringRegex.exec(path);\n  return !!match;\n}\n"]}