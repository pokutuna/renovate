{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../lib/manager/terraform/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger } from '../../logger';\nimport { PackageDependency, PackageFile } from '../common';\nimport { analyseTerraformModule, extractTerraformModule } from './modules';\nimport {\n  analyzeTerraformProvider,\n  extractTerraformProvider,\n} from './providers';\nimport { extractTerraformRequiredProviders } from './required_providers';\nimport {\n  analyseTerraformResource,\n  extractTerraformResource,\n} from './resources';\nimport {\n  TerraformDependencyTypes,\n  TerraformManagerData,\n  checkFileContainsDependency,\n  getTerraformDependencyType,\n} from './util';\n\nconst dependencyBlockExtractionRegex = /^\\s*(?<type>[a-z_]+)\\s+(\"(?<lookupName>[^\"]+)\"\\s+)?(\"(?<terraformName>[^\"]+)\"\\s+)?{\\s*$/;\nconst contentCheckList = [\n  'module \"',\n  'provider \"',\n  'required_providers ',\n  ' \"helm_release\" ',\n  ' \"docker_image\" ',\n];\n\nexport function extractPackageFile(content: string): PackageFile | null {\n  logger.trace({ content }, 'terraform.extractPackageFile()');\n  if (!checkFileContainsDependency(content, contentCheckList)) {\n    return null;\n  }\n  let deps: PackageDependency<TerraformManagerData>[] = [];\n  try {\n    const lines = content.split('\\n');\n    for (let lineNumber = 0; lineNumber < lines.length; lineNumber += 1) {\n      const line = lines[lineNumber];\n      const terraformDependency = dependencyBlockExtractionRegex.exec(line);\n      if (terraformDependency) {\n        logger.trace(\n          `Matched ${terraformDependency.groups.type} on line ${lineNumber}`\n        );\n        const tfDepType = getTerraformDependencyType(\n          terraformDependency.groups.type\n        );\n        let result = null;\n        switch (tfDepType) {\n          case TerraformDependencyTypes.required_providers: {\n            result = extractTerraformRequiredProviders(lineNumber, lines);\n            break;\n          }\n          case TerraformDependencyTypes.provider: {\n            result = extractTerraformProvider(\n              lineNumber,\n              lines,\n              terraformDependency.groups.lookupName\n            );\n            break;\n          }\n          case TerraformDependencyTypes.module: {\n            result = extractTerraformModule(\n              lineNumber,\n              lines,\n              terraformDependency.groups.lookupName\n            );\n            break;\n          }\n          case TerraformDependencyTypes.resource: {\n            result = extractTerraformResource(lineNumber, lines);\n            break;\n          }\n          /* istanbul ignore next */\n          default:\n            logger.trace(\n              `Could not identify TerraformDependencyType ${terraformDependency.groups.type} on line ${lineNumber}.`\n            );\n            break;\n        }\n        if (result) {\n          lineNumber = result.lineNumber;\n          deps = deps.concat(result.dependencies);\n          result = null;\n        }\n      }\n    }\n  } catch (err) /* istanbul ignore next */ {\n    logger.warn({ err }, 'Error extracting buildkite plugins');\n  }\n  deps.forEach((dep) => {\n    switch (dep.managerData.terraformDependencyType) {\n      case TerraformDependencyTypes.required_providers:\n      case TerraformDependencyTypes.provider:\n        analyzeTerraformProvider(dep);\n        break;\n      case TerraformDependencyTypes.module:\n        analyseTerraformModule(dep);\n        break;\n      case TerraformDependencyTypes.resource:\n        analyseTerraformResource(dep);\n        break;\n      /* istanbul ignore next */\n      default:\n    }\n    // eslint-disable-next-line no-param-reassign\n    delete dep.managerData;\n  });\n  if (deps.some((dep) => dep.skipReason !== 'local')) {\n    return { deps };\n  }\n  return null;\n}\n"]}