{"version":3,"file":"resources.js","sourceRoot":"","sources":["../../../lib/manager/terraform/resources.ts"],"names":[],"mappings":"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","sourcesContent":["import * as datasourceHelm from '../../datasource/helm';\nimport { SkipReason } from '../../types';\nimport { isValid } from '../../versioning/hashicorp';\nimport { PackageDependency } from '../common';\nimport { getDep } from '../dockerfile/extract';\nimport {\n  ExtractionResult,\n  ResourceManagerData,\n  TerraformDependencyTypes,\n  TerraformResourceTypes,\n  checkIfStringIsPath,\n  keyValueExtractionRegex,\n  resourceTypeExtractionRegex,\n} from './util';\n\nfunction applyDockerDependency(\n  dep: PackageDependency<ResourceManagerData>,\n  value: string\n): void {\n  const dockerDep = getDep(value);\n  Object.assign(dep, dockerDep);\n}\n\nexport function extractTerraformResource(\n  startingLine: number,\n  lines: string[]\n): ExtractionResult {\n  let lineNumber = startingLine;\n  let line = lines[lineNumber];\n  const deps: PackageDependency[] = [];\n  const dep: PackageDependency<ResourceManagerData> = {\n    managerData: {\n      terraformDependencyType: TerraformDependencyTypes.resource,\n    },\n  };\n\n  const typeMatch = resourceTypeExtractionRegex.exec(line);\n\n  dep.managerData.resourceType =\n    TerraformResourceTypes[typeMatch?.groups?.type] ??\n    TerraformResourceTypes.unknown;\n\n  do {\n    lineNumber += 1;\n    line = lines[lineNumber];\n    const kvMatch = keyValueExtractionRegex.exec(line);\n    if (kvMatch) {\n      switch (kvMatch.groups.key) {\n        case 'chart':\n        case 'image':\n        case 'name':\n        case 'repository':\n          dep.managerData[kvMatch.groups.key] = kvMatch.groups.value;\n          break;\n        case 'version':\n          dep.currentValue = kvMatch.groups.value;\n          break;\n        default:\n          /* istanbul ignore next */\n          break;\n      }\n    }\n  } while (line.trim() !== '}');\n  deps.push(dep);\n  return { lineNumber, dependencies: deps };\n}\n\nexport function analyseTerraformResource(\n  dep: PackageDependency<ResourceManagerData>\n): void {\n  /* eslint-disable no-param-reassign */\n\n  switch (dep.managerData.resourceType) {\n    case TerraformResourceTypes.docker_container:\n      if (!dep.managerData.image) {\n        dep.skipReason = SkipReason.InvalidDependencySpecification;\n      } else {\n        applyDockerDependency(dep, dep.managerData.image);\n      }\n      break;\n\n    case TerraformResourceTypes.docker_image:\n      if (!dep.managerData.name) {\n        dep.skipReason = SkipReason.InvalidDependencySpecification;\n      } else {\n        applyDockerDependency(dep, dep.managerData.name);\n      }\n      break;\n\n    case TerraformResourceTypes.docker_service:\n      if (!dep.managerData.image) {\n        dep.skipReason = SkipReason.InvalidDependencySpecification;\n      } else {\n        applyDockerDependency(dep, dep.managerData.image);\n      }\n      break;\n\n    case TerraformResourceTypes.helm_release:\n      if (dep.managerData.chart == null) {\n        dep.skipReason = SkipReason.InvalidName;\n      } else if (checkIfStringIsPath(dep.managerData.chart)) {\n        dep.skipReason = SkipReason.LocalChart;\n      } else if (!isValid(dep.currentValue)) {\n        dep.skipReason = SkipReason.UnsupportedVersion;\n      }\n      dep.depType = 'helm';\n      dep.registryUrls = [dep.managerData.repository];\n      dep.depName = dep.managerData.chart;\n      dep.depNameShort = dep.managerData.chart;\n      dep.datasource = datasourceHelm.id;\n      break;\n\n    default:\n      dep.skipReason = SkipReason.UnsupportedValue;\n      break;\n  }\n  /* eslint-enable no-param-reassign */\n}\n"]}