{"version":3,"file":"required_providers.js","sourceRoot":"","sources":["../../../lib/manager/terraform/required_providers.ts"],"names":[],"mappings":";;;AACA,iCAIgB;AAEH,QAAA,4BAA4B,GAAG,4BAA4B,CAAC;AAEzE,SAAS,YAAY,CACnB,OAAe,EACf,KAAe,EACf,GAAsB;IAEtB,IAAI,UAAU,GAAG,OAAO,CAAC;IACzB,IAAI,IAAY,CAAC;IACjB,GAAG;QACD,UAAU,IAAI,CAAC,CAAC;QAChB,IAAI,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC;QACzB,MAAM,OAAO,GAAG,8BAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACnD,IAAI,OAAO,EAAE;YACX,sCAAsC;YACtC,QAAQ,OAAO,CAAC,MAAM,CAAC,GAAG,EAAE;gBAC1B,KAAK,QAAQ;oBACX,GAAG,CAAC,WAAW,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC;oBAC9C,MAAM;gBAER,KAAK,SAAS;oBACZ,GAAG,CAAC,YAAY,GAAG,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC;oBACxC,MAAM;gBAER,0BAA0B;gBAC1B;oBACE,MAAM;aACT;YACD,qCAAqC;SACtC;KACF,QAAQ,IAAI,CAAC,IAAI,EAAE,KAAK,GAAG,EAAE;IAC9B,OAAO,UAAU,CAAC;AACpB,CAAC;AAED,SAAgB,iCAAiC,CAC/C,YAAoB,EACpB,KAAe;IAEf,IAAI,UAAU,GAAG,YAAY,CAAC;IAC9B,IAAI,IAAY,CAAC;IACjB,MAAM,IAAI,GAAwB,EAAE,CAAC;IACrC,GAAG;QACD,MAAM,GAAG,GAAsB;YAC7B,WAAW,EAAE;gBACX,uBAAuB,EAAE,+BAAwB,CAAC,kBAAkB;aACrE;SACF,CAAC;QAEF,UAAU,IAAI,CAAC,CAAC;QAChB,IAAI,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC;QACzB,MAAM,OAAO,GAAG,8BAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACnD,IAAI,OAAO,EAAE;YACX,GAAG,CAAC,YAAY,GAAG,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC;YACxC,GAAG,CAAC,WAAW,CAAC,UAAU,GAAG,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC;YAChD,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SAChB;aAAM;YACL,MAAM,SAAS,GAAG,oCAA4B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAE1D,IAAI,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,MAAM,EAAE;gBACrB,GAAG,CAAC,WAAW,CAAC,UAAU,GAAG,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC;gBAClD,UAAU,GAAG,YAAY,CAAC,UAAU,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;gBAClD,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aAChB;SACF;KACF,QAAQ,IAAI,CAAC,IAAI,EAAE,KAAK,GAAG,EAAE;IAC9B,OAAO,EAAE,UAAU,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC;AAC5C,CAAC;AAhCD,8EAgCC","sourcesContent":["import { PackageDependency } from '../common';\nimport {\n  ExtractionResult,\n  TerraformDependencyTypes,\n  keyValueExtractionRegex,\n} from './util';\n\nexport const providerBlockExtractionRegex = /^\\s*(?<key>[^\\s]+)\\s+=\\s+{/;\n\nfunction extractBlock(\n  lineNum: number,\n  lines: string[],\n  dep: PackageDependency\n): number {\n  let lineNumber = lineNum;\n  let line: string;\n  do {\n    lineNumber += 1;\n    line = lines[lineNumber];\n    const kvMatch = keyValueExtractionRegex.exec(line);\n    if (kvMatch) {\n      /* eslint-disable no-param-reassign */\n      switch (kvMatch.groups.key) {\n        case 'source':\n          dep.managerData.source = kvMatch.groups.value;\n          break;\n\n        case 'version':\n          dep.currentValue = kvMatch.groups.value;\n          break;\n\n        /* istanbul ignore next */\n        default:\n          break;\n      }\n      /* eslint-enable no-param-reassign */\n    }\n  } while (line.trim() !== '}');\n  return lineNumber;\n}\n\nexport function extractTerraformRequiredProviders(\n  startingLine: number,\n  lines: string[]\n): ExtractionResult {\n  let lineNumber = startingLine;\n  let line: string;\n  const deps: PackageDependency[] = [];\n  do {\n    const dep: PackageDependency = {\n      managerData: {\n        terraformDependencyType: TerraformDependencyTypes.required_providers,\n      },\n    };\n\n    lineNumber += 1;\n    line = lines[lineNumber];\n    const kvMatch = keyValueExtractionRegex.exec(line);\n    if (kvMatch) {\n      dep.currentValue = kvMatch.groups.value;\n      dep.managerData.moduleName = kvMatch.groups.key;\n      deps.push(dep);\n    } else {\n      const nameMatch = providerBlockExtractionRegex.exec(line);\n\n      if (nameMatch?.groups) {\n        dep.managerData.moduleName = nameMatch.groups.key;\n        lineNumber = extractBlock(lineNumber, lines, dep);\n        deps.push(dep);\n      }\n    }\n  } while (line.trim() !== '}');\n  return { lineNumber, dependencies: deps };\n}\n"]}