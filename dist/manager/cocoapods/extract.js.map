{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../lib/manager/cocoapods/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import * as datasourceGithubTags from '../../datasource/github-tags';\nimport * as datasourcePod from '../../datasource/pod';\nimport { logger } from '../../logger';\nimport { SkipReason } from '../../types';\nimport { PackageDependency, PackageFile } from '../common';\n\nconst regexMappings = [\n  /^\\s*pod\\s+(['\"])(?<spec>[^'\"/]+)(\\/(?<subspec>[^'\"]+))?\\1/,\n  /^\\s*pod\\s+(['\"])[^'\"]+\\1\\s*,\\s*(['\"])(?<currentValue>[^'\"]+)\\2\\s*$/,\n  /,\\s*:git\\s*=>\\s*(['\"])(?<git>[^'\"]+)\\1/,\n  /,\\s*:tag\\s*=>\\s*(['\"])(?<tag>[^'\"]+)\\1/,\n  /,\\s*:path\\s*=>\\s*(['\"])(?<path>[^'\"]+)\\1/,\n  /^\\s*source\\s*(['\"])(?<source>[^'\"]+)\\1/,\n];\n\nexport interface ParsedLine {\n  depName?: string;\n  groupName?: string;\n  spec?: string;\n  subspec?: string;\n  currentValue?: string;\n  git?: string;\n  tag?: string;\n  path?: string;\n  source?: string;\n}\n\nexport function parseLine(line: string): ParsedLine {\n  const result: ParsedLine = {};\n  if (!line) {\n    return result;\n  }\n  for (const regex of Object.values(regexMappings)) {\n    const match = regex.exec(line.replace(/#.*$/, ''));\n    if (match?.groups) {\n      Object.assign(result, match.groups);\n    }\n  }\n\n  if (result.spec) {\n    const depName = result.subspec\n      ? `${result.spec}/${result.subspec}`\n      : result.spec;\n    const groupName = result.spec;\n    if (depName) {\n      result.depName = depName;\n    }\n    if (groupName) {\n      result.groupName = groupName;\n    }\n    delete result.spec;\n    delete result.subspec;\n  }\n\n  return result;\n}\n\nexport function gitDep(parsedLine: ParsedLine): PackageDependency | null {\n  const { depName, git, tag } = parsedLine;\n  if (git?.startsWith('https://github.com/')) {\n    const githubMatch = /https:\\/\\/github\\.com\\/(?<account>[^/]+)\\/(?<repo>[^/]+)/.exec(\n      git\n    );\n    const { account, repo } = githubMatch?.groups || {};\n    if (account && repo) {\n      return {\n        datasource: datasourceGithubTags.id,\n        depName,\n        lookupName: `${account}/${repo.replace(/\\.git$/, '')}`,\n        currentValue: tag,\n      };\n    }\n  }\n\n  return null; // TODO: gitlab or gitTags datasources?\n}\n\nexport function extractPackageFile(content: string): PackageFile | null {\n  logger.trace('cocoapods.extractPackageFile()');\n  const deps: PackageDependency[] = [];\n  const lines: string[] = content.split('\\n');\n\n  const registryUrls: string[] = [];\n\n  for (let lineNumber = 0; lineNumber < lines.length; lineNumber += 1) {\n    const line = lines[lineNumber];\n    const parsedLine = parseLine(line);\n    const {\n      depName,\n      groupName,\n      currentValue,\n      git,\n      tag,\n      path,\n      source,\n    }: ParsedLine = parsedLine;\n\n    if (source) {\n      registryUrls.push(source.replace(/\\/*$/, ''));\n    }\n\n    if (depName) {\n      const managerData = { lineNumber };\n      let dep: PackageDependency = {\n        depName,\n        groupName,\n        skipReason: SkipReason.UnknownVersion,\n      };\n\n      if (currentValue) {\n        dep = {\n          depName,\n          groupName,\n          datasource: datasourcePod.id,\n          currentValue,\n          managerData,\n          registryUrls,\n        };\n      } else if (git) {\n        if (tag) {\n          dep = { ...gitDep(parsedLine), managerData };\n        } else {\n          dep = {\n            depName,\n            groupName,\n            skipReason: SkipReason.GitDependency,\n          };\n        }\n      } else if (path) {\n        dep = {\n          depName,\n          groupName,\n          skipReason: SkipReason.PathDependency,\n        };\n      }\n\n      deps.push(dep);\n    }\n  }\n\n  return deps.length ? { deps } : null;\n}\n"]}