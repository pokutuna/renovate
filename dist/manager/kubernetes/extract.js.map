{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../lib/manager/kubernetes/extract.ts"],"names":[],"mappings":";;;AAAA,yCAAsC;AAEtC,mDAA+C;AAE/C,SAAgB,kBAAkB,CAAC,OAAe;IAChD,eAAM,CAAC,KAAK,CAAC,iCAAiC,CAAC,CAAC;IAChD,IAAI,IAAI,GAAwB,EAAE,CAAC;IAEnC,MAAM,oBAAoB,GACxB,mBAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACnE,IAAI,CAAC,oBAAoB,EAAE;QACzB,OAAO,IAAI,CAAC;KACb;IAED,KAAK,MAAM,IAAI,IAAI,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;QACtC,MAAM,KAAK,GAAG,0CAA0C,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACpE,IAAI,KAAK,EAAE;YACT,MAAM,WAAW,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YAC7B,MAAM,GAAG,GAAG,gBAAM,CAAC,WAAW,CAAC,CAAC;YAChC,eAAM,CAAC,KAAK,CACV;gBACE,OAAO,EAAE,GAAG,CAAC,OAAO;gBACpB,YAAY,EAAE,GAAG,CAAC,YAAY;gBAC9B,aAAa,EAAE,GAAG,CAAC,aAAa;aACjC,EACD,kBAAkB,CACnB,CAAC;YACF,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SAChB;KACF;IACD,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,WAAC,OAAA,QAAC,GAAG,CAAC,YAAY,0CAAE,QAAQ,CAAC,IAAI,EAAC,CAAA,EAAA,CAAC,CAAC;IAC/D,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;QAChB,OAAO,IAAI,CAAC;KACb;IACD,OAAO,EAAE,IAAI,EAAE,CAAC;AAClB,CAAC;AA/BD,gDA+BC","sourcesContent":["import { logger } from '../../logger';\nimport { PackageDependency, PackageFile } from '../common';\nimport { getDep } from '../dockerfile/extract';\n\nexport function extractPackageFile(content: string): PackageFile | null {\n  logger.trace('kubernetes.extractPackageFile()');\n  let deps: PackageDependency[] = [];\n\n  const isKubernetesManifest =\n    /\\s*apiVersion\\s*:/.test(content) && /\\s*kind\\s*:/.test(content);\n  if (!isKubernetesManifest) {\n    return null;\n  }\n\n  for (const line of content.split('\\n')) {\n    const match = /^\\s*-?\\s*image:\\s*'?\"?([^\\s'\"]+)'?\"?\\s*$/.exec(line);\n    if (match) {\n      const currentFrom = match[1];\n      const dep = getDep(currentFrom);\n      logger.debug(\n        {\n          depName: dep.depName,\n          currentValue: dep.currentValue,\n          currentDigest: dep.currentDigest,\n        },\n        'Kubernetes image'\n      );\n      deps.push(dep);\n    }\n  }\n  deps = deps.filter((dep) => !dep.currentValue?.includes('${'));\n  if (!deps.length) {\n    return null;\n  }\n  return { deps };\n}\n"]}