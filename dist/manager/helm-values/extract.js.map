{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../lib/manager/helm-values/extract.ts"],"names":[],"mappings":";;;;;;AAAA,sDAA2B;AAC3B,yCAAsC;AAEtC,mDAA+C;AAE/C,iCAGgB;AAEhB;;;;GAIG;AACH,SAAS,gBAAgB,CACvB,aAAiD,EACjD,mBAA6C;IAE7C,IAAI,CAAC,aAAa,IAAI,OAAO,aAAa,KAAK,QAAQ,EAAE;QACvD,OAAO,mBAAmB,CAAC;KAC5B;IAED,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;QACzC,IAAI,uCAAgC,CAAC,GAAG,EAAE,aAAa,CAAC,GAAG,CAAC,CAAC,EAAE;YAC7D,MAAM,WAAW,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC;YAEvC,MAAM,QAAQ,GAAG,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,WAAW,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;YACxE,mBAAmB,CAAC,IAAI,CACtB,gBAAM,CAAC,GAAG,QAAQ,GAAG,WAAW,CAAC,UAAU,IAAI,WAAW,CAAC,GAAG,EAAE,EAAE,KAAK,CAAC,CACzE,CAAC;SACH;aAAM;YACL,gBAAgB,CAAC,aAAa,CAAC,GAAG,CAAC,EAAE,mBAAmB,CAAC,CAAC;SAC3D;IACH,CAAC,CAAC,CAAC;IACH,OAAO,mBAAmB,CAAC;AAC7B,CAAC;AAED,SAAgB,kBAAkB,CAAC,OAAe;IAChD,IAAI,aAAa,CAAC;IAClB,IAAI;QACF,yEAAyE;QACzE,iFAAiF;QACjF,aAAa,GAAG,iBAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;KACxD;IAAC,OAAO,GAAG,EAAE;QACZ,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,EAAE,kCAAkC,CAAC,CAAC;QAC1D,OAAO,IAAI,CAAC;KACb;IACD,IAAI;QACF,MAAM,IAAI,GAAG,gBAAgB,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC;QACjD,IAAI,IAAI,CAAC,MAAM,EAAE;YACf,eAAM,CAAC,KAAK,CAAC,EAAE,IAAI,EAAE,EAAE,mCAAmC,CAAC,CAAC;YAC5D,OAAO,EAAE,IAAI,EAAE,CAAC;SACjB;KACF;IAAC,OAAO,GAAG,EAAE,0BAA0B,CAAC;QACvC,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,EAAE,0CAA0C,CAAC,CAAC;KACnE;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AApBD,gDAoBC","sourcesContent":["import yaml from 'js-yaml';\nimport { logger } from '../../logger';\nimport { PackageDependency, PackageFile } from '../common';\nimport { getDep } from '../dockerfile/extract';\n\nimport {\n  HelmDockerImageDependency,\n  matchesHelmValuesDockerHeuristic,\n} from './util';\n\n/**\n * Recursively find all supported dependencies in the yaml object.\n *\n * @param parsedContent\n */\nfunction findDependencies(\n  parsedContent: object | HelmDockerImageDependency,\n  packageDependencies: Array<PackageDependency>\n): Array<PackageDependency> {\n  if (!parsedContent || typeof parsedContent !== 'object') {\n    return packageDependencies;\n  }\n\n  Object.keys(parsedContent).forEach((key) => {\n    if (matchesHelmValuesDockerHeuristic(key, parsedContent[key])) {\n      const currentItem = parsedContent[key];\n\n      const registry = currentItem.registry ? `${currentItem.registry}/` : '';\n      packageDependencies.push(\n        getDep(`${registry}${currentItem.repository}:${currentItem.tag}`, false)\n      );\n    } else {\n      findDependencies(parsedContent[key], packageDependencies);\n    }\n  });\n  return packageDependencies;\n}\n\nexport function extractPackageFile(content: string): PackageFile {\n  let parsedContent;\n  try {\n    // a parser that allows extracting line numbers would be preferable, with\n    // the current approach we need to match anything we find again during the update\n    parsedContent = yaml.safeLoad(content, { json: true });\n  } catch (err) {\n    logger.debug({ err }, 'Failed to parse helm-values YAML');\n    return null;\n  }\n  try {\n    const deps = findDependencies(parsedContent, []);\n    if (deps.length) {\n      logger.debug({ deps }, 'Found dependencies in helm-values');\n      return { deps };\n    }\n  } catch (err) /* istanbul ignore next */ {\n    logger.error({ err }, 'Error parsing helm-values parsed content');\n  }\n  return null;\n}\n"]}