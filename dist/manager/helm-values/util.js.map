{"version":3,"file":"util.js","sourceRoot":"","sources":["../../../lib/manager/helm-values/util.ts"],"names":[],"mappings":";;;AAMA;;;;;;GAMG;AACH,SAAS,MAAM,CAAsB,CAAI,EAAE,CAAI;IAC7C,OAAO,OAAO,CAAC,KAAK,QAAQ,IAAI,CAAC,IAAI,CAAC,CAAC;AACzC,CAAC;AAED;;;;;;;;;;;GAWG;AACH,SAAgB,gCAAgC,CAC9C,SAAiB,EACjB,IAAa;IAEb,OAAO,CACL,SAAS,KAAK,OAAO;QACrB,IAAI;QACJ,OAAO,IAAI,KAAK,QAAQ;QACxB,MAAM,CAAC,YAAY,EAAE,IAAI,CAAC;QAC1B,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CACpB,CAAC;AACJ,CAAC;AAXD,4EAWC","sourcesContent":["export type HelmDockerImageDependency = {\n  registry?: string;\n  repository: string;\n  tag: string;\n};\n\n/**\n * This is a workaround helper to allow the usage of 'unknown' in\n * a type-guard function while checking that keys exist.\n *\n * @see https://github.com/microsoft/TypeScript/issues/21732\n * @see https://stackoverflow.com/a/58630274\n */\nfunction hasKey<K extends string, T>(k: K, o: T): o is T & Record<K, unknown> {\n  return typeof o === 'object' && k in o;\n}\n\n/**\n * Type guard to determine whether a given partial Helm values.yaml object potentially\n * defines a Helm Docker dependency.\n *\n * There is no exact standard of how Docker dependencies are defined in Helm\n * values.yaml files (as of January 1st 2020), this function defines a\n * heuristic based on the most commonly used format in the stable Helm charts:\n *\n * image:\n *   repository: 'something'\n *   tag: v1.0.0\n */\nexport function matchesHelmValuesDockerHeuristic(\n  parentKey: string,\n  data: unknown\n): data is HelmDockerImageDependency {\n  return (\n    parentKey === 'image' &&\n    data &&\n    typeof data === 'object' &&\n    hasKey('repository', data) &&\n    hasKey('tag', data)\n  );\n}\n"]}