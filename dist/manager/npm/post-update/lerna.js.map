{"version":3,"file":"lerna.js","sourceRoot":"","sources":["../../../../lib/manager/npm/post-update/lerna.ts"],"names":[],"mappings":"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","sourcesContent":["import semver, { validRange } from 'semver';\nimport { quote } from 'shlex';\nimport { join } from 'upath';\nimport { logger } from '../../../logger';\nimport { ExecOptions, exec } from '../../../util/exec';\nimport { PackageFile, PostUpdateConfig } from '../../common';\nimport { getNodeConstraint } from './node-version';\nimport { optimizeCommand } from './yarn';\n\nexport interface GenerateLockFileResult {\n  error?: boolean;\n  stderr?: string;\n}\n\n// Exported for testability\nexport function getLernaVersion(\n  lernaPackageFile: Partial<PackageFile>\n): string {\n  const lernaDep = lernaPackageFile.deps?.find((d) => d.depName === 'lerna');\n  if (!lernaDep || !semver.validRange(lernaDep.currentValue)) {\n    logger.warn(\n      `Could not detect lerna version in ${lernaPackageFile.packageFile}, using 'latest'`\n    );\n    return 'latest';\n  }\n  return lernaDep.currentValue;\n}\n\nexport async function generateLockFiles(\n  lernaPackageFile: Partial<PackageFile>,\n  cwd: string,\n  config: PostUpdateConfig,\n  env: NodeJS.ProcessEnv,\n  skipInstalls?: boolean\n): Promise<GenerateLockFileResult> {\n  const lernaClient = lernaPackageFile.lernaClient;\n  if (!lernaClient) {\n    logger.warn('No lernaClient specified - returning');\n    return { error: false };\n  }\n  logger.debug(`Spawning lerna with ${lernaClient} to create lock files`);\n  const preCommands = [];\n  const cmd = [];\n  let cmdOptions = '';\n  try {\n    if (lernaClient === 'yarn') {\n      let installYarn = 'npm i -g yarn';\n      const yarnCompatibility = config.compatibility?.yarn;\n      if (validRange(yarnCompatibility)) {\n        installYarn += `@${quote(yarnCompatibility)}`;\n      }\n      preCommands.push(installYarn);\n      if (skipInstalls !== false) {\n        preCommands.push(optimizeCommand);\n      }\n      cmdOptions = '--ignore-scripts --ignore-engines --ignore-platform';\n    } else if (lernaClient === 'npm') {\n      let installNpm = 'npm i -g npm';\n      const npmCompatibility = config.compatibility?.npm;\n      if (validRange(npmCompatibility)) {\n        installNpm += `@${quote(npmCompatibility)}`;\n        preCommands.push(installNpm);\n      }\n      cmdOptions = '--ignore-scripts  --no-audit';\n      if (skipInstalls !== false) {\n        cmdOptions += ' --package-lock-only';\n      }\n    } else {\n      logger.warn({ lernaClient }, 'Unknown lernaClient');\n      return { error: false };\n    }\n    let lernaCommand = `lerna bootstrap --no-ci --ignore-scripts -- `;\n    if (global.trustLevel === 'high' && config.ignoreScripts !== false) {\n      cmdOptions = cmdOptions.replace('--ignore-scripts ', '');\n      lernaCommand = lernaCommand.replace('--ignore-scripts ', '');\n    }\n    lernaCommand += cmdOptions;\n    const tagConstraint = await getNodeConstraint(config);\n    const execOptions: ExecOptions = {\n      cwd,\n      extraEnv: {\n        NPM_CONFIG_CACHE: env.NPM_CONFIG_CACHE,\n        npm_config_store: env.npm_config_store,\n      },\n      docker: {\n        image: 'renovate/node',\n        tagScheme: 'npm',\n        tagConstraint,\n        preCommands,\n      },\n    };\n    if (config.dockerMapDotfiles) {\n      const homeDir =\n        process.env.HOME || process.env.HOMEPATH || process.env.USERPROFILE;\n      const homeNpmrc = join(homeDir, '.npmrc');\n      execOptions.docker.volumes = [[homeNpmrc, '/home/ubuntu/.npmrc']];\n    }\n    cmd.push(`${lernaClient} install ${cmdOptions}`);\n    const lernaVersion = getLernaVersion(lernaPackageFile);\n    logger.debug('Using lerna version ' + lernaVersion);\n    preCommands.push(`npm i -g lerna@${quote(lernaVersion)}`);\n    cmd.push(lernaCommand);\n    await exec(cmd, execOptions);\n  } catch (err) /* istanbul ignore next */ {\n    logger.debug(\n      {\n        cmd,\n        err,\n        type: 'lerna',\n        lernaClient,\n      },\n      'lock file error'\n    );\n    return { error: true, stderr: err.stderr };\n  }\n  return { error: false };\n}\n"]}