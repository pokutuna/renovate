{"version":3,"file":"node-version.js","sourceRoot":"","sources":["../../../../lib/manager/npm/post-update/node-version.ts"],"names":[],"mappings":";;;AAAA,mCAAoC;AACpC,4CAAyC;AACzC,yCAAqE;AAGrE,KAAK,UAAU,WAAW,CAAC,QAAgB;IACzC,IAAI;QACF,MAAM,UAAU,GAAG,CAAC,MAAM,kBAAa,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;aACvD,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;aACd,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;QACrB,IAAI,mBAAU,CAAC,UAAU,CAAC,EAAE;YAC1B,eAAM,CAAC,KAAK,CAAC,0BAA0B,UAAU,UAAU,QAAQ,EAAE,CAAC,CAAC;YACvE,OAAO,UAAU,CAAC;SACnB;KACF;IAAC,OAAO,GAAG,EAAE;QACZ,aAAa;KACd;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAED,SAAS,wBAAwB,CAC/B,MAAwB;;IAExB,MAAM,UAAU,SAAG,MAAM,CAAC,aAAa,0CAAE,IAAI,CAAC;IAC9C,IAAI,UAAU,IAAI,mBAAU,CAAC,UAAU,CAAC,EAAE;QACxC,eAAM,CAAC,KAAK,CAAC,0BAA0B,UAAU,qBAAqB,CAAC,CAAC;QACxE,OAAO,UAAU,CAAC;KACnB;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAEM,KAAK,UAAU,iBAAiB,CACrC,MAAwB;IAExB,MAAM,EAAE,WAAW,EAAE,GAAG,MAAM,CAAC;IAC/B,MAAM,UAAU,GACd,CAAC,MAAM,WAAW,CAAC,uBAAkB,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC,CAAC;QAC9D,CAAC,MAAM,WAAW,CAAC,uBAAkB,CAAC,WAAW,EAAE,eAAe,CAAC,CAAC,CAAC;QACrE,wBAAwB,CAAC,MAAM,CAAC,CAAC;IACnC,IAAI,CAAC,UAAU,EAAE;QACf,eAAM,CAAC,KAAK,CAAC,yCAAyC,CAAC,CAAC;KACzD;IACD,OAAO,UAAU,CAAC;AACpB,CAAC;AAZD,8CAYC","sourcesContent":["import { validRange } from 'semver';\nimport { logger } from '../../../logger';\nimport { getSiblingFileName, readLocalFile } from '../../../util/fs';\nimport { PostUpdateConfig } from '../../common';\n\nasync function getNodeFile(filename: string): Promise<string> | null {\n  try {\n    const constraint = (await readLocalFile(filename, 'utf8'))\n      .split('\\n')[0]\n      .replace(/^v/, '');\n    if (validRange(constraint)) {\n      logger.debug(`Using node constraint \"${constraint}\" from ${filename}`);\n      return constraint;\n    }\n  } catch (err) {\n    // do nothing\n  }\n  return null;\n}\n\nfunction getPackageJsonConstraint(\n  config: PostUpdateConfig\n): Promise<string> | null {\n  const constraint = config.compatibility?.node;\n  if (constraint && validRange(constraint)) {\n    logger.debug(`Using node constraint \"${constraint}\" from package.json`);\n    return constraint;\n  }\n  return null;\n}\n\nexport async function getNodeConstraint(\n  config: PostUpdateConfig\n): Promise<string> | null {\n  const { packageFile } = config;\n  const constraint =\n    (await getNodeFile(getSiblingFileName(packageFile, '.nvmrc'))) ||\n    (await getNodeFile(getSiblingFileName(packageFile, '.node-version'))) ||\n    getPackageJsonConstraint(config);\n  if (!constraint) {\n    logger.debug('No node constraint found - using latest');\n  }\n  return constraint;\n}\n"]}