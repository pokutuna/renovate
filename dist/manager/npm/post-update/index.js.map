{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/manager/npm/post-update/index.ts"],"names":[],"mappings":"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","sourcesContent":["import path from 'path';\nimport is from '@sindresorhus/is';\nimport upath from 'upath';\nimport { SYSTEM_INSUFFICIENT_DISK_SPACE } from '../../../constants/error-messages';\nimport { id as npmId } from '../../../datasource/npm';\nimport { logger } from '../../../logger';\nimport { ExternalHostError } from '../../../types/errors/external-host-error';\nimport { getChildProcessEnv } from '../../../util/exec/env';\nimport {\n  deleteLocalFile,\n  ensureDir,\n  outputFile,\n  readFile,\n  remove,\n  unlink,\n  writeFile,\n} from '../../../util/fs';\nimport { branchExists, getFile, getRepoStatus } from '../../../util/git';\nimport * as hostRules from '../../../util/host-rules';\nimport { PackageFile, PostUpdateConfig, Upgrade } from '../../common';\nimport * as lerna from './lerna';\nimport * as npm from './npm';\nimport * as pnpm from './pnpm';\nimport * as yarn from './yarn';\n\n// Strips empty values, deduplicates, and returns the directories from filenames\n// istanbul ignore next\nconst getDirs = (arr: string[]): string[] =>\n  Array.from(new Set(arr.filter(Boolean)));\n\nexport interface DetermineLockFileDirsResult {\n  yarnLockDirs: string[];\n  npmLockDirs: string[];\n  pnpmShrinkwrapDirs: string[];\n  lernaDirs: string[];\n}\n// istanbul ignore next\nexport function determineLockFileDirs(\n  config: PostUpdateConfig,\n  packageFiles: AdditionalPackageFiles\n): DetermineLockFileDirsResult {\n  const npmLockDirs = [];\n  const yarnLockDirs = [];\n  const pnpmShrinkwrapDirs = [];\n  const lernaDirs = [];\n\n  for (const upgrade of config.upgrades) {\n    if (upgrade.updateType === 'lockFileMaintenance') {\n      // Return every directory that contains a lockfile\n      if (upgrade.lernaDir && upgrade.npmLock) {\n        lernaDirs.push(upgrade.lernaDir);\n      } else {\n        yarnLockDirs.push(upgrade.yarnLock);\n        npmLockDirs.push(upgrade.npmLock);\n        pnpmShrinkwrapDirs.push(upgrade.pnpmShrinkwrap);\n      }\n      continue; // eslint-disable-line no-continue\n    }\n    if (upgrade.isLockfileUpdate) {\n      yarnLockDirs.push(upgrade.yarnLock);\n      npmLockDirs.push(upgrade.npmLock);\n    }\n  }\n\n  if (\n    config.upgrades.every(\n      (upgrade: Upgrade) =>\n        upgrade.updateType === 'lockFileMaintenance' || upgrade.isLockfileUpdate\n    )\n  ) {\n    return {\n      yarnLockDirs: getDirs(yarnLockDirs),\n      npmLockDirs: getDirs(npmLockDirs),\n      pnpmShrinkwrapDirs: getDirs(pnpmShrinkwrapDirs),\n      lernaDirs: getDirs(lernaDirs),\n    };\n  }\n\n  function getPackageFile(fileName: string): Partial<PackageFile> {\n    logger.trace('Looking for packageFile: ' + fileName);\n    for (const packageFile of packageFiles.npm) {\n      if (packageFile.packageFile === fileName) {\n        logger.trace({ packageFile }, 'Found packageFile');\n        return packageFile;\n      }\n      logger.trace('No match');\n    }\n    return {};\n  }\n\n  for (const p of config.updatedPackageFiles) {\n    logger.trace(`Checking ${p.name} for lock files`);\n    const packageFile = getPackageFile(p.name);\n    // lerna first\n    if (packageFile.lernaDir && packageFile.npmLock) {\n      logger.debug(`${packageFile.packageFile} has lerna lock file`);\n      lernaDirs.push(packageFile.lernaDir);\n    } else if (\n      packageFile.lernaDir &&\n      packageFile.yarnLock &&\n      !packageFile.hasYarnWorkspaces\n    ) {\n      lernaDirs.push(packageFile.lernaDir);\n    } else {\n      // push full lock file names and convert them later\n      yarnLockDirs.push(packageFile.yarnLock);\n      npmLockDirs.push(packageFile.npmLock);\n      pnpmShrinkwrapDirs.push(packageFile.pnpmShrinkwrap);\n    }\n  }\n\n  return {\n    yarnLockDirs: getDirs(yarnLockDirs),\n    npmLockDirs: getDirs(npmLockDirs),\n    pnpmShrinkwrapDirs: getDirs(pnpmShrinkwrapDirs),\n    lernaDirs: getDirs(lernaDirs),\n  };\n}\n\n// istanbul ignore next\nexport async function writeExistingFiles(\n  config: PostUpdateConfig,\n  packageFiles: AdditionalPackageFiles\n): Promise<void> {\n  const npmrcFile = upath.join(config.localDir, '.npmrc');\n  if (config.npmrc) {\n    logger.debug(`Writing repo .npmrc (${config.localDir})`);\n    await outputFile(npmrcFile, config.npmrc);\n  } else if (config.ignoreNpmrcFile) {\n    logger.debug('Removing ignored .npmrc file before artifact generation');\n    await remove(npmrcFile);\n  }\n  if (is.string(config.yarnrc)) {\n    logger.debug(`Writing repo .yarnrc (${config.localDir})`);\n    await outputFile(upath.join(config.localDir, '.yarnrc'), config.yarnrc);\n  }\n  if (!packageFiles.npm) {\n    return;\n  }\n  const npmFiles = packageFiles.npm;\n  logger.debug(\n    { packageFiles: npmFiles.map((n) => n.packageFile) },\n    'Writing package.json files'\n  );\n  for (const packageFile of npmFiles) {\n    const basedir = upath.join(\n      config.localDir,\n      path.dirname(packageFile.packageFile)\n    );\n    const npmrc = packageFile.npmrc || config.npmrc;\n    const npmrcFilename = upath.join(basedir, '.npmrc');\n    if (npmrc) {\n      try {\n        await outputFile(npmrcFilename, npmrc);\n      } catch (err) /* istanbul ignore next */ {\n        logger.warn({ npmrcFilename, err }, 'Error writing .npmrc');\n      }\n    }\n    if (packageFile.yarnrc) {\n      logger.debug(`Writing .yarnrc to ${basedir}`);\n      const yarnrcFilename = upath.join(basedir, '.yarnrc');\n      try {\n        await outputFile(\n          yarnrcFilename,\n          packageFile.yarnrc\n            .replace('--install.pure-lockfile true', '')\n            .replace('--install.frozen-lockfile true', '')\n        );\n      } catch (err) /* istanbul ignore next */ {\n        logger.warn({ yarnrcFilename, err }, 'Error writing .yarnrc');\n      }\n    }\n    const { npmLock } = packageFile;\n    if (npmLock) {\n      const npmLockPath = upath.join(config.localDir, npmLock);\n      if (\n        process.env.RENOVATE_REUSE_PACKAGE_LOCK === 'false' ||\n        config.reuseLockFiles === false\n      ) {\n        logger.debug(`Ensuring ${npmLock} is removed`);\n        await remove(npmLockPath);\n      } else {\n        logger.debug(`Writing ${npmLock}`);\n        let existingNpmLock = await getFile(npmLock);\n        const widens = [];\n        for (const upgrade of config.upgrades) {\n          if (\n            upgrade.rangeStrategy === 'widen' &&\n            upgrade.npmLock === npmLock\n          ) {\n            widens.push(upgrade.depName);\n          }\n        }\n        if (widens.length) {\n          logger.debug(`Removing ${widens} from ${npmLock} to force an update`);\n          try {\n            const npmLockParsed = JSON.parse(existingNpmLock);\n            if (npmLockParsed.dependencies) {\n              widens.forEach((depName) => {\n                delete npmLockParsed.dependencies[depName];\n              });\n            }\n            existingNpmLock = JSON.stringify(npmLockParsed, null, 2);\n          } catch (err) {\n            logger.warn(\n              { npmLock },\n              'Error massaging package-lock.json for widen'\n            );\n          }\n        }\n        await outputFile(npmLockPath, existingNpmLock);\n      }\n    }\n    const { yarnLock } = packageFile;\n    if (yarnLock && config.reuseLockFiles === false) {\n      await deleteLocalFile(yarnLock);\n    }\n    // istanbul ignore next\n    if (packageFile.pnpmShrinkwrap && config.reuseLockFiles === false) {\n      await deleteLocalFile(packageFile.pnpmShrinkwrap);\n    }\n  }\n}\n\n// istanbul ignore next\nexport async function writeUpdatedPackageFiles(\n  config: PostUpdateConfig\n): Promise<void> {\n  logger.trace({ config }, 'writeUpdatedPackageFiles');\n  logger.debug('Writing any updated package files');\n  if (!config.updatedPackageFiles) {\n    logger.debug('No files found');\n    return;\n  }\n  for (const packageFile of config.updatedPackageFiles) {\n    if (!packageFile.name.endsWith('package.json')) {\n      continue; // eslint-disable-line\n    }\n    logger.debug(`Writing ${packageFile.name}`);\n    const massagedFile = JSON.parse(packageFile.contents);\n    try {\n      const { token } = hostRules.find({\n        hostType: config.platform,\n        url: 'https://api.github.com/',\n      });\n      for (const upgrade of config.upgrades) {\n        if (upgrade.gitRef && upgrade.packageFile === packageFile.name) {\n          massagedFile[upgrade.depType][upgrade.depName] = massagedFile[\n            upgrade.depType\n          ][upgrade.depName].replace(\n            'git+https://github.com',\n            `git+https://${token}@github.com`\n          );\n        }\n      }\n    } catch (err) {\n      logger.warn({ err }, 'Error adding token to package files');\n    }\n    await outputFile(\n      upath.join(config.localDir, packageFile.name),\n      JSON.stringify(massagedFile)\n    );\n  }\n}\n\nexport interface AdditionalPackageFiles {\n  npm?: Partial<PackageFile>[];\n}\n\ninterface ArtifactError {\n  lockFile: string;\n  stderr: string;\n}\n\ninterface UpdatedArtifcats {\n  name: string;\n  contents: string | Buffer;\n}\n\n// istanbul ignore next\nasync function getNpmrcContent(dir: string): Promise<string | null> {\n  const npmrcFilePath = upath.join(dir, '.npmrc');\n  let originalNpmrcContent = null;\n  try {\n    originalNpmrcContent = await readFile(npmrcFilePath, 'utf8');\n    logger.debug('npmrc file found in repository');\n  } catch {\n    logger.debug('No npmrc file found in repository');\n    originalNpmrcContent = null;\n  }\n\n  return originalNpmrcContent;\n}\n\n// istanbul ignore next\nasync function updateNpmrcContent(\n  dir: string,\n  originalContent: string,\n  additionalLines: string[]\n): Promise<void> {\n  const npmrcFilePath = upath.join(dir, '.npmrc');\n  const newNpmrc = originalContent\n    ? [originalContent, ...additionalLines]\n    : additionalLines;\n  try {\n    const newContent = newNpmrc.join('\\n');\n    if (newContent !== originalContent) {\n      await writeFile(npmrcFilePath, newContent);\n    }\n  } catch {\n    logger.warn('Unable to write custom npmrc file');\n  }\n}\n\n// istanbul ignore next\nasync function resetNpmrcContent(\n  dir: string,\n  originalContent: string\n): Promise<void> {\n  const npmrcFilePath = upath.join(dir, '.npmrc');\n  if (originalContent) {\n    try {\n      await writeFile(npmrcFilePath, originalContent);\n    } catch {\n      logger.warn('Unable to reset npmrc to original contents');\n    }\n  } else {\n    try {\n      await unlink(npmrcFilePath);\n    } catch {\n      logger.warn('Unable to delete custom npmrc');\n    }\n  }\n}\n\nexport interface WriteExistingFilesResult {\n  artifactErrors: ArtifactError[];\n  updatedArtifacts: UpdatedArtifcats[];\n}\n// istanbul ignore next\nexport async function getAdditionalFiles(\n  config: PostUpdateConfig,\n  packageFiles: AdditionalPackageFiles\n): Promise<WriteExistingFilesResult> {\n  logger.trace({ config }, 'getAdditionalFiles');\n  const artifactErrors: ArtifactError[] = [];\n  const updatedArtifacts: UpdatedArtifcats[] = [];\n  if (!packageFiles.npm?.length) {\n    return { artifactErrors, updatedArtifacts };\n  }\n  if (!config.updateLockFiles) {\n    logger.debug('Skipping lock file generation');\n    return { artifactErrors, updatedArtifacts };\n  }\n  logger.debug('Getting updated lock files');\n  if (\n    config.updateType === 'lockFileMaintenance' &&\n    config.reuseExistingBranch &&\n    (await branchExists(config.branchName))\n  ) {\n    logger.debug('Skipping lockFileMaintenance update');\n    return { artifactErrors, updatedArtifacts };\n  }\n  const dirs = determineLockFileDirs(config, packageFiles);\n  logger.debug({ dirs }, 'lock file dirs');\n  await writeExistingFiles(config, packageFiles);\n  await writeUpdatedPackageFiles(config);\n\n  // Determine the additional npmrc content to add based on host rules\n  const additionalNpmrcContent = [];\n  const npmHostRules = hostRules.findAll({\n    hostType: 'npm',\n  });\n  for (const hostRule of npmHostRules) {\n    if (hostRule.token) {\n      if (hostRule.baseUrl) {\n        additionalNpmrcContent.push(\n          `${hostRule.baseUrl}:_authToken=${hostRule.token}`\n            .replace('https://', '//')\n            .replace('http://', '//')\n        );\n      } else if (hostRule.hostName) {\n        additionalNpmrcContent.push(\n          `//${hostRule.hostName}/:_authToken=${hostRule.token}`\n        );\n      }\n    }\n  }\n\n  const env = getChildProcessEnv([\n    'NPM_CONFIG_CACHE',\n    'YARN_CACHE_FOLDER',\n    'npm_config_store',\n  ]);\n  env.NPM_CONFIG_CACHE =\n    env.NPM_CONFIG_CACHE || upath.join(config.cacheDir, './others/npm');\n  await ensureDir(env.NPM_CONFIG_CACHE);\n  env.YARN_CACHE_FOLDER =\n    env.YARN_CACHE_FOLDER || upath.join(config.cacheDir, './others/yarn');\n  await ensureDir(env.YARN_CACHE_FOLDER);\n  env.npm_config_store =\n    env.npm_config_store || upath.join(config.cacheDir, './others/pnpm');\n  await ensureDir(env.npm_config_store);\n  env.NODE_ENV = 'dev';\n\n  let token = '';\n  try {\n    ({ token } = hostRules.find({\n      hostType: config.platform,\n      url: 'https://api.github.com/',\n    }));\n    token += '@';\n  } catch (err) {\n    logger.warn({ err }, 'Error getting token for packageFile');\n  }\n  for (const lockFile of dirs.npmLockDirs) {\n    const lockFileDir = path.dirname(lockFile);\n    const fullLockFileDir = upath.join(config.localDir, lockFileDir);\n    const npmrcContent = await getNpmrcContent(fullLockFileDir);\n    await updateNpmrcContent(\n      fullLockFileDir,\n      npmrcContent,\n      additionalNpmrcContent\n    );\n    const fileName = path.basename(lockFile);\n    logger.debug(`Generating ${fileName} for ${lockFileDir}`);\n    const upgrades = config.upgrades.filter(\n      (upgrade) => upgrade.npmLock === lockFile\n    );\n    const res = await npm.generateLockFile(\n      fullLockFileDir,\n      env,\n      fileName,\n      config,\n      upgrades\n    );\n    if (res.error) {\n      // istanbul ignore if\n      if (res.stderr?.includes('No matching version found for')) {\n        for (const upgrade of config.upgrades) {\n          if (\n            res.stderr.includes(\n              `No matching version found for ${upgrade.depName}`\n            )\n          ) {\n            logger.debug(\n              { dependency: upgrade.depName, type: 'npm' },\n              'lock file failed for the dependency being updated - skipping branch creation'\n            );\n            const err = new Error(\n              'lock file failed for the dependency being updated - skipping branch creation'\n            );\n            throw new ExternalHostError(err, npmId);\n          }\n        }\n      }\n      artifactErrors.push({\n        lockFile,\n        stderr: res.stderr,\n      });\n    } else {\n      const existingContent = await getFile(\n        lockFile,\n        config.reuseExistingBranch ? config.branchName : config.baseBranch\n      );\n      if (res.lockFile !== existingContent) {\n        logger.debug(`${lockFile} needs updating`);\n        updatedArtifacts.push({\n          name: lockFile,\n          contents: res.lockFile.replace(new RegExp(`${token}`, 'g'), ''),\n        });\n      } else {\n        logger.debug(`${lockFile} hasn't changed`);\n      }\n    }\n    await resetNpmrcContent(fullLockFileDir, npmrcContent);\n  }\n\n  for (const lockFile of dirs.yarnLockDirs) {\n    const lockFileDir = path.dirname(lockFile);\n    const fullLockFileDir = upath.join(config.localDir, lockFileDir);\n    const npmrcContent = await getNpmrcContent(fullLockFileDir);\n    await updateNpmrcContent(\n      fullLockFileDir,\n      npmrcContent,\n      additionalNpmrcContent\n    );\n    logger.debug(`Generating yarn.lock for ${lockFileDir}`);\n    const lockFileName = upath.join(lockFileDir, 'yarn.lock');\n    const upgrades = config.upgrades.filter(\n      (upgrade) => upgrade.yarnLock === lockFile\n    );\n    const res = await yarn.generateLockFile(\n      upath.join(config.localDir, lockFileDir),\n      env,\n      config,\n      upgrades\n    );\n    if (res.error) {\n      // istanbul ignore if\n      if (res.stderr?.includes(`Couldn't find any versions for`)) {\n        for (const upgrade of config.upgrades) {\n          /* eslint-disable no-useless-escape */\n          if (\n            res.stderr.includes(\n              `Couldn't find any versions for \\\\\\\"${upgrade.depName}\\\\\\\"`\n            )\n          ) {\n            logger.debug(\n              { dependency: upgrade.depName, type: 'yarn' },\n              'lock file failed for the dependency being updated - skipping branch creation'\n            );\n            throw new ExternalHostError(\n              new Error(\n                'lock file failed for the dependency being updated - skipping branch creation'\n              ),\n              npmId\n            );\n          }\n          /* eslint-enable no-useless-escape */\n        }\n      }\n      artifactErrors.push({\n        lockFile,\n        stderr: res.stderr,\n      });\n    } else {\n      const existingContent = await getFile(\n        lockFileName,\n        config.reuseExistingBranch ? config.branchName : config.baseBranch\n      );\n      if (res.lockFile !== existingContent) {\n        logger.debug('yarn.lock needs updating');\n        updatedArtifacts.push({\n          name: lockFileName,\n          contents: res.lockFile,\n        });\n        // istanbul ignore next\n        try {\n          const yarnrc = await getFile(upath.join(lockFileDir, '.yarnrc'));\n          if (yarnrc) {\n            const mirrorLine = yarnrc\n              .split('\\n')\n              .find((line) => line.startsWith('yarn-offline-mirror '));\n            if (mirrorLine) {\n              const mirrorPath = mirrorLine\n                .split(' ')[1]\n                .replace(/\"/g, '')\n                .replace(/\\/?$/, '/');\n              const resolvedPath = upath.join(lockFileDir, mirrorPath);\n              logger.debug('Found yarn offline  mirror: ' + resolvedPath);\n              const status = await getRepoStatus();\n              for (const f of status.modified.concat(status.not_added)) {\n                if (f.startsWith(resolvedPath)) {\n                  const localModified = upath.join(config.localDir, f);\n                  updatedArtifacts.push({\n                    name: f,\n                    contents: await readFile(localModified),\n                  });\n                }\n              }\n              for (const f of status.deleted || []) {\n                if (f.startsWith(resolvedPath)) {\n                  updatedArtifacts.push({\n                    name: '|delete|',\n                    contents: f,\n                  });\n                }\n              }\n            }\n          }\n        } catch (err) {\n          logger.error({ err }, 'Error updating yarn offline packages');\n        }\n      } else {\n        logger.debug(\"yarn.lock hasn't changed\");\n      }\n    }\n    await resetNpmrcContent(fullLockFileDir, npmrcContent);\n  }\n\n  for (const lockFile of dirs.pnpmShrinkwrapDirs) {\n    const lockFileDir = path.dirname(lockFile);\n    const fullLockFileDir = upath.join(config.localDir, lockFileDir);\n    const npmrcContent = await getNpmrcContent(fullLockFileDir);\n    await updateNpmrcContent(\n      fullLockFileDir,\n      npmrcContent,\n      additionalNpmrcContent\n    );\n    logger.debug(`Generating pnpm-lock.yaml for ${lockFileDir}`);\n    const upgrades = config.upgrades.filter(\n      (upgrade) => upgrade.pnpmShrinkwrap === lockFile\n    );\n    const res = await pnpm.generateLockFile(\n      upath.join(config.localDir, lockFileDir),\n      env,\n      config,\n      upgrades\n    );\n    if (res.error) {\n      // istanbul ignore if\n      if (res.stdout?.includes(`No compatible version found:`)) {\n        for (const upgrade of config.upgrades) {\n          if (\n            res.stdout.includes(\n              `No compatible version found: ${upgrade.depName}`\n            )\n          ) {\n            logger.debug(\n              { dependency: upgrade.depName, type: 'pnpm' },\n              'lock file failed for the dependency being updated - skipping branch creation'\n            );\n            throw new ExternalHostError(\n              Error(\n                'lock file failed for the dependency being updated - skipping branch creation'\n              ),\n              npmId\n            );\n          }\n        }\n      }\n      artifactErrors.push({\n        lockFile,\n        stderr: res.stderr,\n      });\n    } else {\n      const existingContent = await getFile(\n        lockFile,\n        config.reuseExistingBranch ? config.branchName : config.baseBranch\n      );\n      if (res.lockFile !== existingContent) {\n        logger.debug('pnpm-lock.yaml needs updating');\n        updatedArtifacts.push({\n          name: lockFile,\n          contents: res.lockFile,\n        });\n      } else {\n        logger.debug(\"pnpm-lock.yaml hasn't changed\");\n      }\n    }\n    await resetNpmrcContent(fullLockFileDir, npmrcContent);\n  }\n\n  for (const lernaDir of dirs.lernaDirs) {\n    let lockFile: string;\n    logger.debug(`Finding package.json for lerna directory \"${lernaDir}\"`);\n    const lernaPackageFile = packageFiles.npm.find(\n      (p) => path.dirname(p.packageFile) === lernaDir\n    );\n    if (!lernaPackageFile) {\n      logger.debug('No matching package.json found');\n      throw new Error('lerna-no-lockfile');\n    }\n    if (lernaPackageFile.lernaClient === 'npm') {\n      lockFile = config.npmLock || 'package-lock.json';\n    } else {\n      lockFile = config.yarnLock || 'yarn.lock';\n    }\n    const skipInstalls =\n      lockFile === 'npm-shrinkwrap.json' ? false : config.skipInstalls;\n    const fullLearnaFileDir = upath.join(config.localDir, lernaDir);\n    const npmrcContent = await getNpmrcContent(fullLearnaFileDir);\n    await updateNpmrcContent(\n      fullLearnaFileDir,\n      npmrcContent,\n      additionalNpmrcContent\n    );\n    const res = await lerna.generateLockFiles(\n      lernaPackageFile,\n      fullLearnaFileDir,\n      config,\n      env,\n      skipInstalls\n    );\n    // istanbul ignore else\n    if (res.stderr) {\n      // istanbul ignore if\n      if (res.stderr.includes('ENOSPC: no space left on device')) {\n        throw new Error(SYSTEM_INSUFFICIENT_DISK_SPACE);\n      }\n      for (const upgrade of config.upgrades) {\n        /* eslint-disable no-useless-escape */\n        if (\n          res.stderr.includes(\n            `Couldn't find any versions for \\\\\\\"${upgrade.depName}\\\\\\\"`\n          )\n        ) {\n          logger.debug(\n            { dependency: upgrade.depName, type: 'yarn' },\n            'lock file failed for the dependency being updated - skipping branch creation'\n          );\n          throw new ExternalHostError(\n            Error(\n              'lock file failed for the dependency being updated - skipping branch creation'\n            ),\n            npmId\n          );\n        }\n        /* eslint-enable no-useless-escape */\n        if (\n          res.stderr.includes(\n            `No matching version found for ${upgrade.depName}`\n          )\n        ) {\n          logger.debug(\n            { dependency: upgrade.depName, type: 'npm' },\n            'lock file failed for the dependency being updated - skipping branch creation'\n          );\n          throw new ExternalHostError(\n            Error(\n              'lock file failed for the dependency being updated - skipping branch creation'\n            ),\n            npmId\n          );\n        }\n      }\n      artifactErrors.push({\n        lockFile,\n        stderr: res.stderr,\n      });\n    } else {\n      for (const packageFile of packageFiles.npm) {\n        const filename = packageFile.npmLock || packageFile.yarnLock;\n        logger.trace('Checking for ' + filename);\n        const existingContent = await getFile(\n          filename,\n          config.reuseExistingBranch ? config.branchName : config.baseBranch\n        );\n        if (existingContent) {\n          logger.trace('Found lock file');\n          const lockFilePath = upath.join(config.localDir, filename);\n          logger.trace('Checking against ' + lockFilePath);\n          try {\n            let newContent: string;\n            try {\n              newContent = await readFile(lockFilePath, 'utf8');\n            } catch (err) {\n              newContent = await readFile(\n                lockFilePath.replace(\n                  'npm-shrinkwrap.json',\n                  'package-lock.json'\n                ),\n                'utf8'\n              );\n            }\n            if (newContent !== existingContent) {\n              logger.debug('File is updated: ' + lockFilePath);\n              updatedArtifacts.push({\n                name: filename,\n                contents: newContent,\n              });\n            } else {\n              logger.trace('File is unchanged');\n            }\n          } catch (err) {\n            if (config.updateType === 'lockFileMaintenance') {\n              logger.debug(\n                { packageFile, lockFilePath },\n                'No lock file found after lerna lockFileMaintenance'\n              );\n            } else {\n              logger.warn(\n                { packageFile, lockFilePath },\n                'No lock file found after lerna bootstrap'\n              );\n            }\n          }\n        } else {\n          logger.trace('No lock file found');\n        }\n      }\n    }\n    await resetNpmrcContent(fullLearnaFileDir, npmrcContent);\n  }\n\n  return { artifactErrors, updatedArtifacts };\n}\n"]}