{"version":3,"file":"pnpm.js","sourceRoot":"","sources":["../../../../lib/manager/npm/post-update/pnpm.ts"],"names":[],"mappings":"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","sourcesContent":["import { validRange } from 'semver';\nimport { quote } from 'shlex';\nimport { join } from 'upath';\nimport { logger } from '../../../logger';\nimport { ExecOptions, exec } from '../../../util/exec';\nimport { readFile, remove } from '../../../util/fs';\nimport { PostUpdateConfig, Upgrade } from '../../common';\nimport { getNodeConstraint } from './node-version';\n\nexport interface GenerateLockFileResult {\n  error?: boolean;\n  lockFile?: string;\n  stderr?: string;\n  stdout?: string;\n}\n\nexport async function generateLockFile(\n  cwd: string,\n  env: NodeJS.ProcessEnv,\n  config: PostUpdateConfig,\n  upgrades: Upgrade[] = []\n): Promise<GenerateLockFileResult> {\n  const lockFileName = join(cwd, 'pnpm-lock.yaml');\n  logger.debug(`Spawning pnpm install to create ${lockFileName}`);\n  let lockFile = null;\n  let stdout: string;\n  let stderr: string;\n  let cmd = 'pnpm';\n  try {\n    let installPnpm = 'npm i -g pnpm';\n    const pnpmCompatibility = config.compatibility?.pnpm;\n    if (validRange(pnpmCompatibility)) {\n      installPnpm += `@${quote(pnpmCompatibility)}`;\n    }\n    const preCommands = [installPnpm];\n    const tagConstraint = await getNodeConstraint(config);\n    const execOptions: ExecOptions = {\n      cwd,\n      extraEnv: {\n        NPM_CONFIG_CACHE: env.NPM_CONFIG_CACHE,\n        npm_config_store: env.npm_config_store,\n      },\n      docker: {\n        image: 'renovate/node',\n        tagScheme: 'npm',\n        tagConstraint,\n        preCommands,\n      },\n    };\n    if (config.dockerMapDotfiles) {\n      const homeDir =\n        process.env.HOME || process.env.HOMEPATH || process.env.USERPROFILE;\n      const homeNpmrc = join(homeDir, '.npmrc');\n      execOptions.docker.volumes = [[homeNpmrc, '/home/ubuntu/.npmrc']];\n    }\n    cmd = 'pnpm';\n    let args = 'install --recursive --lockfile-only';\n    if (global.trustLevel !== 'high' || config.ignoreScripts) {\n      args += ' --ignore-scripts';\n      args += ' --ignore-pnpmfile';\n    }\n    logger.debug({ cmd, args }, 'pnpm command');\n\n    if (upgrades.find((upgrade) => upgrade.isLockFileMaintenance)) {\n      logger.debug(\n        `Removing ${lockFileName} first due to lock file maintenance upgrade`\n      );\n      try {\n        await remove(lockFileName);\n      } catch (err) /* istanbul ignore next */ {\n        logger.debug(\n          { err, lockFileName },\n          'Error removing yarn.lock for lock file maintenance'\n        );\n      }\n    }\n\n    await exec(`${cmd} ${args}`, execOptions);\n    lockFile = await readFile(lockFileName, 'utf8');\n  } catch (err) /* istanbul ignore next */ {\n    logger.debug(\n      {\n        cmd,\n        err,\n        stdout,\n        stderr,\n        type: 'pnpm',\n      },\n      'lock file error'\n    );\n    return { error: true, stderr: err.stderr, stdout: err.stdout };\n  }\n  return { lockFile };\n}\n"]}