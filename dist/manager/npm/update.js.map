{"version":3,"file":"update.js","sourceRoot":"","sources":["../../../lib/manager/npm/update.ts"],"names":[],"mappings":"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","sourcesContent":["import equal from 'fast-deep-equal';\nimport { ReleaseType, inc } from 'semver';\nimport { logger } from '../../logger';\nimport { matchAt, replaceAt } from '../../util/string';\nimport { UpdateDependencyConfig } from '../common';\n\nexport function bumpPackageVersion(\n  content: string,\n  currentValue: string,\n  bumpVersion: ReleaseType | string\n): string {\n  if (!bumpVersion) {\n    return content;\n  }\n  logger.debug(\n    { bumpVersion, currentValue },\n    'Checking if we should bump package.json version'\n  );\n  let newPjVersion: string;\n  try {\n    if (bumpVersion.startsWith('mirror:')) {\n      const mirrorPackage = bumpVersion.replace('mirror:', '');\n      const parsedContent = JSON.parse(content);\n      newPjVersion =\n        (parsedContent.dependencies || {})[mirrorPackage] ||\n        (parsedContent.devDependencies || {})[mirrorPackage] ||\n        (parsedContent.optionalDependencies || {})[mirrorPackage] ||\n        (parsedContent.peerDependencies || {})[mirrorPackage];\n      if (!newPjVersion) {\n        logger.warn('bumpVersion mirror package not found: ' + mirrorPackage);\n        return content;\n      }\n    } else {\n      newPjVersion = inc(currentValue, bumpVersion as ReleaseType);\n    }\n    logger.debug({ newPjVersion });\n    const bumpedContent = content.replace(\n      /(\"version\":\\s*\")[^\"]*/,\n      `$1${newPjVersion}`\n    );\n    if (bumpedContent === content) {\n      logger.debug('Version was already bumped');\n    } else {\n      logger.debug('Bumped package.json version');\n    }\n    return bumpedContent;\n  } catch (err) {\n    logger.warn(\n      {\n        content,\n        currentValue,\n        bumpVersion,\n      },\n      'Failed to bumpVersion'\n    );\n    return content;\n  }\n}\n\nexport function updateDependency({\n  fileContent,\n  upgrade,\n}: UpdateDependencyConfig): string | null {\n  const { depType, managerData } = upgrade;\n  const depName = managerData?.key || upgrade.depName;\n  let { newValue } = upgrade;\n  if (upgrade.currentRawValue) {\n    if (upgrade.currentDigest) {\n      logger.debug('Updating package.json git digest');\n      newValue = upgrade.currentRawValue.replace(\n        upgrade.currentDigest,\n        upgrade.newDigest.substring(0, upgrade.currentDigest.length)\n      );\n    } else {\n      logger.debug('Updating package.json git version tag');\n      newValue = upgrade.currentRawValue.replace(\n        upgrade.currentValue,\n        upgrade.newValue\n      );\n    }\n  }\n  if (upgrade.npmPackageAlias) {\n    newValue = `npm:${upgrade.lookupName}@${newValue}`;\n  }\n  logger.debug(`npm.updateDependency(): ${depType}.${depName} = ${newValue}`);\n  try {\n    const parsedContents = JSON.parse(fileContent);\n    // Save the old version\n    const oldVersion = parsedContents[depType][depName];\n    if (oldVersion === newValue) {\n      logger.trace('Version is already updated');\n      return bumpPackageVersion(\n        fileContent,\n        upgrade.packageJsonVersion,\n        upgrade.bumpVersion\n      );\n    }\n    // Update the file = this is what we want\n    parsedContents[depType][depName] = newValue;\n    // Look for the old version number\n    const searchString = `\"${oldVersion}\"`;\n    const newString = `\"${newValue}\"`;\n    let newFileContent = null;\n    // Skip ahead to depType section\n    let searchIndex = fileContent.indexOf(`\"${depType}\"`) + depType.length;\n    logger.trace(`Starting search at index ${searchIndex}`);\n    // Iterate through the rest of the file\n    for (; searchIndex < fileContent.length; searchIndex += 1) {\n      // First check if we have a hit for the old version\n      if (matchAt(fileContent, searchIndex, searchString)) {\n        logger.trace(`Found match at index ${searchIndex}`);\n        // Now test if the result matches\n        const testContent = replaceAt(\n          fileContent,\n          searchIndex,\n          searchString,\n          newString\n        );\n        // Compare the parsed JSON structure of old and new\n        if (equal(parsedContents, JSON.parse(testContent))) {\n          newFileContent = testContent;\n          break;\n        }\n      }\n    }\n    // istanbul ignore if\n    if (!newFileContent) {\n      logger.debug(\n        { fileContent, parsedContents, depType, depName, newValue },\n        'Warning: updateDependency error'\n      );\n      return fileContent;\n    }\n    if (parsedContents?.resolutions) {\n      let depKey: string;\n      if (parsedContents.resolutions[depName]) {\n        depKey = depName;\n      } else if (parsedContents.resolutions[`**/${depName}`]) {\n        depKey = `**/${depName}`;\n      }\n      if (depKey) {\n        // istanbul ignore if\n        if (parsedContents.resolutions[depKey] !== oldVersion) {\n          logger.debug(\n            {\n              depName,\n              depKey,\n              oldVersion,\n              resolutionsVersion: parsedContents.resolutions[depKey],\n            },\n            'Upgraded dependency exists in yarn resolutions but is different version'\n          );\n        }\n        // Look for the old version number\n        const oldResolution = `\"${parsedContents.resolutions[depKey]}\"`;\n        const newResolution = `\"${newValue}\"`;\n        // Update the file = this is what we want\n        parsedContents.resolutions[depKey] = newValue;\n        // Skip ahead to depType section\n        searchIndex = newFileContent.indexOf(`\"resolutions\"`);\n        logger.trace(`Starting search at index ${searchIndex}`);\n        // Iterate through the rest of the file\n        for (; searchIndex < newFileContent.length; searchIndex += 1) {\n          // First check if we have a hit for the old version\n          if (matchAt(newFileContent, searchIndex, oldResolution)) {\n            logger.trace(`Found match at index ${searchIndex}`);\n            // Now test if the result matches\n            const testContent = replaceAt(\n              newFileContent,\n              searchIndex,\n              oldResolution,\n              newResolution\n            );\n            // Compare the parsed JSON structure of old and new\n            if (equal(parsedContents, JSON.parse(testContent))) {\n              newFileContent = testContent;\n              break;\n            }\n          }\n        }\n      }\n    }\n    return bumpPackageVersion(\n      newFileContent,\n      upgrade.packageJsonVersion,\n      upgrade.bumpVersion\n    );\n  } catch (err) {\n    logger.debug({ err }, 'updateDependency error');\n    return null;\n  }\n}\n"]}