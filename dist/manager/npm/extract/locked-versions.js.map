{"version":3,"file":"locked-versions.js","sourceRoot":"","sources":["../../../../lib/manager/npm/extract/locked-versions.ts"],"names":[],"mappings":";;;AAAA,mCAA+B;AAC/B,4CAAyC;AAEzC,+BAAmC;AACnC,iCAAqC;AAE9B,KAAK,UAAU,iBAAiB,CACrC,YAA2B;IAE3B,MAAM,aAAa,GAA2C,EAAE,CAAC;IACjE,eAAM,CAAC,KAAK,CAAC,yBAAyB,CAAC,CAAC;IACxC,KAAK,MAAM,WAAW,IAAI,YAAY,EAAE;QACtC,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,cAAc,EAAE,GAAG,WAAW,CAAC;QAC1D,IAAI,QAAQ,EAAE;YACZ,eAAM,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;YAC/B,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE;gBAC5B,eAAM,CAAC,KAAK,CAAC,qBAAqB,GAAG,QAAQ,CAAC,CAAC;gBAC/C,aAAa,CAAC,QAAQ,CAAC,GAAG,MAAM,kBAAW,CAAC,QAAQ,CAAC,CAAC;aACvD;YACD,KAAK,MAAM,GAAG,IAAI,WAAW,CAAC,IAAI,EAAE;gBAClC,GAAG,CAAC,aAAa;oBACf,aAAa,CAAC,QAAQ,CAAC,CAAC,GAAG,GAAG,CAAC,OAAO,IAAI,GAAG,CAAC,YAAY,EAAE,CAAC,CAAC;aACjE;SACF;aAAM,IAAI,OAAO,EAAE;YAClB,eAAM,CAAC,KAAK,CAAC,QAAQ,GAAG,OAAO,GAAG,OAAO,GAAG,WAAW,CAAC,WAAW,CAAC,CAAC;YACrE,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,EAAE;gBAC3B,eAAM,CAAC,KAAK,CAAC,qBAAqB,GAAG,OAAO,CAAC,CAAC;gBAC9C,aAAa,CAAC,OAAO,CAAC,GAAG,MAAM,gBAAU,CAAC,OAAO,CAAC,CAAC;aACpD;YACD,KAAK,MAAM,GAAG,IAAI,WAAW,CAAC,IAAI,EAAE;gBAClC,GAAG,CAAC,aAAa,GAAG,cAAK,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;aAChE;SACF;aAAM,IAAI,cAAc,EAAE;YACzB,eAAM,CAAC,KAAK,CAAC,uDAAuD,CAAC,CAAC;SACvE;KACF;AACH,CAAC;AA9BD,8CA8BC","sourcesContent":["import { valid } from 'semver';\nimport { logger } from '../../../logger';\nimport { PackageFile } from '../../common';\nimport { getNpmLock } from './npm';\nimport { getYarnLock } from './yarn';\n\nexport async function getLockedVersions(\n  packageFiles: PackageFile[]\n): Promise<void> {\n  const lockFileCache: Record<string, Record<string, string>> = {};\n  logger.debug('Finding locked versions');\n  for (const packageFile of packageFiles) {\n    const { yarnLock, npmLock, pnpmShrinkwrap } = packageFile;\n    if (yarnLock) {\n      logger.trace('Found yarnLock');\n      if (!lockFileCache[yarnLock]) {\n        logger.trace('Retrieving/parsing ' + yarnLock);\n        lockFileCache[yarnLock] = await getYarnLock(yarnLock);\n      }\n      for (const dep of packageFile.deps) {\n        dep.lockedVersion =\n          lockFileCache[yarnLock][`${dep.depName}@${dep.currentValue}`];\n      }\n    } else if (npmLock) {\n      logger.debug('Found ' + npmLock + ' for ' + packageFile.packageFile);\n      if (!lockFileCache[npmLock]) {\n        logger.trace('Retrieving/parsing ' + npmLock);\n        lockFileCache[npmLock] = await getNpmLock(npmLock);\n      }\n      for (const dep of packageFile.deps) {\n        dep.lockedVersion = valid(lockFileCache[npmLock][dep.depName]);\n      }\n    } else if (pnpmShrinkwrap) {\n      logger.debug('TODO: implement pnpm-lock.yaml parsing of lockVersion');\n    }\n  }\n}\n"]}