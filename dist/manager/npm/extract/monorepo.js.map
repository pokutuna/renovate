{"version":3,"file":"monorepo.js","sourceRoot":"","sources":["../../../../lib/manager/npm/extract/monorepo.ts"],"names":[],"mappings":"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","sourcesContent":["import path from 'path';\nimport is from '@sindresorhus/is';\n\nimport minimatch from 'minimatch';\nimport upath from 'upath';\nimport { logger } from '../../../logger';\nimport { SkipReason } from '../../../types';\nimport { PackageFile } from '../../common';\n\nfunction matchesAnyPattern(val: string, patterns: string[]): boolean {\n  const res = patterns.some(\n    (pattern) => pattern === val + '/' || minimatch(val, pattern, { dot: true })\n  );\n  logger.trace({ val, patterns, res }, `matchesAnyPattern`);\n  return res;\n}\n\nexport function detectMonorepos(packageFiles: Partial<PackageFile>[]): void {\n  logger.debug('Detecting Lerna and Yarn Workspaces');\n  for (const p of packageFiles) {\n    const {\n      packageFile,\n      npmLock,\n      yarnLock,\n      lernaDir,\n      lernaClient,\n      lernaPackages,\n      yarnWorkspacesPackages,\n    } = p;\n    const basePath = path.dirname(packageFile);\n    const packages = yarnWorkspacesPackages || lernaPackages;\n    if (packages?.length) {\n      logger.debug(\n        { packageFile, yarnWorkspacesPackages, lernaPackages },\n        'Found monorepo packages with base path ' + JSON.stringify(basePath)\n      );\n      const internalPackagePatterns = (is.array(packages)\n        ? packages\n        : [packages]\n      ).map((pattern) => upath.join(basePath, pattern));\n      const internalPackageFiles = packageFiles.filter((sp) =>\n        matchesAnyPattern(path.dirname(sp.packageFile), internalPackagePatterns)\n      );\n      const internalPackageNames = internalPackageFiles\n        .map((sp) => sp.packageJsonName)\n        .filter(Boolean);\n      p.deps?.forEach((dep) => {\n        if (internalPackageNames.includes(dep.depName)) {\n          dep.skipReason = SkipReason.InternalPackage; // eslint-disable-line no-param-reassign\n        }\n      });\n      for (const subPackage of internalPackageFiles) {\n        subPackage.lernaDir = lernaDir;\n        subPackage.lernaClient = lernaClient;\n        subPackage.yarnLock = subPackage.yarnLock || yarnLock;\n        subPackage.npmLock = subPackage.npmLock || npmLock;\n        if (subPackage.yarnLock) {\n          subPackage.hasYarnWorkspaces = !!yarnWorkspacesPackages;\n        }\n        subPackage.deps?.forEach((dep) => {\n          if (internalPackageNames.includes(dep.depName)) {\n            dep.skipReason = SkipReason.InternalPackage; // eslint-disable-line no-param-reassign\n          }\n        });\n      }\n    }\n  }\n}\n"]}