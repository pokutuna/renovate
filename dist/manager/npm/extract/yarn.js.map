{"version":3,"file":"yarn.js","sourceRoot":"","sources":["../../../../lib/manager/npm/extract/yarn.ts"],"names":[],"mappings":";;;AAAA,gDAA0C;AAC1C,4CAAyC;AACzC,yCAAiD;AAK1C,KAAK,UAAU,WAAW,CAAC,QAAgB;IAChD,MAAM,WAAW,GAAG,MAAM,kBAAa,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;IAC1D,IAAI;QACF,MAAM,cAAc,GAAG,gBAAK,CAAC,WAAW,CAAC,CAAC;QAC1C,qBAAqB;QACrB,IAAI,cAAc,CAAC,IAAI,KAAK,SAAS,EAAE;YACrC,eAAM,CAAC,KAAK,CACV,EAAE,QAAQ,EAAE,SAAS,EAAE,cAAc,CAAC,IAAI,EAAE,EAC5C,uCAAuC,CACxC,CAAC;YACF,OAAO,EAAE,CAAC;SACX;QACD,MAAM,QAAQ,GAAa,EAAE,CAAC;QAE9B,KAAK,MAAM,CAAC,KAAK,EAAE,GAAG,CAAC,IAAI,MAAM,CAAC,OAAO,CACvC,cAAc,CAAC,MAAuB,CACvC,EAAE;YACD,eAAM,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC;YAC9C,QAAQ,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,OAAO,CAAC;SAC/B;QACD,OAAO,QAAQ,CAAC;KACjB;IAAC,OAAO,GAAG,EAAE;QACZ,eAAM,CAAC,KAAK,CAAC,EAAE,QAAQ,EAAE,GAAG,EAAE,EAAE,sCAAsC,CAAC,CAAC;QACxE,OAAO,EAAE,CAAC;KACX;AACH,CAAC;AAzBD,kCAyBC","sourcesContent":["import { parse } from '@yarnpkg/lockfile';\nimport { logger } from '../../../logger';\nimport { readLocalFile } from '../../../util/fs';\nimport { LockFileEntry } from './common';\n\nexport type YarnLock = Record<string, string>;\n\nexport async function getYarnLock(filePath: string): Promise<YarnLock> {\n  const yarnLockRaw = await readLocalFile(filePath, 'utf8');\n  try {\n    const yarnLockParsed = parse(yarnLockRaw);\n    // istanbul ignore if\n    if (yarnLockParsed.type !== 'success') {\n      logger.debug(\n        { filePath, parseType: yarnLockParsed.type },\n        'Error parsing yarn.lock - not success'\n      );\n      return {};\n    }\n    const lockFile: YarnLock = {};\n\n    for (const [entry, val] of Object.entries(\n      yarnLockParsed.object as LockFileEntry\n    )) {\n      logger.trace({ entry, version: val.version });\n      lockFile[entry] = val.version;\n    }\n    return lockFile;\n  } catch (err) {\n    logger.debug({ filePath, err }, 'Warning: Exception parsing yarn.lock');\n    return {};\n  }\n}\n"]}