{"version":3,"file":"artifacts.js","sourceRoot":"","sources":["../../../lib/manager/mix/artifacts.ts"],"names":[],"mappings":";;;AAAA,iCAA8B;AAC9B,yCAAsC;AACtC,0CAAuC;AACvC,mDAAsD;AACtD,sCAA8D;AAGvD,KAAK,UAAU,eAAe,CAAC,EACpC,eAAe,EACf,WAAW,EACX,qBAAqB,EACrB,MAAM,GACS;IACf,eAAM,CAAC,KAAK,CAAC,oBAAoB,eAAe,GAAG,CAAC,CAAC;IACrD,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE;QAC1B,eAAM,CAAC,KAAK,CAAC,sCAAsC,CAAC,CAAC;QACrD,OAAO,IAAI,CAAC;KACb;IAED,MAAM,GAAG,GAAG,MAAM,CAAC,QAAQ,CAAC;IAC5B,IAAI,CAAC,GAAG,EAAE;QACR,eAAM,CAAC,KAAK,CAAC,wBAAwB,CAAC,CAAC;QACvC,OAAO,IAAI,CAAC;KACb;IAED,MAAM,YAAY,GAAG,UAAU,CAAC;IAChC,IAAI;QACF,MAAM,mBAAc,CAAC,eAAe,EAAE,qBAAqB,CAAC,CAAC;KAC9D;IAAC,OAAO,GAAG,EAAE;QACZ,eAAM,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,EAAE,8BAA8B,CAAC,CAAC;QACrD,OAAO;YACL;gBACE,aAAa,EAAE;oBACb,QAAQ,EAAE,YAAY;oBACtB,MAAM,EAAE,GAAG,CAAC,OAAO;iBACpB;aACF;SACF,CAAC;KACH;IAED,MAAM,uBAAuB,GAAG,MAAM,kBAAa,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;IAC1E,IAAI,CAAC,uBAAuB,EAAE;QAC5B,eAAM,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;QAClC,OAAO,IAAI,CAAC;KACb;IAED,MAAM,QAAQ,GACZ,MAAM,CAAC,YAAY,KAAK,qBAAY,CAAC,MAAM;QACzC,CAAC,CAAC;YACE,QAAQ;YACR,KAAK;YACL,MAAM;YACN,MAAM,GAAG,IAAI,GAAG,EAAE;YAClB,MAAM,GAAG,EAAE;YACX,qBAAqB;SACtB;QACH,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;IACd,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAE7B,0BAA0B;IAC1B,IAAI;QACF,MAAM,OAAO,GAAG,CAAC,GAAG,QAAQ,EAAE,GAAG,WAAW,CAAC,GAAG,CAAC,aAAK,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACnE,MAAM,WAAI,CAAC,OAAO,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC;KAC9B;IAAC,OAAO,GAAG,EAAE;QACZ,eAAM,CAAC,IAAI,CACT,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,CAAC,OAAO,EAAE,EAC7B,gCAAgC,CACjC,CAAC;QAEF,OAAO;YACL;gBACE,aAAa,EAAE;oBACb,QAAQ,EAAE,YAAY;oBACtB,MAAM,EAAE,GAAG,CAAC,OAAO;iBACpB;aACF;SACF,CAAC;KACH;IAED,MAAM,iBAAiB,GAAG,MAAM,kBAAa,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;IACpE,IAAI,uBAAuB,KAAK,iBAAiB,EAAE;QACjD,eAAM,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAC;QACtC,OAAO,IAAI,CAAC;KACb;IACD,eAAM,CAAC,KAAK,CAAC,4BAA4B,CAAC,CAAC;IAC3C,OAAO;QACL;YACE,IAAI,EAAE;gBACJ,IAAI,EAAE,YAAY;gBAClB,QAAQ,EAAE,iBAAiB;aAC5B;SACF;KACF,CAAC;AACJ,CAAC;AAtFD,0CAsFC","sourcesContent":["import { quote } from 'shlex';\nimport { logger } from '../../logger';\nimport { exec } from '../../util/exec';\nimport { BinarySource } from '../../util/exec/common';\nimport { readLocalFile, writeLocalFile } from '../../util/fs';\nimport { UpdateArtifact, UpdateArtifactsResult } from '../common';\n\nexport async function updateArtifacts({\n  packageFileName,\n  updatedDeps,\n  newPackageFileContent,\n  config,\n}: UpdateArtifact): Promise<UpdateArtifactsResult[] | null> {\n  logger.debug(`mix.getArtifacts(${packageFileName})`);\n  if (updatedDeps.length < 1) {\n    logger.debug('No updated mix deps - returning null');\n    return null;\n  }\n\n  const cwd = config.localDir;\n  if (!cwd) {\n    logger.debug('No local dir specified');\n    return null;\n  }\n\n  const lockFileName = 'mix.lock';\n  try {\n    await writeLocalFile(packageFileName, newPackageFileContent);\n  } catch (err) {\n    logger.warn({ err }, 'mix.exs could not be written');\n    return [\n      {\n        artifactError: {\n          lockFile: lockFileName,\n          stderr: err.message,\n        },\n      },\n    ];\n  }\n\n  const existingLockFileContent = await readLocalFile(lockFileName, 'utf8');\n  if (!existingLockFileContent) {\n    logger.debug('No mix.lock found');\n    return null;\n  }\n\n  const cmdParts =\n    config.binarySource === BinarySource.Docker\n      ? [\n          'docker',\n          'run',\n          '--rm',\n          `-v ${cwd}:${cwd}`,\n          `-w ${cwd}`,\n          'renovate/elixir mix',\n        ]\n      : ['mix'];\n  cmdParts.push('deps.update');\n\n  /* istanbul ignore next */\n  try {\n    const command = [...cmdParts, ...updatedDeps.map(quote)].join(' ');\n    await exec(command, { cwd });\n  } catch (err) {\n    logger.warn(\n      { err, message: err.message },\n      'Failed to update Mix lock file'\n    );\n\n    return [\n      {\n        artifactError: {\n          lockFile: lockFileName,\n          stderr: err.message,\n        },\n      },\n    ];\n  }\n\n  const newMixLockContent = await readLocalFile(lockFileName, 'utf8');\n  if (existingLockFileContent === newMixLockContent) {\n    logger.debug('mix.lock is unchanged');\n    return null;\n  }\n  logger.debug('Returning updated mix.lock');\n  return [\n    {\n      file: {\n        name: lockFileName,\n        contents: newMixLockContent,\n      },\n    },\n  ];\n}\n"]}