{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../lib/manager/mix/extract.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,oEAAsD;AACtD,yCAAsC;AACtC,uCAAyC;AAGzC,MAAM,gBAAgB,GAAG,kBAAkB,CAAC;AAC5C,MAAM,cAAc,GAAG,qEAAqE,CAAC;AAE7F,SAAgB,kBAAkB,CAAC,OAAe;IAChD,eAAM,CAAC,KAAK,CAAC,0BAA0B,CAAC,CAAC;IACzC,MAAM,IAAI,GAAwB,EAAE,CAAC;IACrC,MAAM,UAAU,GAAG,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAEvC,KAAK,IAAI,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,UAAU,CAAC,MAAM,EAAE,UAAU,IAAI,CAAC,EAAE;QACxE,IAAI,UAAU,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,gBAAgB,CAAC,EAAE;YAClD,eAAM,CAAC,KAAK,CAAC,+BAA+B,UAAU,EAAE,CAAC,CAAC;YAC1D,IAAI,SAAS,GAAG,EAAE,CAAC;YACnB,GAAG;gBACD,SAAS,IAAI,UAAU,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC;gBAC3C,UAAU,IAAI,CAAC,CAAC;aACjB,QAAQ,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;YAClD,IAAI,QAA0B,CAAC;YAC/B,GAAG;gBACD,QAAQ,GAAG,cAAc,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBAC1C,IAAI,QAAQ,EAAE;oBACZ,MAAM,OAAO,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;oBAC5B,MAAM,UAAU,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;oBAC/B,MAAM,YAAY,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;oBACjC,MAAM,YAAY,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;oBAEjC,MAAM,GAAG,GAAsB;wBAC7B,OAAO;wBACP,YAAY;wBACZ,WAAW,EAAE,EAAE;qBAChB,CAAC;oBAEF,GAAG,CAAC,UAAU,GAAG,UAAU,IAAI,aAAa,CAAC,EAAE,CAAC;oBAEhD,IAAI,GAAG,CAAC,UAAU,KAAK,aAAa,CAAC,EAAE,EAAE;wBACvC,GAAG,CAAC,YAAY,GAAG,YAAY,CAAC;wBAChC,GAAG,CAAC,UAAU,GAAG,OAAO,CAAC;qBAC1B;oBAED,IAAI,YAAY,EAAE;wBAChB,GAAG,CAAC,UAAU,IAAI,GAAG,GAAG,YAAY,CAAC;qBACtC;oBAED,IAAI,GAAG,CAAC,UAAU,KAAK,aAAa,CAAC,EAAE,EAAE;wBACvC,GAAG,CAAC,UAAU,GAAG,kBAAU,CAAC,cAAc,CAAC;qBAC5C;oBAED,yBAAyB;oBACzB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;wBAC7C,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,OAAO,GAAG,CAAC,EAAE;4BAC1C,GAAG,CAAC,WAAW,CAAC,UAAU,GAAG,CAAC,CAAC;yBAChC;qBACF;oBAED,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;iBAChB;aACF,QAAQ,QAAQ,EAAE;SACpB;KACF;IACD,OAAO,EAAE,IAAI,EAAE,CAAC;AAClB,CAAC;AAxDD,gDAwDC","sourcesContent":["import * as datasourceHex from '../../datasource/hex';\nimport { logger } from '../../logger';\nimport { SkipReason } from '../../types';\nimport { PackageDependency, PackageFile } from '../common';\n\nconst depSectionRegExp = /defp\\s+deps.*do/g;\nconst depMatchRegExp = /{:(\\w+),\\s*([^:\"]+)?:?\\s*\"([^\"]+)\",?\\s*(organization: \"(.*)\")?.*}/gm;\n\nexport function extractPackageFile(content: string): PackageFile {\n  logger.trace('mix.extractPackageFile()');\n  const deps: PackageDependency[] = [];\n  const contentArr = content.split('\\n');\n\n  for (let lineNumber = 0; lineNumber < contentArr.length; lineNumber += 1) {\n    if (contentArr[lineNumber].match(depSectionRegExp)) {\n      logger.trace(`Matched dep section on line ${lineNumber}`);\n      let depBuffer = '';\n      do {\n        depBuffer += contentArr[lineNumber] + '\\n';\n        lineNumber += 1;\n      } while (!contentArr[lineNumber].includes('end'));\n      let depMatch: RegExpMatchArray;\n      do {\n        depMatch = depMatchRegExp.exec(depBuffer);\n        if (depMatch) {\n          const depName = depMatch[1];\n          const datasource = depMatch[2];\n          const currentValue = depMatch[3];\n          const organization = depMatch[5];\n\n          const dep: PackageDependency = {\n            depName,\n            currentValue,\n            managerData: {},\n          };\n\n          dep.datasource = datasource || datasourceHex.id;\n\n          if (dep.datasource === datasourceHex.id) {\n            dep.currentValue = currentValue;\n            dep.lookupName = depName;\n          }\n\n          if (organization) {\n            dep.lookupName += ':' + organization;\n          }\n\n          if (dep.datasource !== datasourceHex.id) {\n            dep.skipReason = SkipReason.NonHexDeptypes;\n          }\n\n          // Find dep's line number\n          for (let i = 0; i < contentArr.length; i += 1) {\n            if (contentArr[i].includes(`:${depName},`)) {\n              dep.managerData.lineNumber = i;\n            }\n          }\n\n          deps.push(dep);\n        }\n      } while (depMatch);\n    }\n  }\n  return { deps };\n}\n"]}