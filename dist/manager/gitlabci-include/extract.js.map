{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../lib/manager/gitlabci-include/extract.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,0DAAkC;AAClC,sDAA2B;AAC3B,mFAAqE;AACrE,yCAAsC;AACtC,uCAAyC;AACzC,sCAA8C;AAE9C,8DAAgD;AAEhD,SAAS,yBAAyB,CAAC,UAIlC;IACC,MAAM,GAAG,GAAsB;QAC7B,UAAU,EAAE,oBAAoB,CAAC,EAAE;QACnC,OAAO,EAAE,UAAU,CAAC,OAAO;QAC3B,OAAO,EAAE,YAAY;KACtB,CAAC;IACF,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE;QACnB,GAAG,CAAC,UAAU,GAAG,kBAAU,CAAC,cAAc,CAAC;QAC3C,OAAO,GAAG,CAAC;KACZ;IACD,GAAG,CAAC,YAAY,GAAG,UAAU,CAAC,GAAG,CAAC;IAClC,OAAO,GAAG,CAAC;AACb,CAAC;AAED,KAAK,UAAU,2BAA2B,CAAC,UAE1C;;IACC,MAAM,OAAO,GAAG,MAAM,kBAAa,CAAC,UAAU,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;IAC9D,MAAM,IAAI,SAAG,QAAQ,CAAC,kBAAkB,CAAC,OAAO,CAAC,0CAAE,IAAI,CAAC;IACxD,OAAO,IAAI,CAAC;AACd,CAAC;AAEM,KAAK,UAAU,kBAAkB,CACtC,OAAe,EACf,YAAoB,EACpB,MAAqB;;IAErB,MAAM,IAAI,GAAwB,EAAE,CAAC;IACrC,IAAI;QACF,MAAM,GAAG,GAAG,iBAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;QACnD,IAAI,CAAA,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,OAAO,KAAI,YAAE,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;YACzC,KAAK,MAAM,UAAU,IAAI,GAAG,CAAC,OAAO,EAAE;gBACpC,IAAI,UAAU,CAAC,IAAI,IAAI,UAAU,CAAC,OAAO,EAAE;oBACzC,MAAM,GAAG,GAAG,yBAAyB,CAAC,UAAU,CAAC,CAAC;oBAClD,IAAI,MAAM,CAAC,QAAQ,EAAE;wBACnB,GAAG,CAAC,YAAY,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC,CAAC;qBAClE;oBACD,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;iBAChB;qBAAM,IAAI,UAAU,CAAC,KAAK,EAAE;oBAC3B,MAAM,YAAY,GAAG,MAAM,2BAA2B,CAAC,UAAU,CAAC,CAAC;oBACnE,IAAI,YAAY,EAAE;wBAChB,KAAK,MAAM,WAAW,IAAI,YAAY,EAAE;4BACtC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;yBACxB;qBACF;iBACF;aACF;SACF;KACF;IAAC,OAAO,GAAG,EAAE,0BAA0B,CAAC;QACvC,UAAI,GAAG,CAAC,KAAK,0CAAE,UAAU,CAAC,gBAAgB,GAAG;YAC3C,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;YACtB,eAAM,CAAC,KAAK,CAAC,8CAA8C,CAAC,CAAC;SAC9D;aAAM;YACL,eAAM,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,EAAE,qCAAqC,CAAC,CAAC;SAC7D;KACF;IACD,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;QAChB,OAAO,IAAI,CAAC;KACb;IACD,OAAO,EAAE,IAAI,EAAE,CAAC;AAClB,CAAC;AAtCD,gDAsCC","sourcesContent":["import is from '@sindresorhus/is';\nimport yaml from 'js-yaml';\nimport * as datasourceGitlabTags from '../../datasource/gitlab-tags';\nimport { logger } from '../../logger';\nimport { SkipReason } from '../../types';\nimport { readLocalFile } from '../../util/fs';\nimport { ExtractConfig, PackageDependency, PackageFile } from '../common';\nimport * as gitlabci from '../gitlabci/extract';\n\nfunction extractDepFromIncludeFile(includeObj: {\n  file: any;\n  project: string;\n  ref: string;\n}): PackageDependency {\n  const dep: PackageDependency = {\n    datasource: datasourceGitlabTags.id,\n    depName: includeObj.project,\n    depType: 'repository',\n  };\n  if (!includeObj.ref) {\n    dep.skipReason = SkipReason.UnknownVersion;\n    return dep;\n  }\n  dep.currentValue = includeObj.ref;\n  return dep;\n}\n\nasync function extractDepsFromIncludeLocal(includeObj: {\n  local: string;\n}): Promise<PackageDependency[] | null> {\n  const content = await readLocalFile(includeObj.local, 'utf8');\n  const deps = gitlabci.extractPackageFile(content)?.deps;\n  return deps;\n}\n\nexport async function extractPackageFile(\n  content: string,\n  _packageFile: string,\n  config: ExtractConfig\n): Promise<PackageFile | null> {\n  const deps: PackageDependency[] = [];\n  try {\n    const doc = yaml.safeLoad(content, { json: true });\n    if (doc?.include && is.array(doc.include)) {\n      for (const includeObj of doc.include) {\n        if (includeObj.file && includeObj.project) {\n          const dep = extractDepFromIncludeFile(includeObj);\n          if (config.endpoint) {\n            dep.registryUrls = [config.endpoint.replace(/\\/api\\/v4\\/?/, '')];\n          }\n          deps.push(dep);\n        } else if (includeObj.local) {\n          const includedDeps = await extractDepsFromIncludeLocal(includeObj);\n          if (includedDeps) {\n            for (const includedDep of includedDeps) {\n              deps.push(includedDep);\n            }\n          }\n        }\n      }\n    }\n  } catch (err) /* istanbul ignore next */ {\n    if (err.stack?.startsWith('YAMLException:')) {\n      logger.debug({ err });\n      logger.debug('YAML exception extracting GitLab CI includes');\n    } else {\n      logger.warn({ err }, 'Error extracting GitLab CI includes');\n    }\n  }\n  if (!deps.length) {\n    return null;\n  }\n  return { deps };\n}\n"]}