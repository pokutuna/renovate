{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../lib/manager/bazel/extract.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint no-plusplus: 0  */\nimport { parse as _parse } from 'url';\nimport parse from 'github-url-from-git';\nimport * as datasourceDocker from '../../datasource/docker';\nimport * as datasourceGithubReleases from '../../datasource/github-releases';\nimport * as datasourceGo from '../../datasource/go';\nimport { logger } from '../../logger';\nimport { SkipReason } from '../../types';\nimport { regEx } from '../../util/regex';\nimport * as dockerVersioning from '../../versioning/docker';\nimport { PackageDependency, PackageFile } from '../common';\n\ninterface UrlParsedResult {\n  repo: string;\n  currentValue: string;\n}\n\nfunction parseUrl(urlString: string): UrlParsedResult | null {\n  // istanbul ignore if\n  if (!urlString) {\n    return null;\n  }\n  const url = _parse(urlString);\n  if (url.host !== 'github.com') {\n    return null;\n  }\n  const path = url.path.split('/').slice(1);\n  const repo = path[0] + '/' + path[1];\n  let currentValue: string = null;\n  if (path[2] === 'releases' && path[3] === 'download') {\n    currentValue = path[4];\n  }\n  if (path[2] === 'archive') {\n    currentValue = path[3].replace(/\\.tar\\.gz$/, '');\n  }\n  if (currentValue) {\n    return { repo, currentValue };\n  }\n  // istanbul ignore next\n  return null;\n}\n\nfunction findBalancedParenIndex(longString: string): number {\n  /**\n   * Minimalistic string parser with single task -> find last char in def.\n   * It treats [)] as the last char.\n   * To find needed closing parenthesis we need to increment\n   * nesting depth when parser feeds opening parenthesis\n   * if one opening parenthesis -> 1\n   * if two opening parenthesis -> 2\n   * if two opening and one closing parenthesis -> 1\n   * if [\"\"\"] finded then ignore all [)] until closing [\"\"\"] parsed.\n   * https://github.com/renovatebot/renovate/pull/3459#issuecomment-478249702\n   */\n  let intShouldNotBeOdd = 0; // openClosePythonMultiLineComment\n  let parenNestingDepth = 1;\n  return [...longString].findIndex((char, i, arr) => {\n    switch (char) {\n      case '(':\n        parenNestingDepth++;\n        break;\n      case ')':\n        parenNestingDepth--;\n        break;\n      case '\"':\n        if (i > 1 && arr.slice(i - 2, i).every((prev) => char === prev)) {\n          intShouldNotBeOdd++;\n        }\n        break;\n      default:\n        break;\n    }\n\n    return !parenNestingDepth && !(intShouldNotBeOdd % 2) && char === ')';\n  });\n}\n\nfunction parseContent(content: string): string[] {\n  return [\n    'container_pull',\n    'http_archive',\n    'http_file',\n    'go_repository',\n    'git_repository',\n  ].reduce(\n    (acc, prefix) => [\n      ...acc,\n      ...content\n        .split(regEx(prefix + '\\\\s*\\\\(', 'g'))\n        .slice(1)\n        .map((base) => {\n          const ind = findBalancedParenIndex(base);\n\n          return ind >= 0 && `${prefix}(${base.slice(0, ind)})`;\n        })\n        .filter(Boolean),\n    ],\n    [] as string[]\n  );\n}\n\nexport function extractPackageFile(\n  content: string,\n  fileName?: string\n): PackageFile | null {\n  const definitions = parseContent(content);\n  if (!definitions.length) {\n    logger.debug({ fileName }, 'No matching bazel WORKSPACE definitions found');\n    return null;\n  }\n  logger.debug({ definitions }, `Found ${definitions.length} definitions`);\n  const deps: PackageDependency[] = [];\n  definitions.forEach((def) => {\n    logger.debug({ def }, 'Checking bazel definition');\n    const [depType] = def.split('(', 1);\n    const dep: PackageDependency = { depType, managerData: { def } };\n    let depName: string;\n    let importpath: string;\n    let remote: string;\n    let currentValue: string;\n    let commit: string;\n    let url: string;\n    let sha256: string;\n    let digest: string;\n    let repository: string;\n    let registry: string;\n    let match = /name\\s*=\\s*\"([^\"]+)\"/.exec(def);\n    if (match) {\n      [, depName] = match;\n    }\n    match = /digest\\s*=\\s*\"([^\"]+)\"/.exec(def);\n    if (match) {\n      [, digest] = match;\n    }\n    match = /registry\\s*=\\s*\"([^\"]+)\"/.exec(def);\n    if (match) {\n      [, registry] = match;\n    }\n    match = /repository\\s*=\\s*\"([^\"]+)\"/.exec(def);\n    if (match) {\n      [, repository] = match;\n    }\n    match = /remote\\s*=\\s*\"([^\"]+)\"/.exec(def);\n    if (match) {\n      [, remote] = match;\n    }\n    match = /tag\\s*=\\s*\"([^\"]+)\"/.exec(def);\n    if (match) {\n      [, currentValue] = match;\n    }\n    match = /url\\s*=\\s*\"([^\"]+)\"/.exec(def);\n    if (match) {\n      [, url] = match;\n    }\n    match = /urls\\s*=\\s*\\[\\s*\"([^\\]]+)\",?\\s*\\]/.exec(def);\n    if (match) {\n      const urls = match[1].replace(/\\s/g, '').split('\",\"');\n      url = urls.find(parseUrl);\n    }\n    match = /commit\\s*=\\s*\"([^\"]+)\"/.exec(def);\n    if (match) {\n      [, commit] = match;\n    }\n    match = /sha256\\s*=\\s*\"([^\"]+)\"/.exec(def);\n    if (match) {\n      [, sha256] = match;\n    }\n    match = /importpath\\s*=\\s*\"([^\"]+)\"/.exec(def);\n    if (match) {\n      [, importpath] = match;\n    }\n    logger.debug({ dependency: depName, remote, currentValue });\n    if (\n      depType === 'git_repository' &&\n      depName &&\n      remote &&\n      (currentValue || commit)\n    ) {\n      dep.depName = depName;\n      if (currentValue) {\n        dep.currentValue = currentValue;\n      }\n      if (commit) {\n        dep.currentDigest = commit;\n      }\n      // TODO: Check if we really need to use parse here or if it should always be a plain https url\n      const githubURL = parse(remote);\n      if (githubURL) {\n        const repo = githubURL.substring('https://github.com/'.length);\n        dep.datasource = datasourceGithubReleases.id;\n        dep.lookupName = repo;\n        deps.push(dep);\n      }\n    } else if (\n      depType === 'go_repository' &&\n      depName &&\n      importpath &&\n      (currentValue || commit)\n    ) {\n      dep.depName = depName;\n      dep.currentValue = currentValue || commit.substr(0, 7);\n      dep.datasource = datasourceGo.id;\n      dep.lookupName = importpath;\n      if (remote) {\n        const remoteMatch = /https:\\/\\/github\\.com(?:.*\\/)(([a-zA-Z]+)([-])?([a-zA-Z]+))/.exec(\n          remote\n        );\n        if (remoteMatch && remoteMatch[0].length === remote.length) {\n          dep.lookupName = remote.replace('https://', '');\n        } else {\n          dep.skipReason = SkipReason.UnsupportedRemote;\n        }\n      }\n      if (commit) {\n        dep.currentValue = 'v0.0.0';\n        dep.currentDigest = commit;\n        dep.currentDigestShort = commit.substr(0, 7);\n        dep.digestOneAndOnly = true;\n      }\n      deps.push(dep);\n    } else if (\n      (depType === 'http_archive' || depType === 'http_file') &&\n      depName &&\n      parseUrl(url) &&\n      sha256\n    ) {\n      const parsedUrl = parseUrl(url);\n      dep.depName = depName;\n      dep.repo = parsedUrl.repo;\n      if (/^[a-f0-9]{40}$/i.test(parsedUrl.currentValue)) {\n        dep.currentDigest = parsedUrl.currentValue;\n      } else {\n        dep.currentValue = parsedUrl.currentValue;\n      }\n      dep.datasource = datasourceGithubReleases.id;\n      dep.lookupName = dep.repo;\n      deps.push(dep);\n    } else if (\n      depType === 'container_pull' &&\n      currentValue &&\n      digest &&\n      repository &&\n      registry\n    ) {\n      dep.currentDigest = digest;\n      dep.currentValue = currentValue;\n      dep.depName = depName;\n      dep.versioning = dockerVersioning.id;\n      dep.datasource = datasourceDocker.id;\n      dep.lookupName = repository;\n      dep.registryUrls = [registry];\n      deps.push(dep);\n    } else {\n      logger.debug(\n        { def },\n        'Failed to find dependency in bazel WORKSPACE definition'\n      );\n    }\n  });\n  if (!deps.length) {\n    return null;\n  }\n  return { deps };\n}\n"]}