{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../lib/manager/helmv3/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport yaml from 'js-yaml';\nimport * as datasourceHelm from '../../datasource/helm';\nimport { logger } from '../../logger';\nimport { SkipReason } from '../../types';\nimport { ExtractConfig, PackageDependency, PackageFile } from '../common';\n\nexport function extractPackageFile(\n  content: string,\n  fileName: string,\n  config: ExtractConfig\n): PackageFile | null {\n  let chart: {\n    apiVersion: string;\n    name: string;\n    version: string;\n    dependencies: Array<{ name: string; version: string; repository: string }>;\n  };\n  try {\n    chart = yaml.safeLoad(content, { json: true });\n    if (!(chart?.apiVersion && chart.name && chart.version)) {\n      logger.debug(\n        { fileName },\n        'Failed to find required fields in Chart.yaml'\n      );\n      return null;\n    }\n    if (chart.apiVersion !== 'v2') {\n      logger.debug(\n        { fileName },\n        'Unsupported Chart apiVersion. Only v2 is supported.'\n      );\n      return null;\n    }\n  } catch (err) {\n    logger.debug({ fileName }, 'Failed to parse helm Chart.yaml');\n    return null;\n  }\n  let deps: PackageDependency[] = [];\n  if (!is.nonEmptyArray(chart?.dependencies)) {\n    logger.debug({ fileName }, 'Chart has no dependencies');\n    return null;\n  }\n  const validDependencies = chart.dependencies.filter(\n    (dep) => is.nonEmptyString(dep.name) && is.nonEmptyString(dep.version)\n  );\n  if (!is.nonEmptyArray(validDependencies)) {\n    logger.debug('Name and/or version missing for all dependencies');\n    return null;\n  }\n  deps = validDependencies.map((dep) => {\n    const res: PackageDependency = {\n      depName: dep.name,\n      currentValue: dep.version,\n    };\n    if (dep.repository) {\n      res.registryUrls = [dep.repository];\n      if (dep.repository.startsWith('@')) {\n        const repoWithAtRemoved = dep.repository.slice(1);\n        const alias = config.aliases[repoWithAtRemoved];\n        if (alias) {\n          res.registryUrls = [alias];\n          return res;\n        }\n\n        res.skipReason = SkipReason.PlaceholderUrl;\n      } else {\n        try {\n          const url = new URL(dep.repository);\n          if (url.protocol === 'file:') {\n            res.skipReason = SkipReason.LocalDependency;\n          }\n        } catch (err) {\n          logger.debug({ err }, 'Error parsing url');\n          res.skipReason = SkipReason.InvalidUrl;\n        }\n      }\n    } else {\n      res.skipReason = SkipReason.NoRepository;\n    }\n    return res;\n  });\n  const res = {\n    deps,\n    datasource: datasourceHelm.id,\n  };\n  return res;\n}\n"]}