{"version":3,"file":"update.js","sourceRoot":"","sources":["../../../lib/manager/gomod/update.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger } from '../../logger';\nimport { UpdateDependencyConfig } from '../common';\n\nexport function updateDependency({\n  fileContent,\n  upgrade,\n}: UpdateDependencyConfig): string | null {\n  try {\n    logger.debug(`gomod.updateDependency: ${upgrade.newValue}`);\n    const { depName, depType } = upgrade;\n    let depNameNoVersion = depName.split('/').slice(0, 3).join('/');\n    if (depNameNoVersion.startsWith('gopkg.in')) {\n      depNameNoVersion = depNameNoVersion.replace(/\\.v\\d+$/, '');\n    }\n    const lines = fileContent.split('\\n');\n    const lineToChange = lines[upgrade.managerData.lineNumber];\n    if (\n      !lineToChange.includes(depNameNoVersion) &&\n      !lineToChange.includes('rethinkdb/rethinkdb-go.v5')\n    ) {\n      logger.debug(\n        { lineToChange, depName },\n        \"go.mod current line doesn't contain dependency\"\n      );\n      return null;\n    }\n    let updateLineExp: RegExp;\n    if (depType === 'replace') {\n      updateLineExp = new RegExp(\n        /^(replace\\s+[^\\s]+[\\s]+[=][>]+\\s+)([^\\s]+\\s+)([^\\s]+)/\n      );\n    } else if (depType === 'require') {\n      if (upgrade.managerData.multiLine) {\n        updateLineExp = new RegExp(/^(\\s+[^\\s]+)(\\s+)([^\\s]+)/);\n      } else {\n        updateLineExp = new RegExp(/^(require\\s+[^\\s]+)(\\s+)([^\\s]+)/);\n      }\n    }\n    if (updateLineExp && !updateLineExp.test(lineToChange)) {\n      logger.debug('No image line found');\n      return null;\n    }\n    let newLine: string;\n    if (upgrade.updateType === 'digest') {\n      const newDigestRightSized = upgrade.newDigest.substring(\n        0,\n        upgrade.currentDigest.length\n      );\n      if (lineToChange.includes(newDigestRightSized)) {\n        return fileContent;\n      }\n      logger.debug(\n        { depName, lineToChange, newDigestRightSized },\n        'gomod: need to update digest'\n      );\n      newLine = lineToChange.replace(\n        updateLineExp,\n        `$1$2${newDigestRightSized}`\n      );\n    } else {\n      newLine = lineToChange.replace(updateLineExp, `$1$2${upgrade.newValue}`);\n    }\n    if (upgrade.updateType === 'major') {\n      logger.debug({ depName }, 'gomod: major update');\n      if (depName.startsWith('gopkg.in/')) {\n        const oldV = depName.split('.').pop();\n        newLine = newLine.replace(`.${oldV}`, `.v${upgrade.newMajor}`);\n        // Package renames - I couldn't think of a better place to do this\n        newLine = newLine.replace(\n          'gorethink/gorethink.v5',\n          'rethinkdb/rethinkdb-go.v5'\n        );\n      } else if (\n        upgrade.newMajor > 1 &&\n        !newLine.includes(`/v${upgrade.newMajor}`)\n      ) {\n        // If package has no version, pin to latest one.\n        newLine = newLine.replace(depName, depName + '/v' + upgrade.newMajor);\n        if (/^v(0|1)\\./.test(upgrade.currentValue)) {\n          // Add version\n          newLine = newLine.replace(\n            updateLineExp,\n            `$1/v${upgrade.newMajor}$2$3`\n          );\n        } else {\n          // Replace version\n          const [oldV] = upgrade.currentValue.split('.');\n          newLine = newLine.replace(\n            new RegExp(`/${oldV}(\\\\s+)`),\n            `/v${upgrade.newMajor}$1`\n          );\n        }\n      }\n    }\n    if (lineToChange.endsWith('+incompatible')) {\n      let toAdd = '+incompatible';\n\n      if (upgrade.updateType === 'major' && upgrade.newMajor >= 2) {\n        toAdd = '';\n      }\n      newLine += toAdd;\n    }\n    if (newLine === lineToChange) {\n      logger.debug('No changes necessary');\n      return fileContent;\n    }\n    lines[upgrade.managerData.lineNumber] = newLine;\n    return lines.join('\\n');\n  } catch (err) {\n    logger.debug({ err }, 'Error setting new go.mod version');\n    return null;\n  }\n}\n"]}