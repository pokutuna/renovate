{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/manager/gradle/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Stats } from 'fs';\nimport { stat } from 'fs-extra';\nimport upath from 'upath';\nimport { LANGUAGE_JAVA } from '../../constants/languages';\nimport * as datasourceMaven from '../../datasource/maven';\nimport { logger } from '../../logger';\nimport { ExternalHostError } from '../../types/errors/external-host-error';\nimport { ExecOptions, exec } from '../../util/exec';\nimport { readLocalFile } from '../../util/fs';\nimport * as gradleVersioning from '../../versioning/gradle';\nimport {\n  ExtractConfig,\n  PackageFile,\n  UpdateDependencyConfig,\n  Upgrade,\n} from '../common';\nimport {\n  GradleDependency,\n  collectVersionVariables,\n  init,\n  updateGradleVersion,\n} from './build-gradle';\nimport {\n  createRenovateGradlePlugin,\n  extractDependenciesFromUpdatesReport,\n} from './gradle-updates-report';\nimport { extraEnv, gradleWrapperFileName, prepareGradleCommand } from './utils';\n\nexport const GRADLE_DEPENDENCY_REPORT_OPTIONS =\n  '--init-script renovate-plugin.gradle renovate';\nconst TIMEOUT_CODE = 143;\n\nasync function prepareGradleCommandFallback(\n  gradlewName: string,\n  cwd: string,\n  gradlew: Stats | null,\n  args: string\n): Promise<string> {\n  const cmd = await prepareGradleCommand(gradlewName, cwd, gradlew, args);\n  if (cmd === null) {\n    return `gradle ${args}`;\n  }\n  return cmd;\n}\n\nexport async function executeGradle(\n  config: ExtractConfig,\n  cwd: string,\n  gradlew: Stats | null\n): Promise<void> {\n  let stdout: string;\n  let stderr: string;\n  let timeout;\n  if (config.gradle?.timeout) {\n    timeout = config.gradle.timeout * 1000;\n  }\n  const cmd = await prepareGradleCommandFallback(\n    gradleWrapperFileName(config),\n    cwd,\n    gradlew,\n    GRADLE_DEPENDENCY_REPORT_OPTIONS\n  );\n  const execOptions: ExecOptions = {\n    timeout,\n    cwd,\n    docker: {\n      image: 'renovate/gradle',\n    },\n    extraEnv,\n  };\n  try {\n    logger.debug({ cmd }, 'Start gradle command');\n    ({ stdout, stderr } = await exec(cmd, execOptions));\n  } catch (err) /* istanbul ignore next */ {\n    if (err.code === TIMEOUT_CODE) {\n      throw new ExternalHostError(err, 'gradle');\n    }\n    logger.warn({ errMessage: err.message }, 'Gradle extraction failed');\n    return;\n  }\n  logger.debug(stdout + stderr);\n  logger.debug('Gradle report complete');\n}\n\nexport async function extractAllPackageFiles(\n  config: ExtractConfig,\n  packageFiles: string[]\n): Promise<PackageFile[] | null> {\n  let rootBuildGradle: string | undefined;\n  let gradlew: Stats | null;\n  for (const packageFile of packageFiles) {\n    const dirname = upath.dirname(packageFile);\n    const gradlewPath = upath.join(dirname, gradleWrapperFileName(config));\n    gradlew = await stat(upath.join(config.localDir, gradlewPath)).catch(\n      () => null\n    );\n\n    if (['build.gradle', 'build.gradle.kts'].includes(packageFile)) {\n      rootBuildGradle = packageFile;\n      break;\n    }\n\n    // If there is gradlew in the same directory, the directory should be a Gradle project root\n    if (gradlew?.isFile() === true) {\n      rootBuildGradle = packageFile;\n      break;\n    }\n  }\n  if (!rootBuildGradle) {\n    logger.warn('No root build.gradle nor build.gradle.kts found - skipping');\n    return null;\n  }\n  logger.debug('Extracting dependencies from all gradle files');\n\n  const cwd = upath.join(config.localDir, upath.dirname(rootBuildGradle));\n\n  await createRenovateGradlePlugin(cwd);\n  await executeGradle(config, cwd, gradlew);\n\n  init();\n\n  const dependencies = await extractDependenciesFromUpdatesReport(cwd);\n  if (dependencies.length === 0) {\n    return [];\n  }\n\n  const gradleFiles: PackageFile[] = [];\n  for (const packageFile of packageFiles) {\n    const content = await readLocalFile(packageFile, 'utf8');\n    if (content) {\n      gradleFiles.push({\n        packageFile,\n        datasource: datasourceMaven.id,\n        deps: dependencies,\n      });\n\n      collectVersionVariables(dependencies, content);\n    } else {\n      // istanbul ignore next\n      logger.debug({ packageFile }, 'packageFile has no content');\n    }\n  }\n\n  return gradleFiles;\n}\n\nfunction buildGradleDependency(config: Upgrade): GradleDependency {\n  return {\n    group: config.depGroup,\n    name: config.name,\n    version: config.currentValue,\n  };\n}\n\nexport function updateDependency({\n  fileContent,\n  upgrade,\n}: UpdateDependencyConfig): string {\n  // prettier-ignore\n  logger.debug(`gradle.updateDependency(): packageFile:${upgrade.packageFile} depName:${upgrade.depName}, version:${upgrade.currentValue} ==> ${upgrade.newValue}`);\n\n  return updateGradleVersion(\n    fileContent,\n    buildGradleDependency(upgrade),\n    upgrade.newValue\n  );\n}\n\nexport const language = LANGUAGE_JAVA;\n\nexport const defaultConfig = {\n  fileMatch: ['\\\\.gradle(\\\\.kts)?$', '(^|/)gradle.properties$'],\n  timeout: 600,\n  versioning: gradleVersioning.id,\n};\n"]}