{"version":3,"file":"common.js","sourceRoot":"","sources":["../../lib/manager/common.ts"],"names":[],"mappings":"","sourcesContent":["import { ReleaseType } from 'semver';\nimport { GlobalConfig, UpdateType, ValidationMessage } from '../config/common';\nimport { RangeStrategy, SkipReason } from '../types';\nimport { File } from '../util/git';\n\nexport type Result<T> = T | Promise<T>;\n\nexport interface ManagerConfig {\n  binarySource?: string;\n  dockerUser?: string;\n  localDir?: string;\n  registryUrls?: string[];\n}\n\nexport interface ManagerData<T> {\n  managerData?: T;\n}\n\nexport interface ExtractConfig extends ManagerConfig {\n  endpoint?: string;\n  global?: GlobalConfig;\n  gradle?: { timeout?: number };\n  aliases?: Record<string, string>;\n  ignoreNpmrcFile?: boolean;\n  yarnrc?: string;\n  skipInstalls?: boolean;\n  versioning?: string;\n}\n\nexport interface CustomExtractConfig extends ExtractConfig {\n  matchStrings: string[];\n  depNameTemplate?: string;\n  lookupNameTemplate?: string;\n  datasourceTemplate?: string;\n  versioningTemplate?: string;\n}\n\nexport interface UpdateArtifactsConfig extends ManagerConfig {\n  isLockFileMaintenance?: boolean;\n  compatibility?: Record<string, string>;\n  cacheDir?: string;\n  composerIgnorePlatformReqs?: boolean;\n  currentValue?: string;\n  postUpdateOptions?: string[];\n  ignoreScripts?: boolean;\n\n  toVersion?: string;\n}\n\nexport interface PackageUpdateConfig {\n  currentValue?: string;\n  rangeStrategy?: RangeStrategy;\n  supportPolicy?: string[];\n}\n\nexport interface RangeConfig<T = Record<string, any>> extends ManagerData<T> {\n  composerJsonType?: 'composer-plugin' | 'library' | 'metapackage' | 'project';\n  currentValue?: string;\n  depName?: string;\n  depType?: string;\n  manager?: string;\n  packageJsonType?: 'app' | 'library';\n  rangeStrategy: RangeStrategy;\n}\n\nexport interface NpmLockFiles {\n  yarnLock?: string;\n  packageLock?: string;\n  shrinkwrapJson?: string;\n  pnpmShrinkwrap?: string;\n  npmLock?: string;\n  lernaDir?: string;\n}\n\nexport interface PackageFile<T = Record<string, any>>\n  extends NpmLockFiles,\n    ManagerData<T> {\n  hasYarnWorkspaces?: boolean;\n  internalPackages?: string[]; // TODO: remove\n  compatibility?: Record<string, string>;\n  datasource?: string;\n  registryUrls?: string[];\n  deps: PackageDependency[];\n  ignoreNpmrcFile?: boolean;\n  lernaClient?: string;\n  lernaPackages?: string[];\n  manager?: string;\n  mavenProps?: Record<string, any>;\n  npmrc?: string;\n  packageFile?: string;\n  packageJsonName?: string;\n  packageJsonType?: 'app' | 'library';\n  packageJsonVersion?: string;\n  parent?: string;\n  skipInstalls?: boolean;\n  yarnrc?: string;\n  yarnWorkspacesPackages?: string[] | string;\n  matchStrings?: string[];\n}\n\nexport interface Package<T> extends ManagerData<T> {\n  currentValue?: string;\n  currentDigest?: string;\n  depName?: string;\n  depNameShort?: string;\n  depType?: string;\n  fileReplacePosition?: number;\n  groupName?: string;\n  lineNumber?: number;\n  lookupName?: string;\n  repo?: string;\n  target?: string;\n  versioning?: string;\n\n  // npm manager\n  bumpVersion?: ReleaseType | string;\n  npmPackageAlias?: boolean;\n  packageJsonVersion?: string;\n  gitRef?: boolean;\n  sourceUrl?: string;\n  githubRepo?: string;\n  pinDigests?: boolean;\n  currentRawValue?: string;\n  major?: { enabled?: boolean };\n  prettyDepType?: any;\n}\n\nexport interface LookupUpdate {\n  blockedByPin?: boolean;\n  branchName?: string;\n  commitMessageAction?: string;\n  displayFrom?: string;\n  displayTo?: string;\n  isLockfileUpdate?: boolean;\n  isPin?: boolean;\n  isRange?: boolean;\n  isRollback?: boolean;\n  isSingleVersion?: boolean;\n  fromVersion?: string;\n  newDigest?: string;\n  newDigestShort?: string;\n  newMajor?: number;\n  newMinor?: number;\n  newValue: string;\n  newVersion?: string;\n  semanticCommitType?: string;\n  toVersion?: string;\n  updateType?: UpdateType;\n  sourceUrl?: string;\n}\n\nexport interface PackageDependency<T = Record<string, any>> extends Package<T> {\n  warnings?: ValidationMessage[];\n  commitMessageTopic?: string;\n  currentDigestShort?: string;\n  datasource?: string;\n  deprecationMessage?: string;\n  digestOneAndOnly?: boolean;\n  displayFrom?: string;\n  displayTo?: string;\n  fromVersion?: string;\n  lockedVersion?: string;\n  propSource?: string;\n  registryUrls?: string[];\n  rangeStrategy?: RangeStrategy;\n  skipReason?: SkipReason;\n  sourceLine?: number;\n  toVersion?: string;\n  updates?: LookupUpdate[];\n  replaceString?: string;\n  autoReplaceStringTemplate?: string;\n  depIndex?: number;\n  editFile?: string;\n  separateMinorPatch?: boolean;\n}\n\nexport interface Upgrade<T = Record<string, any>>\n  extends Package<T>,\n    NpmLockFiles {\n  isLockfileUpdate?: boolean;\n  currentRawValue?: any;\n  currentVersion?: string;\n  depGroup?: string;\n  dockerRepository?: string;\n  localDir?: string;\n  name?: string;\n  newDigest?: string;\n  newFrom?: string;\n  newMajor?: number;\n  newValue?: string;\n  newVersion?: string;\n  packageFile?: string;\n  rangeStrategy?: RangeStrategy;\n  toVersion?: string;\n  updateType?: UpdateType;\n  version?: string;\n  isLockFileMaintenance?: boolean;\n}\n\nexport interface ArtifactError {\n  lockFile?: string;\n  stderr?: string;\n}\n\nexport interface UpdateArtifactsResult {\n  artifactError?: ArtifactError;\n  file?: File;\n}\n\nexport interface UpdateArtifact {\n  packageFileName: string;\n  updatedDeps: string[];\n  newPackageFileContent: string;\n  config: UpdateArtifactsConfig;\n}\n\nexport interface UpdateDependencyConfig {\n  fileContent: string;\n  upgrade: Upgrade;\n}\n\nexport interface ManagerApi {\n  defaultConfig: object;\n  language?: string;\n  supportsLockFileMaintenance?: boolean;\n\n  extractAllPackageFiles?(\n    config: ExtractConfig,\n    files: string[]\n  ): Result<PackageFile[] | null>;\n\n  extractPackageFile?(\n    content: string,\n    packageFile?: string,\n    config?: ExtractConfig\n  ): Result<PackageFile | null>;\n\n  getPackageUpdates?(config: PackageUpdateConfig): Result<LookupUpdate[]>;\n\n  getRangeStrategy?(config: RangeConfig): RangeStrategy;\n\n  updateArtifacts?(\n    updateArtifact: UpdateArtifact\n  ): Result<UpdateArtifactsResult[] | null>;\n\n  updateDependency?(\n    updateDependencyConfig: UpdateDependencyConfig\n  ): Result<string | null>;\n}\n\n// TODO: name and properties used by npm manager\nexport interface PostUpdateConfig extends ManagerConfig, Record<string, any> {\n  cacheDir?: string;\n\n  postUpdateOptions?: string[];\n  skipInstalls?: boolean;\n\n  platform?: string;\n  upgrades?: Upgrade[];\n  npmLock?: string;\n  yarnLock?: string;\n  branchName?: string;\n  reuseExistingBranch?: boolean;\n}\n"]}