{"version":3,"file":"artifacts.js","sourceRoot":"","sources":["../../../lib/manager/poetry/artifacts.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { quote } from 'shlex';\nimport { parse } from 'toml';\nimport { logger } from '../../logger';\nimport { ExecOptions, exec } from '../../util/exec';\nimport {\n  deleteLocalFile,\n  getSiblingFileName,\n  readLocalFile,\n  writeLocalFile,\n} from '../../util/fs';\nimport {\n  UpdateArtifact,\n  UpdateArtifactsConfig,\n  UpdateArtifactsResult,\n} from '../common';\n\nfunction getPythonConstraint(\n  existingLockFileContent: string,\n  config: UpdateArtifactsConfig\n): string | undefined | null {\n  const { compatibility = {} } = config;\n  const { python } = compatibility;\n\n  if (python) {\n    logger.debug('Using python constraint from config');\n    return python;\n  }\n  try {\n    const data = parse(existingLockFileContent);\n    if (data?.metadata?.['python-versions']) {\n      return data?.metadata?.['python-versions'];\n    }\n  } catch (err) {\n    // Do nothing\n  }\n  return undefined;\n}\n\nexport async function updateArtifacts({\n  packageFileName,\n  updatedDeps,\n  newPackageFileContent,\n  config,\n}: UpdateArtifact): Promise<UpdateArtifactsResult[] | null> {\n  logger.debug(`poetry.updateArtifacts(${packageFileName})`);\n  if (!is.nonEmptyArray(updatedDeps) && !config.isLockFileMaintenance) {\n    logger.debug('No updated poetry deps - returning null');\n    return null;\n  }\n  // Try poetry.lock first\n  let lockFileName = getSiblingFileName(packageFileName, 'poetry.lock');\n  let existingLockFileContent = await readLocalFile(lockFileName, 'utf8');\n  if (!existingLockFileContent) {\n    // Try pyproject.lock next\n    lockFileName = getSiblingFileName(packageFileName, 'pyproject.lock');\n    existingLockFileContent = await readLocalFile(lockFileName, 'utf8');\n    if (!existingLockFileContent) {\n      logger.debug(`No lock file found`);\n      return null;\n    }\n  }\n  logger.debug(`Updating ${lockFileName}`);\n  try {\n    await writeLocalFile(packageFileName, newPackageFileContent);\n    const cmd: string[] = [];\n    if (config.isLockFileMaintenance) {\n      await deleteLocalFile(lockFileName);\n      cmd.push('poetry update --lock --no-interaction');\n    } else {\n      for (let i = 0; i < updatedDeps.length; i += 1) {\n        const dep = updatedDeps[i];\n        cmd.push(`poetry update --lock --no-interaction ${quote(dep)}`);\n      }\n    }\n    const tagConstraint = getPythonConstraint(existingLockFileContent, config);\n    const poetryRequirement = config.compatibility?.poetry || 'poetry';\n    const poetryInstall = 'pip install ' + quote(poetryRequirement);\n    const execOptions: ExecOptions = {\n      cwdFile: packageFileName,\n      docker: {\n        image: 'renovate/python',\n        tagConstraint,\n        tagScheme: 'poetry',\n        preCommands: [poetryInstall],\n      },\n    };\n    await exec(cmd, execOptions);\n    const newPoetryLockContent = await readLocalFile(lockFileName, 'utf8');\n    if (existingLockFileContent === newPoetryLockContent) {\n      logger.debug(`${lockFileName} is unchanged`);\n      return null;\n    }\n    logger.debug(`Returning updated ${lockFileName}`);\n    return [\n      {\n        file: {\n          name: lockFileName,\n          contents: newPoetryLockContent,\n        },\n      },\n    ];\n  } catch (err) {\n    logger.debug({ err }, `Failed to update ${lockFileName} file`);\n    return [\n      {\n        artifactError: {\n          lockFile: lockFileName,\n          stderr: `${err.stdout}\\n${err.stderr}`,\n        },\n      },\n    ];\n  }\n}\n"]}