{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../lib/manager/poetry/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { parse } from 'toml';\nimport * as datasourcePypi from '../../datasource/pypi';\nimport { logger } from '../../logger';\nimport { SkipReason } from '../../types';\nimport * as pep440Versioning from '../../versioning/pep440';\nimport * as poetryVersioning from '../../versioning/poetry';\nimport { PackageDependency, PackageFile } from '../common';\nimport { PoetryFile, PoetrySection } from './types';\n\nfunction extractFromSection(\n  parsedFile: PoetryFile,\n  section: keyof PoetrySection\n): PackageDependency[] {\n  const deps = [];\n  const sectionContent = parsedFile.tool.poetry[section];\n  if (!sectionContent) {\n    return [];\n  }\n  Object.keys(sectionContent).forEach((depName) => {\n    if (depName === 'python') {\n      return;\n    }\n    let skipReason: SkipReason;\n    let currentValue = sectionContent[depName];\n    let nestedVersion = false;\n    if (typeof currentValue !== 'string') {\n      const version = currentValue.version;\n      const path = currentValue.path;\n      const git = currentValue.git;\n      if (version) {\n        currentValue = version;\n        nestedVersion = true;\n        if (path) {\n          skipReason = SkipReason.PathDependency;\n        }\n        if (git) {\n          skipReason = SkipReason.GitDependency;\n        }\n      } else if (path) {\n        currentValue = '';\n        skipReason = SkipReason.PathDependency;\n      } else if (git) {\n        currentValue = '';\n        skipReason = SkipReason.GitDependency;\n      } else {\n        currentValue = '';\n        skipReason = SkipReason.MultipleConstraintDep;\n      }\n    }\n    const dep: PackageDependency = {\n      depName,\n      depType: section,\n      currentValue: currentValue as string,\n      managerData: { nestedVersion },\n      datasource: datasourcePypi.id,\n    };\n    if (skipReason) {\n      dep.skipReason = skipReason;\n    } else if (pep440Versioning.isValid(dep.currentValue)) {\n      dep.versioning = pep440Versioning.id;\n    } else if (poetryVersioning.isValid(dep.currentValue)) {\n      dep.versioning = poetryVersioning.id;\n    } else {\n      dep.skipReason = SkipReason.UnknownVersion;\n    }\n    deps.push(dep);\n  });\n  return deps;\n}\n\nfunction extractRegistries(pyprojectfile: PoetryFile): string[] {\n  const sources = pyprojectfile.tool?.poetry?.source;\n\n  if (!Array.isArray(sources) || sources.length === 0) {\n    return null;\n  }\n\n  const registryUrls = new Set<string>();\n  for (const source of sources) {\n    if (source.url) {\n      registryUrls.add(source.url);\n    }\n  }\n  registryUrls.add('https://pypi.org/pypi/');\n\n  return Array.from(registryUrls);\n}\n\nexport function extractPackageFile(\n  content: string,\n  fileName: string\n): PackageFile | null {\n  logger.trace(`poetry.extractPackageFile(${fileName})`);\n  let pyprojectfile: PoetryFile;\n  try {\n    pyprojectfile = parse(content);\n  } catch (err) {\n    logger.debug({ err }, 'Error parsing pyproject.toml file');\n    return null;\n  }\n  if (!pyprojectfile.tool?.poetry) {\n    logger.debug(`${fileName} contains no poetry section`);\n    return null;\n  }\n  const deps = [\n    ...extractFromSection(pyprojectfile, 'dependencies'),\n    ...extractFromSection(pyprojectfile, 'dev-dependencies'),\n    ...extractFromSection(pyprojectfile, 'extras'),\n  ];\n  if (!deps.length) {\n    return null;\n  }\n\n  const compatibility: Record<string, any> = {};\n\n  // https://python-poetry.org/docs/pyproject/#poetry-and-pep-517\n  if (\n    pyprojectfile['build-system']?.['build-backend'] === 'poetry.masonry.api'\n  ) {\n    compatibility.poetry = pyprojectfile['build-system']?.requires.join(' ');\n  }\n\n  if (is.nonEmptyString(pyprojectfile.tool?.poetry?.['dependencies']?.python)) {\n    compatibility.python = pyprojectfile.tool?.poetry?.['dependencies']?.python;\n  }\n\n  return {\n    deps,\n    registryUrls: extractRegistries(pyprojectfile),\n    compatibility,\n  };\n}\n"]}