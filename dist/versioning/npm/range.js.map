{"version":3,"file":"range.js","sourceRoot":"","sources":["../../../lib/versioning/npm/range.ts"],"names":[],"mappings":";;;AAAA,mCAQgB;AAChB,+CAA0C;AAC1C,yCAAsC;AAGtC,SAAgB,WAAW,CAAC,EAC1B,YAAY,EACZ,aAAa,EACb,WAAW,EACX,SAAS,GACM;IACf,IAAI,aAAa,KAAK,KAAK,IAAI,cAAS,CAAC,YAAY,CAAC,EAAE;QACtD,OAAO,SAAS,CAAC;KAClB;IACD,IAAI,aAAa,KAAK,iBAAiB,EAAE;QACvC,IAAI,kBAAS,CAAC,SAAS,EAAE,YAAY,CAAC,EAAE;YACtC,OAAO,YAAY,CAAC;SACrB;QACD,OAAO,WAAW,CAAC;YACjB,YAAY;YACZ,aAAa,EAAE,SAAS;YACxB,WAAW;YACX,SAAS;SACV,CAAC,CAAC;KACJ;IACD,MAAM,WAAW,GAAG,yBAAU,CAAC,YAAY,CAAC,CAAC;IAC7C,MAAM,OAAO,GAAG,WAAW,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IACpD,IAAI,aAAa,KAAK,OAAO,EAAE;QAC7B,MAAM,QAAQ,GAAG,WAAW,CAAC;YAC3B,YAAY;YACZ,aAAa,EAAE,SAAS;YACxB,WAAW;YACX,SAAS;SACV,CAAC,CAAC;QACH,IAAI,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;YACxD,gBAAgB;YAChB,MAAM,YAAY,GAAG,YAAY,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YAC1D,YAAY,CAAC,GAAG,EAAE,CAAC;YACnB,OAAO,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,QAAQ,CAAC;SACvD;QACD,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE;YAC1B,MAAM,eAAe,GAAG,WAAW,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YAC5D,IAAI,eAAe,CAAC,QAAQ,KAAK,GAAG,EAAE;gBACpC,MAAM,YAAY,GAAG,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBAC7C,YAAY,CAAC,GAAG,EAAE,CAAC;gBACnB,OAAO,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,GAAG,QAAQ,CAAC;aACjD;YACD,IAAI,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;gBACxD,eAAM,CAAC,IAAI,CAAC,yDAAyD,CAAC,CAAC;gBACvE,OAAO,IAAI,CAAC;aACb;SACF;QACD,OAAO,GAAG,YAAY,OAAO,QAAQ,EAAE,CAAC;KACzC;IACD,MAAM,cAAc,GAAG,cAAK,CAAC,SAAS,CAAC,CAAC;IACxC,MAAM,cAAc,GAAG,cAAK,CAAC,SAAS,CAAC,CAAC;IACxC,MAAM,cAAc,GAAG,cAAK,CAAC,SAAS,CAAC,CAAC;IACxC,MAAM,MAAM,GAAG,mBAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,mBAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IAC3E,eAAe;IACf,IAAI,aAAa,KAAK,MAAM,EAAE;QAC5B,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,EAAE;YAC5B,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE;gBACrB,OAAO,WAAW,CAAC;oBACjB,YAAY;oBACZ,aAAa,EAAE,SAAS;oBACxB,WAAW;oBACX,SAAS;iBACV,CAAC,CAAC;aACJ;YACD,IAAI,OAAO,CAAC,QAAQ,KAAK,GAAG,EAAE;gBAC5B,MAAM,KAAK,GAAG,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBACtC,IAAI,MAAM,CAAC,MAAM,EAAE;oBACjB,OAAO,IAAI,SAAS,EAAE,CAAC;iBACxB;gBACD,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;oBACtB,KAAK;oBACL,OAAO,GAAG,GAAG,cAAc,CAAC;iBAC7B;gBACD,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;oBACtB,OAAO;oBACP,OAAO,GAAG,GAAG,cAAc,GAAG,GAAG,GAAG,cAAc,CAAC;iBACpD;gBACD,OAAO,IAAI,SAAS,EAAE,CAAC;aACxB;YACD,IAAI,OAAO,CAAC,QAAQ,KAAK,GAAG,EAAE;gBAC5B,MAAM,KAAK,GAAG,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBACtC,IAAI,MAAM,CAAC,MAAM,EAAE;oBACjB,OAAO,IAAI,SAAS,EAAE,CAAC;iBACxB;gBACD,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;oBACtB,KAAK;oBACL,OAAO,GAAG,GAAG,cAAc,CAAC;iBAC7B;gBACD,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;oBACtB,OAAO;oBACP,OAAO,GAAG,GAAG,cAAc,GAAG,GAAG,GAAG,cAAc,CAAC;iBACpD;gBACD,OAAO,IAAI,SAAS,EAAE,CAAC;aACxB;YACD,IAAI,OAAO,CAAC,QAAQ,KAAK,GAAG,EAAE;gBAC5B,OAAO,IAAI,SAAS,EAAE,CAAC;aACxB;YACD,IAAI,OAAO,CAAC,QAAQ,KAAK,IAAI,EAAE;gBAC7B,OAAO,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC;oBACjC,CAAC,CAAC,MAAM,SAAS,EAAE;oBACnB,CAAC,CAAC,KAAK,SAAS,EAAE,CAAC;aACtB;YACD,IAAI,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;gBACpC,OAAO,YAAY,CAAC;aACrB;SACF;QACD,eAAM,CAAC,KAAK,CACV,iDAAiD,GAAG,YAAY,CACjE,CAAC;QACF,OAAO,IAAI,CAAC;KACb;IACD,IAAI,OAAO,CAAC,QAAQ,KAAK,IAAI,EAAE;QAC7B,OAAO,MAAM,cAAc,IAAI,cAAc,IAAI,CAAC;KACnD;IACD,IAAI,OAAO,CAAC,QAAQ,KAAK,GAAG,EAAE;QAC5B,IAAI,MAAM,CAAC,MAAM,IAAI,CAAC,WAAW,EAAE;YACjC,OAAO,IAAI,cAAc,IAAI,cAAc,IAAI,cAAc,GAAG,MAAM,EAAE,CAAC;SAC1E;QACD,IAAI,cAAc,KAAK,cAAK,CAAC,WAAW,CAAC,EAAE;YACzC,IAAI,cAAc,KAAK,CAAC,EAAE;gBACxB,IAAI,cAAc,KAAK,CAAC,EAAE;oBACxB,OAAO,IAAI,SAAS,EAAE,CAAC;iBACxB;gBACD,OAAO,IAAI,cAAc,IAAI,cAAc,IAAI,CAAC;aACjD;YACD,OAAO,IAAI,SAAS,EAAE,CAAC;SACxB;QACD,OAAO,IAAI,cAAc,MAAM,CAAC;KACjC;IACD,IAAI,OAAO,CAAC,QAAQ,KAAK,GAAG,EAAE;QAC5B,OAAO,IAAI,SAAS,EAAE,CAAC;KACxB;IACD,IAAI,OAAO,CAAC,QAAQ,KAAK,GAAG,EAAE;QAC5B,IAAI,MAAM,CAAC,MAAM,EAAE;YACjB,OAAO,IAAI,cAAc,IAAI,cAAc,IAAI,cAAc,GAAG,MAAM,EAAE,CAAC;SAC1E;QACD,OAAO,IAAI,cAAc,IAAI,cAAc,IAAI,CAAC;KACjD;IACD,IAAI,OAAO,CAAC,QAAQ,KAAK,IAAI,EAAE;QAC7B,IAAI,GAAG,CAAC;QACR,IAAI,OAAO,CAAC,KAAK,IAAI,MAAM,CAAC,MAAM,EAAE;YAClC,GAAG,GAAG,KAAK,SAAS,EAAE,CAAC;SACxB;aAAM,IAAI,OAAO,CAAC,KAAK,EAAE;YACxB,GAAG,GAAG,KAAK,cAAc,IAAI,cAAc,EAAE,CAAC;SAC/C;aAAM;YACL,GAAG,GAAG,KAAK,cAAc,EAAE,CAAC;SAC7B;QACD,IAAI,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;YAChC,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;SAChC;QACD,OAAO,GAAG,CAAC;KACZ;IACD,IAAI,OAAO,CAAC,QAAQ,KAAK,GAAG,EAAE;QAC5B,IAAI,GAAG,CAAC;QACR,IAAI,YAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;YACjC,MAAM,QAAQ,GAAG,cAAc,GAAG,CAAC,CAAC;YACpC,GAAG,GAAG,IAAI,QAAQ,MAAM,CAAC;SAC1B;aAAM,IAAI,OAAO,CAAC,KAAK,EAAE;YACxB,GAAG,GAAG,IAAI,YAAS,CAAC,SAAS,EAAE,OAAO,CAAC,EAAE,CAAC;SAC3C;aAAM,IAAI,OAAO,CAAC,KAAK,EAAE;YACxB,GAAG,GAAG,IAAI,cAAc,IAAI,cAAc,GAAG,CAAC,EAAE,CAAC;SAClD;aAAM;YACL,GAAG,GAAG,IAAI,cAAc,GAAG,CAAC,EAAE,CAAC;SAChC;QACD,IAAI,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;YAC/B,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;SAC/B;QACD,OAAO,GAAG,CAAC;KACZ;IACD,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE;QACrB,IAAI,OAAO,CAAC,KAAK,EAAE;YACjB,IAAI,OAAO,CAAC,KAAK,KAAK,GAAG,EAAE;gBACzB,OAAO,GAAG,cAAc,IAAI,CAAC;aAC9B;YACD,IAAI,OAAO,CAAC,KAAK,KAAK,GAAG,EAAE;gBACzB,OAAO,GAAG,cAAc,IAAI,CAAC;aAC9B;YACD,IAAI,OAAO,CAAC,KAAK,KAAK,GAAG,EAAE;gBACzB,OAAO,GAAG,cAAc,IAAI,cAAc,IAAI,CAAC;aAChD;YACD,IAAI,OAAO,CAAC,KAAK,KAAK,GAAG,EAAE;gBACzB,OAAO,GAAG,cAAc,IAAI,cAAc,IAAI,CAAC;aAChD;YACD,OAAO,GAAG,cAAc,IAAI,cAAc,EAAE,CAAC;SAC9C;QACD,OAAO,GAAG,cAAc,EAAE,CAAC;KAC5B;IACD,OAAO,SAAS,CAAC;AACnB,CAAC;AA5LD,kCA4LC","sourcesContent":["import {\n  inc as increment,\n  valid as isVersion,\n  major,\n  minor,\n  patch,\n  prerelease,\n  satisfies,\n} from 'semver';\nimport { parseRange } from 'semver-utils';\nimport { logger } from '../../logger';\nimport { NewValueConfig } from '../common';\n\nexport function getNewValue({\n  currentValue,\n  rangeStrategy,\n  fromVersion,\n  toVersion,\n}: NewValueConfig): string {\n  if (rangeStrategy === 'pin' || isVersion(currentValue)) {\n    return toVersion;\n  }\n  if (rangeStrategy === 'update-lockfile') {\n    if (satisfies(toVersion, currentValue)) {\n      return currentValue;\n    }\n    return getNewValue({\n      currentValue,\n      rangeStrategy: 'replace',\n      fromVersion,\n      toVersion,\n    });\n  }\n  const parsedRange = parseRange(currentValue);\n  const element = parsedRange[parsedRange.length - 1];\n  if (rangeStrategy === 'widen') {\n    const newValue = getNewValue({\n      currentValue,\n      rangeStrategy: 'replace',\n      fromVersion,\n      toVersion,\n    });\n    if (element.operator && element.operator.startsWith('<')) {\n      // TODO fix this\n      const splitCurrent = currentValue.split(element.operator);\n      splitCurrent.pop();\n      return splitCurrent.join(element.operator) + newValue;\n    }\n    if (parsedRange.length > 1) {\n      const previousElement = parsedRange[parsedRange.length - 2];\n      if (previousElement.operator === '-') {\n        const splitCurrent = currentValue.split('-');\n        splitCurrent.pop();\n        return splitCurrent.join('-') + '- ' + newValue;\n      }\n      if (element.operator && element.operator.startsWith('>')) {\n        logger.warn(`Complex ranges ending in greater than are not supported`);\n        return null;\n      }\n    }\n    return `${currentValue} || ${newValue}`;\n  }\n  const toVersionMajor = major(toVersion);\n  const toVersionMinor = minor(toVersion);\n  const toVersionPatch = patch(toVersion);\n  const suffix = prerelease(toVersion) ? '-' + prerelease(toVersion)[0] : '';\n  // Simple range\n  if (rangeStrategy === 'bump') {\n    if (parsedRange.length === 1) {\n      if (!element.operator) {\n        return getNewValue({\n          currentValue,\n          rangeStrategy: 'replace',\n          fromVersion,\n          toVersion,\n        });\n      }\n      if (element.operator === '^') {\n        const split = currentValue.split('.');\n        if (suffix.length) {\n          return `^${toVersion}`;\n        }\n        if (split.length === 1) {\n          // ^4\n          return '^' + toVersionMajor;\n        }\n        if (split.length === 2) {\n          // ^4.1\n          return '^' + toVersionMajor + '.' + toVersionMinor;\n        }\n        return `^${toVersion}`;\n      }\n      if (element.operator === '~') {\n        const split = currentValue.split('.');\n        if (suffix.length) {\n          return `~${toVersion}`;\n        }\n        if (split.length === 1) {\n          // ~4\n          return '~' + toVersionMajor;\n        }\n        if (split.length === 2) {\n          // ~4.1\n          return '~' + toVersionMajor + '.' + toVersionMinor;\n        }\n        return `~${toVersion}`;\n      }\n      if (element.operator === '=') {\n        return `=${toVersion}`;\n      }\n      if (element.operator === '>=') {\n        return currentValue.includes('>= ')\n          ? `>= ${toVersion}`\n          : `>=${toVersion}`;\n      }\n      if (element.operator.startsWith('<')) {\n        return currentValue;\n      }\n    }\n    logger.debug(\n      'Unsupported range type for rangeStrategy=bump: ' + currentValue\n    );\n    return null;\n  }\n  if (element.operator === '~>') {\n    return `~> ${toVersionMajor}.${toVersionMinor}.0`;\n  }\n  if (element.operator === '^') {\n    if (suffix.length || !fromVersion) {\n      return `^${toVersionMajor}.${toVersionMinor}.${toVersionPatch}${suffix}`;\n    }\n    if (toVersionMajor === major(fromVersion)) {\n      if (toVersionMajor === 0) {\n        if (toVersionMinor === 0) {\n          return `^${toVersion}`;\n        }\n        return `^${toVersionMajor}.${toVersionMinor}.0`;\n      }\n      return `^${toVersion}`;\n    }\n    return `^${toVersionMajor}.0.0`;\n  }\n  if (element.operator === '=') {\n    return `=${toVersion}`;\n  }\n  if (element.operator === '~') {\n    if (suffix.length) {\n      return `~${toVersionMajor}.${toVersionMinor}.${toVersionPatch}${suffix}`;\n    }\n    return `~${toVersionMajor}.${toVersionMinor}.0`;\n  }\n  if (element.operator === '<=') {\n    let res;\n    if (element.patch || suffix.length) {\n      res = `<=${toVersion}`;\n    } else if (element.minor) {\n      res = `<=${toVersionMajor}.${toVersionMinor}`;\n    } else {\n      res = `<=${toVersionMajor}`;\n    }\n    if (currentValue.includes('<= ')) {\n      res = res.replace('<=', '<= ');\n    }\n    return res;\n  }\n  if (element.operator === '<') {\n    let res;\n    if (currentValue.endsWith('.0.0')) {\n      const newMajor = toVersionMajor + 1;\n      res = `<${newMajor}.0.0`;\n    } else if (element.patch) {\n      res = `<${increment(toVersion, 'patch')}`;\n    } else if (element.minor) {\n      res = `<${toVersionMajor}.${toVersionMinor + 1}`;\n    } else {\n      res = `<${toVersionMajor + 1}`;\n    }\n    if (currentValue.includes('< ')) {\n      res = res.replace(/</g, '< ');\n    }\n    return res;\n  }\n  if (!element.operator) {\n    if (element.minor) {\n      if (element.minor === 'x') {\n        return `${toVersionMajor}.x`;\n      }\n      if (element.minor === '*') {\n        return `${toVersionMajor}.*`;\n      }\n      if (element.patch === 'x') {\n        return `${toVersionMajor}.${toVersionMinor}.x`;\n      }\n      if (element.patch === '*') {\n        return `${toVersionMajor}.${toVersionMinor}.*`;\n      }\n      return `${toVersionMajor}.${toVersionMinor}`;\n    }\n    return `${toVersionMajor}`;\n  }\n  return toVersion;\n}\n"]}