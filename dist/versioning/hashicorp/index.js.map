{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/versioning/hashicorp/index.ts"],"names":[],"mappings":";;;AACA,gCAAoC;AAEvB,QAAA,EAAE,GAAG,WAAW,CAAC;AACjB,QAAA,WAAW,GAAG,WAAW,CAAC;AAC1B,QAAA,IAAI,GAAG;IAClB,oGAAoG;CACrG,CAAC;AACW,QAAA,cAAc,GAAG,IAAI,CAAC;AACtB,QAAA,wBAAwB,GAAG,CAAC,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC;AAE7E,SAAS,aAAa,CAAC,KAAa;IAClC,sEAAsE;IACtE,OAAO,KAAK,CAAC,OAAO,CAAC,kBAAkB,EAAE,KAAK,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;AACnE,CAAC;AAED,MAAM,eAAe,GAAG,CAAC,OAAe,EAAE,KAAa,EAAW,EAAE,CAClE,SAAG,CAAC,eAAe,CAAC,aAAa,CAAC,OAAO,CAAC,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;AAEvD,QAAA,OAAO,GAAG,CAAC,KAAa,EAAoB,EAAE,CACzD,KAAK,IAAI,SAAG,CAAC,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;AAE7C,MAAM,OAAO,GAAG,CAAC,OAAe,EAAE,KAAa,EAAW,EAAE,CAC1D,SAAG,CAAC,OAAO,CAAC,aAAa,CAAC,OAAO,CAAC,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;AAE5D,MAAM,oBAAoB,GAAG,CAAC,QAAkB,EAAE,KAAa,EAAU,EAAE,CACzE,SAAG,CAAC,oBAAoB,CAAC,QAAQ,CAAC,GAAG,CAAC,aAAa,CAAC,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;AAE9E,MAAM,oBAAoB,GAAG,CAAC,QAAkB,EAAE,KAAa,EAAU,EAAE,CACzE,SAAG,CAAC,oBAAoB,CAAC,QAAQ,CAAC,GAAG,CAAC,aAAa,CAAC,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;AAE9E,SAAS,WAAW,CAAC,EACnB,YAAY,EACZ,aAAa,EACb,WAAW,EACX,SAAS,GACM;IACf,6BAA6B;IAC7B,IAAI,kBAAkB,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE;QACzC,OAAO,YAAY,CAAC,OAAO,CACzB,kBAAkB,EAClB,KAAK,SAAG,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CACjC,CAAC;KACH;IACD,OAAO,SAAG,CAAC,WAAW,CAAC;QACrB,YAAY;QACZ,aAAa;QACb,WAAW;QACX,SAAS;KACV,CAAC,CAAC;AACL,CAAC;AAEY,QAAA,GAAG,GAAkB;IAChC,GAAG,SAAG;IACN,eAAe;IACf,OAAO,EAAP,eAAO;IACP,OAAO;IACP,oBAAoB;IACpB,oBAAoB;IACpB,WAAW;CACZ,CAAC;AAEF,6DAA6D;AAC9C,iBAAS,GAAK,WAAG,WAAC;AAEjC,kBAAe,WAAG,CAAC","sourcesContent":["import { NewValueConfig, VersioningApi } from '../common';\nimport { api as npm } from '../npm';\n\nexport const id = 'hashicorp';\nexport const displayName = 'Hashicorp';\nexport const urls = [\n  'https://www.terraform.io/docs/configuration/terraform.html#specifying-a-required-terraform-version',\n];\nexport const supportsRanges = true;\nexport const supportedRangeStrategies = ['bump', 'extend', 'pin', 'replace'];\n\nfunction hashicorp2npm(input: string): string {\n  // The only case incompatible with semver is a \"short\" ~>, e.g. ~> 1.2\n  return input.replace(/~>(\\s*\\d+\\.\\d+$)/, '^$1').replace(',', '');\n}\n\nconst isLessThanRange = (version: string, range: string): boolean =>\n  npm.isLessThanRange(hashicorp2npm(version), hashicorp2npm(range));\n\nexport const isValid = (input: string): string | boolean =>\n  input && npm.isValid(hashicorp2npm(input));\n\nconst matches = (version: string, range: string): boolean =>\n  npm.matches(hashicorp2npm(version), hashicorp2npm(range));\n\nconst maxSatisfyingVersion = (versions: string[], range: string): string =>\n  npm.maxSatisfyingVersion(versions.map(hashicorp2npm), hashicorp2npm(range));\n\nconst minSatisfyingVersion = (versions: string[], range: string): string =>\n  npm.minSatisfyingVersion(versions.map(hashicorp2npm), hashicorp2npm(range));\n\nfunction getNewValue({\n  currentValue,\n  rangeStrategy,\n  fromVersion,\n  toVersion,\n}: NewValueConfig): string {\n  // handle specia. ~> 1.2 case\n  if (/(~>\\s*)\\d+\\.\\d+$/.test(currentValue)) {\n    return currentValue.replace(\n      /(~>\\s*)\\d+\\.\\d+$/,\n      `$1${npm.getMajor(toVersion)}.0`\n    );\n  }\n  return npm.getNewValue({\n    currentValue,\n    rangeStrategy,\n    fromVersion,\n    toVersion,\n  });\n}\n\nexport const api: VersioningApi = {\n  ...npm,\n  isLessThanRange,\n  isValid,\n  matches,\n  maxSatisfyingVersion,\n  minSatisfyingVersion,\n  getNewValue,\n};\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nexport const { isVersion } = api;\n\nexport default api;\n"]}