{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/versioning/hex/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { NewValueConfig, VersioningApi } from '../common';\nimport { api as npm } from '../npm';\n\nexport const id = 'hex';\nexport const displayName = 'Hex';\nexport const urls = ['https://hexdocs.pm/elixir/Version.html'];\nexport const supportsRanges = true;\nexport const supportedRangeStrategies = ['bump', 'extend', 'pin', 'replace'];\n\nfunction hex2npm(input: string): string {\n  return input\n    .replace(/~>\\s*(\\d+\\.\\d+)$/, '^$1')\n    .replace(/~>\\s*(\\d+\\.\\d+\\.\\d+)/, '~$1')\n    .replace(/==|and/, '')\n    .replace('or', '||')\n    .replace(/!=\\s*(\\d+\\.\\d+(\\.\\d+.*)?)/, '>$1 <$1')\n    .trim();\n}\n\nfunction npm2hex(input: string): string {\n  const res = input\n    .split(' ')\n    .map((str) => str.trim())\n    .filter((str) => str !== '');\n  let output = '';\n  const operators = ['^', '=', '>', '<', '<=', '>=', '~'];\n  for (let i = 0; i < res.length; i += 1) {\n    if (i === res.length - 1) {\n      output += res[i];\n      break;\n    }\n    if (i < res.length - 1 && res[i + 1].includes('||')) {\n      output += res[i] + ' or ';\n      i += 1;\n    } else if (!operators.includes(res[i])) {\n      output += res[i] + ' and ';\n    } else {\n      output += res[i] + ' ';\n    }\n  }\n  return output;\n}\n\nconst isLessThanRange = (version: string, range: string): boolean =>\n  npm.isLessThanRange(hex2npm(version), hex2npm(range));\n\nconst isValid = (input: string): string | boolean =>\n  npm.isValid(hex2npm(input));\n\nconst matches = (version: string, range: string): boolean =>\n  npm.matches(hex2npm(version), hex2npm(range));\n\nconst maxSatisfyingVersion = (versions: string[], range: string): string =>\n  npm.maxSatisfyingVersion(versions.map(hex2npm), hex2npm(range));\n\nconst minSatisfyingVersion = (versions: string[], range: string): string =>\n  npm.minSatisfyingVersion(versions.map(hex2npm), hex2npm(range));\n\nconst getNewValue = ({\n  currentValue,\n  rangeStrategy,\n  fromVersion,\n  toVersion,\n}: NewValueConfig): string => {\n  let newSemver = npm.getNewValue({\n    currentValue: hex2npm(currentValue),\n    rangeStrategy,\n    fromVersion,\n    toVersion,\n  });\n  newSemver = npm2hex(newSemver);\n  if (/~>\\s*(\\d+\\.\\d+)$/.test(currentValue)) {\n    newSemver = newSemver.replace(\n      /\\^\\s*(\\d+\\.\\d+(\\.\\d)?)/,\n      (_str, p1) => '~> ' + p1.slice(0, -2)\n    );\n  } else {\n    newSemver = newSemver.replace(/~\\s*(\\d+\\.\\d+\\.\\d)/, '~> $1');\n  }\n  if (npm.isVersion(newSemver)) {\n    newSemver = `== ${newSemver}`;\n  }\n  return newSemver;\n};\n\nexport { isValid };\n\nexport const api: VersioningApi = {\n  ...npm,\n  isLessThanRange,\n  isValid,\n  matches,\n  maxSatisfyingVersion,\n  minSatisfyingVersion,\n  getNewValue,\n};\n\nexport default api;\n"]}