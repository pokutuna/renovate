{"version":3,"file":"parse.js","sourceRoot":"","sources":["../../../lib/versioning/ivy/parse.ts"],"names":[],"mappings":";;;AAAA,8CAA2E;AAE3E,MAAM,eAAe,GAAG,iBAAiB,CAAC;AA+CxC,0CAAe;AA9CjB,MAAM,eAAe,GAAG,sBAAsB,CAAC;AA+C7C,0CAAe;AA9CjB,MAAM,cAAc,GAAG,gBAAgB,CAAC;AA+CtC,wCAAc;AAvChB,SAAS,oBAAoB,CAAC,GAAW;IACvC,IAAI,CAAC,GAAG,EAAE;QACR,OAAO,IAAI,CAAC;KACb;IAED,MAAM,YAAY,GAAG,qBAAqB,CAAC;IAC3C,IAAI,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;QAC1B,MAAM,KAAK,GAAG,GAAG,CAAC,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC,WAAW,EAAE,IAAI,IAAI,CAAC;QAClE,OAAO;YACL,IAAI,EAAE,eAAe;YACrB,KAAK,EAAE,KAAK,KAAK,aAAa,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI;SAC9C,CAAC;KACH;IAED,MAAM,YAAY,GAAG,OAAO,CAAC;IAC7B,IAAI,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;QACtB,MAAM,KAAK,GAAG,GAAG,CAAC,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;QAC5C,IAAI,yBAAe,CAAC,KAAK,CAAC,EAAE;YAC1B,OAAO;gBACL,IAAI,EAAE,eAAe;gBACrB,KAAK;aACN,CAAC;SACH;KACF;IAED,MAAM,KAAK,GAAG,oBAAU,CAAC,GAAG,CAAC,CAAC;IAC9B,IAAI,KAAK,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;QAC/B,OAAO;YACL,IAAI,EAAE,cAAc;YACpB,KAAK,EAAE,oBAAU,CAAC,KAAK,CAAC;SACzB,CAAC;KACH;IAED,OAAO,IAAI,CAAC;AACd,CAAC;AAMC,oDAAoB","sourcesContent":["import { isSingleVersion, parseRange, rangeToStr } from '../maven/compare';\n\nconst REV_TYPE_LATEST = 'REV_TYPE_LATEST';\nconst REV_TYPE_SUBREV = 'REV_TYPE_SUBREVISION';\nconst REV_TYPE_RANGE = 'REV_TYPE_RANGE';\n\nexport interface Revision {\n  type: typeof REV_TYPE_LATEST | typeof REV_TYPE_RANGE | typeof REV_TYPE_SUBREV;\n\n  value: string;\n}\n\nfunction parseDynamicRevision(str: string): Revision {\n  if (!str) {\n    return null;\n  }\n\n  const LATEST_REGEX = /^latest\\.|^latest$/i;\n  if (LATEST_REGEX.test(str)) {\n    const value = str.replace(LATEST_REGEX, '').toLowerCase() || null;\n    return {\n      type: REV_TYPE_LATEST,\n      value: value !== 'integration' ? value : null,\n    };\n  }\n\n  const SUBREV_REGEX = /\\.\\+$/;\n  if (str.endsWith('.+')) {\n    const value = str.replace(SUBREV_REGEX, '');\n    if (isSingleVersion(value)) {\n      return {\n        type: REV_TYPE_SUBREV,\n        value,\n      };\n    }\n  }\n\n  const range = parseRange(str);\n  if (range && range.length === 1) {\n    return {\n      type: REV_TYPE_RANGE,\n      value: rangeToStr(range),\n    };\n  }\n\n  return null;\n}\n\nexport {\n  REV_TYPE_LATEST,\n  REV_TYPE_SUBREV,\n  REV_TYPE_RANGE,\n  parseDynamicRevision,\n};\n"]}