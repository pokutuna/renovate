{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/versioning/poetry/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { major, minor } from 'semver';\nimport { parseRange } from 'semver-utils';\nimport { NewValueConfig, VersioningApi } from '../common';\nimport { api as npm } from '../npm';\n\nexport const id = 'poetry';\nexport const displayName = 'Poetry';\nexport const urls = ['https://python-poetry.org/docs/versions/'];\nexport const supportsRanges = true;\nexport const supportedRangeStrategies = ['bump', 'extend', 'pin', 'replace'];\n\nfunction notEmpty(s: string): boolean {\n  return s !== '';\n}\n\n// This function works like cargo2npm, but it doesn't\n// add a '^', because poetry treats versions without operators as\n// exact versions.\nfunction poetry2npm(input: string): string {\n  const versions = input\n    .split(',')\n    .map((str) => str.trim())\n    .filter(notEmpty);\n  return versions.join(' ');\n}\n\n// NOTE: This function is copied from cargo versionsing code.\n// Poetry uses commas (like in cargo) instead of spaces (like in npm)\n// for AND operation.\nfunction npm2poetry(input: string): string {\n  // Note: this doesn't remove the ^\n  const res = input\n    .split(' ')\n    .map((str) => str.trim())\n    .filter(notEmpty);\n  const operators = ['^', '~', '=', '>', '<', '<=', '>='];\n  for (let i = 0; i < res.length - 1; i += 1) {\n    if (operators.includes(res[i])) {\n      const newValue = res[i] + ' ' + res[i + 1];\n      res.splice(i, 2, newValue);\n    }\n  }\n  return res.join(', ').replace(/\\s*,?\\s*\\|\\|\\s*,?\\s*/, ' || ');\n}\n\nconst isLessThanRange = (version: string, range: string): boolean =>\n  npm.isLessThanRange(version, poetry2npm(range));\n\nexport const isValid = (input: string): string | boolean =>\n  npm.isValid(poetry2npm(input));\n\nconst isVersion = (input: string): string | boolean => npm.isVersion(input);\nconst matches = (version: string, range: string): boolean =>\n  npm.matches(version, poetry2npm(range));\n\nconst maxSatisfyingVersion = (versions: string[], range: string): string =>\n  npm.maxSatisfyingVersion(versions, poetry2npm(range));\n\nconst minSatisfyingVersion = (versions: string[], range: string): string =>\n  npm.minSatisfyingVersion(versions, poetry2npm(range));\n\nconst isSingleVersion = (constraint: string): string | boolean =>\n  (constraint.trim().startsWith('=') &&\n    isVersion(constraint.trim().substring(1).trim())) ||\n  isVersion(constraint.trim());\n\nfunction handleShort(\n  operator: string,\n  currentValue: string,\n  toVersion: string\n): string {\n  const toVersionMajor = major(toVersion);\n  const toVersionMinor = minor(toVersion);\n  const split = currentValue.split('.');\n  if (split.length === 1) {\n    // [^,~]4\n    return operator + toVersionMajor;\n  }\n  if (split.length === 2) {\n    // [^,~]4.1\n    return operator + toVersionMajor + '.' + toVersionMinor;\n  }\n  return null;\n}\n\nfunction getNewValue({\n  currentValue,\n  rangeStrategy,\n  fromVersion,\n  toVersion,\n}: NewValueConfig): string {\n  if (rangeStrategy === 'replace') {\n    const npmCurrentValue = poetry2npm(currentValue);\n    const parsedRange = parseRange(npmCurrentValue);\n    const element = parsedRange[parsedRange.length - 1];\n    if (parsedRange.length === 1 && element.operator) {\n      if (element.operator === '^') {\n        const version = handleShort('^', npmCurrentValue, toVersion);\n        if (version) {\n          return npm2poetry(version);\n        }\n      }\n      if (element.operator === '~') {\n        const version = handleShort('~', npmCurrentValue, toVersion);\n        if (version) {\n          return npm2poetry(version);\n        }\n      }\n    }\n  }\n  const newSemver = npm.getNewValue({\n    currentValue: poetry2npm(currentValue),\n    rangeStrategy,\n    fromVersion,\n    toVersion,\n  });\n  const newPoetry = npm2poetry(newSemver);\n  return newPoetry;\n}\n\nexport const api: VersioningApi = {\n  ...npm,\n  getNewValue,\n  isLessThanRange,\n  isSingleVersion,\n  isValid,\n  matches,\n  maxSatisfyingVersion,\n  minSatisfyingVersion,\n};\nexport default api;\n"]}