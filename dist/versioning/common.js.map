{"version":3,"file":"common.js","sourceRoot":"","sources":["../../lib/versioning/common.ts"],"names":[],"mappings":";;;AA6CA,SAAgB,0BAA0B,CACxC,GAA6C;IAE7C,OAAO,OAAO,GAAG,KAAK,UAAU,CAAC;AACnC,CAAC;AAJD,gEAIC","sourcesContent":["import { Range, SemVer } from 'semver';\nimport { RangeStrategy as _RangeStrategy } from '../types';\n\n/**\n * @deprecated import from `lib/types`\n */\nexport type RangeStrategy = _RangeStrategy;\n\nexport interface NewValueConfig {\n  currentValue: string;\n  rangeStrategy: RangeStrategy;\n  fromVersion?: string;\n  toVersion: string;\n}\nexport interface VersioningApi {\n  // validation\n  isCompatible(version: string, range?: string): string | boolean | null;\n  isSingleVersion(version: string): string | boolean | null;\n  isStable(version: string): boolean;\n  isValid(version: string): string | boolean | null;\n  isVersion(version: string): string | boolean | null;\n\n  // digestion of version\n  getMajor(version: string | SemVer): null | number;\n  getMinor(version: string | SemVer): null | number;\n  getPatch(version: string | SemVer): null | number;\n\n  // comparison\n  equals(version: string, other: string): boolean;\n  isGreaterThan(version: string, other: string): boolean;\n  isLessThanRange?(version: string, range: string): boolean;\n  maxSatisfyingVersion(versions: string[], range: string): string | null;\n  minSatisfyingVersion(versions: string[], range: string): string | null;\n  getNewValue(newValueConfig: NewValueConfig): string;\n  sortVersions(version: string, other: string): number;\n\n  matches(version: string, range: string | Range): boolean;\n\n  valueToVersion?(version: string): string;\n}\n\nexport interface VersioningApiConstructor {\n  new (config?: string): VersioningApi;\n}\n\nexport function isVersioningApiConstructor(\n  obj: VersioningApi | VersioningApiConstructor\n): obj is VersioningApiConstructor {\n  return typeof obj === 'function';\n}\n"]}