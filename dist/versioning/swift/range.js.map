{"version":3,"file":"range.js","sourceRoot":"","sources":["../../../lib/versioning/swift/range.ts"],"names":[],"mappings":"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","sourcesContent":["import semver from 'semver';\nimport { NewValueConfig } from '../common';\n\nconst fromParam = /^\\s*from\\s*:\\s*\"([^\"]+)\"\\s*$/;\nconst fromRange = /^\\s*\"([^\"]+)\"\\s*\\.\\.\\.\\s*$/;\nconst binaryRange = /^\\s*\"([^\"]+)\"\\s*(\\.\\.[.<])\\s*\"([^\"]+)\"\\s*$/;\nconst toRange = /^\\s*(\\.\\.[.<])\\s*\"([^\"]+)\"\\s*$/;\n\nfunction toSemverRange(range: string): string {\n  if (fromParam.test(range)) {\n    const [, version] = fromParam.exec(range);\n    if (semver.valid(version)) {\n      const nextMajor = `${semver.major(version) + 1}.0.0`;\n      return `>=${version} <${nextMajor}`;\n    }\n  } else if (fromRange.test(range)) {\n    const [, version] = fromRange.exec(range);\n    if (semver.valid(version)) {\n      return `>=${version}`;\n    }\n  } else if (binaryRange.test(range)) {\n    const [, fromVersion, op, toVersion] = binaryRange.exec(range);\n    if (semver.valid(fromVersion) && semver.valid(toVersion)) {\n      return op === '..<'\n        ? `>=${fromVersion} <${toVersion}`\n        : `>=${fromVersion} <=${toVersion}`;\n    }\n  } else if (toRange.test(range)) {\n    const [, op, toVersion] = toRange.exec(range);\n    if (semver.valid(toVersion)) {\n      return op === '..<' ? `<${toVersion}` : `<=${toVersion}`;\n    }\n  }\n  return null;\n}\n\nfunction getNewValue({\n  currentValue,\n  fromVersion,\n  toVersion,\n}: NewValueConfig): string {\n  if (fromParam.test(currentValue)) {\n    return currentValue.replace(/\".*?\"/, `\"${toVersion}\"`);\n  }\n  if (fromRange.test(currentValue)) {\n    const [, version] = fromRange.exec(currentValue);\n    return currentValue.replace(version, toVersion);\n  }\n  if (binaryRange.test(currentValue)) {\n    const [, , , version] = binaryRange.exec(currentValue);\n    return currentValue.replace(version, toVersion);\n  }\n  if (toRange.test(currentValue)) {\n    const [, , version] = toRange.exec(currentValue);\n    return currentValue.replace(version, toVersion);\n  }\n  return currentValue;\n}\n\nexport { toSemverRange, getNewValue };\n"]}