{"version":3,"file":"err-serializer.js","sourceRoot":"","sources":["../../lib/logger/err-serializer.ts"],"names":[],"mappings":";;;;;AAAA,0DAAkC;AAElC,KAAK,CAAC,eAAe,GAAG,EAAE,CAAC;AAE3B,wBAAwB;AACxB,SAAwB,aAAa,CAAC,GAAQ;;IAC5C,MAAM,QAAQ,GAAG;QACf,GAAG,GAAG;KACP,CAAC;IACF,IAAI,GAAG,CAAC,IAAI,EAAE;QACZ,QAAQ,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC;KAC1B;SAAM,UAAI,GAAG,CAAC,QAAQ,0CAAE,IAAI,EAAE;QAC7B,QAAQ,CAAC,IAAI,GAAG,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC;KACnC;IACD,IAAI,GAAG,CAAC,OAAO,EAAE;QACf,QAAQ,CAAC,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC;KAChC;IACD,IAAI,GAAG,CAAC,KAAK,EAAE;QACb,QAAQ,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC;KAC5B;IACD,IAAI,QAAQ,CAAC,UAAU,EAAE;QACvB,IAAI,YAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;YACvC,QAAQ,CAAC,UAAU,CAAC,IAAI,GAAG,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CACzD,KAAK,EACL,cAAc,CACf,CAAC;SACH;QACD,IAAI,GAAG,CAAC,UAAU,CAAC,OAAO,EAAE;YAC1B,MAAM,eAAe,GAAG;gBACtB,eAAe;gBACf,gBAAgB;gBAChB,gBAAgB;aACjB,CAAC;YACF,eAAe,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;gBACjC,IAAI,QAAQ,CAAC,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;oBACvC,QAAQ,CAAC,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,gBAAgB,CAAC;iBACxD;YACH,CAAC,CAAC,CAAC;SACJ;KACF;IACD,MAAM,cAAc,GAAG,CAAC,SAAS,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;IAChE,KAAK,MAAM,KAAK,IAAI,cAAc,EAAE;QAClC,IAAI,YAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE;YAC9B,QAAQ,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,OAAO,CACvC,mBAAmB,EACnB,uBAAuB,CACxB,CAAC;SACH;KACF;IACD,OAAO,QAAQ,CAAC;AAClB,CAAC;AA7CD,gCA6CC","sourcesContent":["import is from '@sindresorhus/is';\n\nError.stackTraceLimit = 20;\n\n// TODO: remove any type\nexport default function errSerializer(err: any): any {\n  const response = {\n    ...err,\n  };\n  if (err.body) {\n    response.body = err.body;\n  } else if (err.response?.body) {\n    response.body = err.response.body;\n  }\n  if (err.message) {\n    response.message = err.message;\n  }\n  if (err.stack) {\n    response.stack = err.stack;\n  }\n  if (response.gotOptions) {\n    if (is.string(response.gotOptions.auth)) {\n      response.gotOptions.auth = response.gotOptions.auth.replace(\n        /:.*/,\n        ':***********'\n      );\n    }\n    if (err.gotOptions.headers) {\n      const redactedHeaders = [\n        'authorization',\n        'private-header',\n        'Private-header',\n      ];\n      redactedHeaders.forEach((header) => {\n        if (response.gotOptions.headers[header]) {\n          response.gotOptions.headers[header] = '** redacted **';\n        }\n      });\n    }\n  }\n  const redactedFields = ['message', 'stack', 'stdout', 'stderr'];\n  for (const field of redactedFields) {\n    if (is.string(response[field])) {\n      response[field] = response[field].replace(\n        /https:\\/\\/[^@]*@/g,\n        'https://**redacted**@'\n      );\n    }\n  }\n  return response;\n}\n"]}