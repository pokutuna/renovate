{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../lib/logger/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { Stream } from 'stream';\nimport bunyan from 'bunyan';\nimport fs from 'fs-extra';\nimport { redactedFields, sanitize } from '../util/sanitize';\n\nexport interface BunyanRecord extends Record<string, any> {\n  level: number;\n  msg: string;\n  module?: string;\n}\n\nconst excludeProps = ['pid', 'time', 'v', 'hostname'];\n\nexport class ErrorStream extends Stream {\n  private _errors: BunyanRecord[] = [];\n\n  readable: boolean;\n\n  writable: boolean;\n\n  constructor() {\n    super();\n    this.readable = false;\n    this.writable = true;\n  }\n\n  write(data: BunyanRecord): boolean {\n    const err = { ...data };\n    for (const prop of excludeProps) {\n      delete err[prop];\n    }\n    this._errors.push(err);\n    return true;\n  }\n\n  getErrors(): BunyanRecord[] {\n    return this._errors;\n  }\n}\nconst templateFields = ['prBody'];\nconst contentFields = [\n  'content',\n  'contents',\n  'packageLockParsed',\n  'yarnLockParsed',\n];\n\nfunction sanitizeValue(value: any, seen = new WeakMap()): any {\n  if (Array.isArray(value)) {\n    const length = value.length;\n    const arrayResult = Array(length);\n    seen.set(value, arrayResult);\n    for (let idx = 0; idx < length; idx += 1) {\n      const val = value[idx];\n      arrayResult[idx] = seen.has(val)\n        ? seen.get(val)\n        : sanitizeValue(val, seen);\n    }\n    return arrayResult;\n  }\n\n  if (value instanceof Buffer) {\n    return '[content]';\n  }\n\n  const valueType = typeof value;\n\n  if (value != null && valueType !== 'function' && valueType === 'object') {\n    if (value instanceof Date) {\n      return value;\n    }\n\n    const objectResult: Record<string, any> = {};\n    seen.set(value, objectResult);\n    for (const [key, val] of Object.entries<any>(value)) {\n      let curValue: any;\n      if (redactedFields.includes(key)) {\n        curValue = '***********';\n      } else if (contentFields.includes(key)) {\n        curValue = '[content]';\n      } else if (templateFields.includes(key)) {\n        curValue = '[Template]';\n      } else {\n        curValue = seen.has(val) ? seen.get(val) : sanitizeValue(val, seen);\n      }\n\n      objectResult[key] = curValue;\n    }\n    return objectResult;\n  }\n\n  return valueType === 'string' ? sanitize(value) : value;\n}\n\nexport function withSanitizer(streamConfig): bunyan.Stream {\n  if (streamConfig.type === 'rotating-file') {\n    throw new Error(\"Rotating files aren't supported\");\n  }\n\n  const stream = streamConfig.stream;\n  if (stream?.writable) {\n    const write = (chunk: BunyanRecord, enc, cb): void => {\n      const raw = sanitizeValue(chunk);\n      const result =\n        streamConfig.type === 'raw'\n          ? raw\n          : JSON.stringify(raw, bunyan.safeCycles()).replace(/\\n?$/, '\\n');\n      stream.write(result, enc, cb);\n    };\n\n    return {\n      ...streamConfig,\n      type: 'raw',\n      stream: { write },\n    };\n  }\n\n  if (streamConfig.path) {\n    const fileStream = fs.createWriteStream(streamConfig.path, {\n      flags: 'a',\n      encoding: 'utf8',\n    });\n\n    return withSanitizer({ ...streamConfig, stream: fileStream });\n  }\n\n  throw new Error(\"Missing 'stream' or 'path' for bunyan stream\");\n}\n"]}