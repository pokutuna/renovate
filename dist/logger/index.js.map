{"version":3,"file":"index.js","sourceRoot":"","sources":["../../lib/logger/index.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport * as bunyan from 'bunyan';\nimport * as shortid from 'shortid';\n\nimport cmdSerializer from './cmd-serializer';\nimport configSerializer from './config-serializer';\nimport errSerializer from './err-serializer';\nimport { RenovateStream } from './pretty-stdout';\nimport { ErrorStream, withSanitizer } from './utils';\n\nlet logContext: string = process.env.LOG_CONTEXT || shortid.generate();\nlet meta = {};\n\nexport interface LogError {\n  level: bunyan.LogLevel;\n  meta: any;\n  msg?: string;\n}\n\nconst errors = new ErrorStream();\n\nconst stdout: bunyan.Stream = {\n  name: 'stdout',\n  level: (process.env.LOG_LEVEL as bunyan.LogLevel) || 'info',\n  stream: process.stdout,\n};\n\nif (process.env.LOG_FORMAT !== 'json') {\n  // TODO: typings\n  const prettyStdOut = new RenovateStream() as any;\n  prettyStdOut.pipe(process.stdout);\n  stdout.stream = prettyStdOut;\n  stdout.type = 'raw';\n}\n\nconst bunyanLogger = bunyan.createLogger({\n  name: 'renovate',\n  serializers: {\n    body: configSerializer,\n    cmd: cmdSerializer,\n    config: configSerializer,\n    migratedConfig: configSerializer,\n    originalConfig: configSerializer,\n    presetConfig: configSerializer,\n    oldConfig: configSerializer,\n    newConfig: configSerializer,\n    err: errSerializer,\n  },\n  streams: [\n    stdout,\n    {\n      name: 'error',\n      level: 'error' as bunyan.LogLevel,\n      stream: errors as any,\n      type: 'raw',\n    },\n  ].map(withSanitizer),\n});\n\nconst logFactory = (level: bunyan.LogLevelString): any => {\n  return (p1: any, p2: any): void => {\n    if (p2) {\n      // meta and msg provided\n      bunyanLogger[level]({ logContext, ...meta, ...p1 }, p2);\n    } else if (is.string(p1)) {\n      // only message provided\n      bunyanLogger[level]({ logContext, ...meta }, p1);\n    } else {\n      // only meta provided\n      bunyanLogger[level]({ logContext, ...meta, ...p1 });\n    }\n  };\n};\n\nconst loggerLevels: bunyan.LogLevelString[] = [\n  'trace',\n  'debug',\n  'info',\n  'warn',\n  'error',\n  'fatal',\n];\n\ninterface Logger {\n  trace(msg: string): void;\n  trace(meta: Record<string, any>, msg?: string): void;\n  debug(msg: string): void;\n  debug(meta: Record<string, any>, msg?: string): void;\n  info(msg: string): void;\n  info(meta: Record<string, any>, msg?: string): void;\n  warn(msg: string): void;\n  warn(meta: Record<string, any>, msg?: string): void;\n  error(msg: string): void;\n  error(meta: Record<string, any>, msg?: string): void;\n  fatal(msg: string): void;\n  fatal(meta: Record<string, any>, msg?: string): void;\n}\n\nexport const logger: Logger = {} as any;\n\nloggerLevels.forEach((loggerLevel) => {\n  logger[loggerLevel] = logFactory(loggerLevel);\n});\n\nexport function setContext(value: string): void {\n  logContext = value;\n}\n\nexport function getContext(): any {\n  return logContext;\n}\n\n// setMeta overrides existing meta, may remove fields if no longer existing\nexport function setMeta(obj: any): void {\n  meta = { ...obj };\n}\n\n// addMeta overrides or adds fields but does not remove any\nexport function addMeta(obj: any): void {\n  meta = { ...meta, ...obj };\n}\n\n// removeMeta removes the provided fields from meta\nexport function removeMeta(fields: string[]): void {\n  Object.keys(meta).forEach((key) => {\n    if (fields.includes(key)) {\n      delete meta[key];\n    }\n  });\n}\n\nexport /* istanbul ignore next */ function addStream(\n  stream: bunyan.Stream\n): void {\n  bunyanLogger.addStream(withSanitizer(stream));\n}\n\nexport function levels(name: string, level: bunyan.LogLevel): void {\n  bunyanLogger.levels(name, level);\n}\n\nexport function getErrors(): any {\n  return errors.getErrors();\n}\n"]}