{"version":3,"file":"migration.js","sourceRoot":"","sources":["../../lib/config/migration.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport later from 'later';\nimport { logger } from '../logger';\nimport { HostRule } from '../types';\nimport { clone } from '../util/clone';\nimport { PackageRule, RenovateConfig } from './common';\nimport { RenovateOptions, getOptions } from './definitions';\n\nconst options = getOptions();\n\nlet optionTypes: Record<string, RenovateOptions['type']>;\n\nconst removedOptions = [\n  'maintainYarnLock',\n  'yarnCacheFolder',\n  'yarnMaintenanceBranchName',\n  'yarnMaintenanceCommitMessage',\n  'yarnMaintenancePrTitle',\n  'yarnMaintenancePrBody',\n  'groupBranchName',\n  'groupBranchName',\n  'groupCommitMessage',\n  'groupPrTitle',\n  'groupPrBody',\n];\n\nexport interface MigratedConfig {\n  isMigrated: boolean;\n  migratedConfig: RenovateConfig;\n}\n\ninterface MigratedRenovateConfig extends RenovateConfig {\n  endpoints?: HostRule[];\n  pathRules: PackageRule[];\n  packages: PackageRule[];\n\n  node?: RenovateConfig;\n  travis?: RenovateConfig;\n}\n\n// Returns a migrated config\nexport function migrateConfig(\n  config: RenovateConfig,\n  // TODO: remove any type\n  parentKey?: string | any\n): MigratedConfig {\n  try {\n    if (!optionTypes) {\n      optionTypes = {};\n      options.forEach((option) => {\n        optionTypes[option.name] = option.type;\n      });\n    }\n    let isMigrated = false;\n    const migratedConfig = clone(config) as MigratedRenovateConfig;\n    const depTypes = [\n      'dependencies',\n      'devDependencies',\n      'engines',\n      'optionalDependencies',\n      'peerDependencies',\n    ];\n    for (const [key, val] of Object.entries(config)) {\n      if (removedOptions.includes(key)) {\n        isMigrated = true;\n        delete migratedConfig[key];\n      } else if (key === 'pathRules') {\n        isMigrated = true;\n        if (is.array(val)) {\n          migratedConfig.packageRules = migratedConfig.packageRules || [];\n          const migratedPathRules = migratedConfig.pathRules.map(\n            (p) => migrateConfig(p, key).migratedConfig\n          );\n          migratedConfig.packageRules = migratedPathRules.concat(\n            migratedConfig.packageRules\n          );\n        }\n        delete migratedConfig.pathRules;\n      } else if (key === 'suppressNotifications') {\n        if (is.nonEmptyArray(val) && val.includes('prEditNotification')) {\n          isMigrated = true;\n          migratedConfig.suppressNotifications = migratedConfig.suppressNotifications.filter(\n            (item) => item !== 'prEditNotification'\n          );\n        }\n      } else if (key.startsWith('masterIssue')) {\n        isMigrated = true;\n        const newKey = key.replace('masterIssue', 'dependencyDashboard');\n        migratedConfig[newKey] = val;\n        if (optionTypes[newKey] === 'boolean' && val === 'true') {\n          migratedConfig[newKey] = true;\n        }\n        delete migratedConfig[key];\n      } else if (key === 'gomodTidy') {\n        isMigrated = true;\n        if (val) {\n          migratedConfig.postUpdateOptions =\n            migratedConfig.postUpdateOptions || [];\n          migratedConfig.postUpdateOptions.push('gomodTidy');\n        }\n        delete migratedConfig.gomodTidy;\n      } else if (parentKey === 'hostRules' && key === 'platform') {\n        isMigrated = true;\n        migratedConfig.hostType = val;\n        delete migratedConfig.platform;\n      } else if (parentKey === 'hostRules' && key === 'endpoint') {\n        isMigrated = true;\n        migratedConfig.baseUrl = val;\n        delete migratedConfig.endpoint;\n      } else if (parentKey === 'hostRules' && key === 'host') {\n        isMigrated = true;\n        migratedConfig.hostName = val;\n        delete migratedConfig.host;\n      } else if (key === 'packageFiles' && is.array(val)) {\n        isMigrated = true;\n        const fileList = [];\n        for (const packageFile of val) {\n          if (is.object(packageFile) && !is.array(packageFile)) {\n            fileList.push((packageFile as any).packageFile);\n            if (Object.keys(packageFile).length > 1) {\n              migratedConfig.packageRules = migratedConfig.packageRules || [];\n              const payload = migrateConfig(packageFile as RenovateConfig, key)\n                .migratedConfig;\n              for (const subrule of payload.packageRules || []) {\n                subrule.paths = [(packageFile as any).packageFile];\n                migratedConfig.packageRules.push(subrule);\n              }\n              delete payload.packageFile;\n              delete payload.packageRules;\n              if (Object.keys(payload).length) {\n                migratedConfig.packageRules.push({\n                  ...payload,\n                  paths: [(packageFile as any).packageFile],\n                });\n              }\n            }\n          } else {\n            fileList.push(packageFile);\n          }\n        }\n        migratedConfig.includePaths = fileList;\n        delete migratedConfig.packageFiles;\n      } else if (depTypes.includes(key)) {\n        isMigrated = true;\n        migratedConfig.packageRules = migratedConfig.packageRules || [];\n        const depTypePackageRule = migrateConfig(val as RenovateConfig, key)\n          .migratedConfig;\n        depTypePackageRule.depTypeList = [key];\n        delete depTypePackageRule.packageRules;\n        migratedConfig.packageRules.push(depTypePackageRule);\n        delete migratedConfig[key];\n      } else if (key === 'pinVersions') {\n        isMigrated = true;\n        delete migratedConfig.pinVersions;\n        if (val === true) {\n          migratedConfig.rangeStrategy = 'pin';\n        } else if (val === false) {\n          migratedConfig.rangeStrategy = 'replace';\n        }\n      } else if (key === 'gitFs') {\n        isMigrated = true;\n        delete migratedConfig.gitFs;\n      } else if (key === 'rebaseStalePrs') {\n        isMigrated = true;\n        delete migratedConfig.rebaseStalePrs;\n        if (!migratedConfig.rebaseWhen) {\n          if (val === null) {\n            migratedConfig.rebaseWhen = 'auto';\n          }\n          if (val === true) {\n            migratedConfig.rebaseWhen = 'behind-base-branch';\n          }\n          if (val === false) {\n            migratedConfig.rebaseWhen = 'conflicted';\n          }\n        }\n      } else if (key === 'rebaseConflictedPrs') {\n        isMigrated = true;\n        delete migratedConfig.rebaseConflictedPrs;\n        if (val === false) {\n          migratedConfig.rebaseWhen = 'never';\n        }\n      } else if (key === 'exposeEnv') {\n        isMigrated = true;\n        delete migratedConfig.exposeEnv;\n        if (val === true) {\n          migratedConfig.trustLevel = 'high';\n        } else if (val === false) {\n          migratedConfig.trustLevel = 'low';\n        }\n      } else if (key === 'upgradeInRange') {\n        isMigrated = true;\n        delete migratedConfig.upgradeInRange;\n        if (val === true) {\n          migratedConfig.rangeStrategy = 'bump';\n        }\n      } else if (key === 'versionStrategy') {\n        isMigrated = true;\n        delete migratedConfig.versionStrategy;\n        if (val === 'widen') {\n          migratedConfig.rangeStrategy = 'widen';\n        }\n      } else if (key === 'semanticPrefix' && is.string(val)) {\n        isMigrated = true;\n        delete migratedConfig.semanticPrefix;\n        let [text] = val.split(':') as any; // TODO: fixme\n        text = text.split('(');\n        [migratedConfig.semanticCommitType] = text;\n        if (text.length > 1) {\n          [migratedConfig.semanticCommitScope] = text[1].split(')');\n        } else {\n          migratedConfig.semanticCommitScope = null;\n        }\n      } else if (key === 'extends' && is.array<string>(val)) {\n        for (let i = 0; i < val.length; i += 1) {\n          if (val[i] === 'config:application' || val[i] === ':js-app') {\n            isMigrated = true;\n            migratedConfig.extends[i] = 'config:js-app';\n          } else if (val[i] === ':library' || val[i] === 'config:library') {\n            isMigrated = true;\n            migratedConfig.extends[i] = 'config:js-lib';\n          } else if (is.string(val[i]) && val[i].startsWith(':masterIssue')) {\n            isMigrated = true;\n            migratedConfig.extends[i] = val[i].replace(\n              'masterIssue',\n              'dependencyDashboard'\n            );\n          }\n        }\n      } else if (key === 'versionScheme') {\n        isMigrated = true;\n        migratedConfig.versioning = val;\n        delete migratedConfig.versionScheme;\n      } else if (\n        key === 'automergeType' &&\n        is.string(val) &&\n        val.startsWith('branch-')\n      ) {\n        isMigrated = true;\n        migratedConfig.automergeType = 'branch';\n      } else if (key === 'automergeMinor') {\n        isMigrated = true;\n        migratedConfig.minor = migratedConfig.minor || {};\n        migratedConfig.minor.automerge = val == true; // eslint-disable-line eqeqeq\n        delete migratedConfig[key];\n      } else if (key === 'automergeMajor') {\n        isMigrated = true;\n        migratedConfig.major = migratedConfig.major || {};\n        migratedConfig.major.automerge = val == true; // eslint-disable-line eqeqeq\n        delete migratedConfig[key];\n      } else if (key === 'multipleMajorPrs') {\n        isMigrated = true;\n        delete migratedConfig.multipleMajorPrs;\n        migratedConfig.separateMultipleMajor = val;\n      } else if (key === 'renovateFork' && is.boolean(val)) {\n        isMigrated = true;\n        delete migratedConfig.renovateFork;\n        migratedConfig.includeForks = val;\n      } else if (key === 'separateMajorReleases') {\n        isMigrated = true;\n        delete migratedConfig.separateMultipleMajor;\n        migratedConfig.separateMajorMinor = val;\n      } else if (key === 'separatePatchReleases') {\n        isMigrated = true;\n        delete migratedConfig.separatePatchReleases;\n        migratedConfig.separateMinorPatch = val;\n      } else if (key === 'automergePatch') {\n        isMigrated = true;\n        migratedConfig.patch = migratedConfig.patch || {};\n        migratedConfig.patch.automerge = val == true; // eslint-disable-line eqeqeq\n        delete migratedConfig[key];\n      } else if (key === 'ignoreNodeModules') {\n        isMigrated = true;\n        delete migratedConfig.ignoreNodeModules;\n        migratedConfig.ignorePaths = val ? ['node_modules/'] : [];\n      } else if (\n        key === 'automerge' &&\n        is.string(val) &&\n        ['none', 'patch', 'minor', 'any'].includes(val)\n      ) {\n        delete migratedConfig.automerge;\n        isMigrated = true;\n        if (val === 'none') {\n          migratedConfig.automerge = false;\n        } else if (val === 'patch') {\n          migratedConfig.patch = migratedConfig.patch || {};\n          migratedConfig.patch.automerge = true;\n          migratedConfig.minor = migratedConfig.minor || {};\n          migratedConfig.minor.automerge = false;\n          migratedConfig.major = migratedConfig.major || {};\n          migratedConfig.major.automerge = false;\n        } else if (val === 'minor') {\n          migratedConfig.minor = migratedConfig.minor || {};\n          migratedConfig.minor.automerge = true;\n          migratedConfig.major = migratedConfig.major || {};\n          migratedConfig.major.automerge = false;\n        } /* istanbul ignore else: we can never go to else */ else if (\n          val === 'any'\n        ) {\n          migratedConfig.automerge = true;\n        }\n      } else if (key === 'packages') {\n        isMigrated = true;\n        migratedConfig.packageRules = migratedConfig.packageRules || [];\n        migratedConfig.packageRules = migratedConfig.packageRules.concat(\n          migratedConfig.packages.map(\n            (p) => migrateConfig(p, key).migratedConfig\n          )\n        );\n        delete migratedConfig.packages;\n      } else if (key === 'excludedPackageNames') {\n        isMigrated = true;\n        migratedConfig.excludePackageNames = val;\n        delete migratedConfig.excludedPackageNames;\n      } else if (key === 'packageName') {\n        isMigrated = true;\n        migratedConfig.packageNames = [val];\n        delete migratedConfig.packageName;\n      } else if (key === 'packagePattern') {\n        isMigrated = true;\n        migratedConfig.packagePatterns = [val];\n        delete migratedConfig.packagePattern;\n      } else if (key === 'baseBranch') {\n        isMigrated = true;\n        migratedConfig.baseBranches = (is.array(val) ? val : [val]) as string[];\n        delete migratedConfig.baseBranch;\n      } else if (key === 'schedule' && val) {\n        // massage to array first\n        const schedules = is.string(val) ? [val] : [...(val as string[])];\n        // split 'and'\n        const schedulesLength = schedules.length;\n        for (let i = 0; i < schedulesLength; i += 1) {\n          if (\n            schedules[i].includes(' and ') &&\n            schedules[i].includes('before ') &&\n            schedules[i].includes('after ')\n          ) {\n            const parsedSchedule = later.parse.text(\n              // We need to massage short hours first before we can parse it\n              schedules[i].replace(/( \\d?\\d)((a|p)m)/g, '$1:00$2')\n            ).schedules[0];\n            // Only migrate if the after time is greater than before, e.g. \"after 10pm and before 5am\"\n            if (parsedSchedule?.t_a?.[0] > parsedSchedule?.t_b?.[0]) {\n              isMigrated = true;\n              const toSplit = schedules[i];\n              schedules[i] = toSplit\n                .replace(\n                  /^(.*?)(after|before) (.*?) and (after|before) (.*?)( |$)(.*)/,\n                  '$1$2 $3 $7'\n                )\n                .trim();\n              schedules.push(\n                toSplit\n                  .replace(\n                    /^(.*?)(after|before) (.*?) and (after|before) (.*?)( |$)(.*)/,\n                    '$1$4 $5 $7'\n                  )\n                  .trim()\n              );\n            }\n          }\n        }\n        for (let i = 0; i < schedules.length; i += 1) {\n          if (schedules[i].includes('on the last day of the month')) {\n            isMigrated = true;\n            schedules[i] = schedules[i].replace(\n              'on the last day of the month',\n              'on the first day of the month'\n            );\n          }\n          if (schedules[i].includes('on every weekday')) {\n            isMigrated = true;\n            schedules[i] = schedules[i].replace(\n              'on every weekday',\n              'every weekday'\n            );\n          }\n          if (schedules[i].endsWith(' every day')) {\n            isMigrated = true;\n            schedules[i] = schedules[i].replace(' every day', '');\n          }\n          if (\n            /every (mon|tues|wednes|thurs|fri|satur|sun)day$/.test(schedules[i])\n          ) {\n            isMigrated = true;\n            schedules[i] = schedules[i].replace(/every ([a-z]*day)$/, 'on $1');\n          }\n          if (schedules[i].endsWith('days')) {\n            isMigrated = true;\n            schedules[i] = schedules[i].replace('days', 'day');\n          }\n        }\n        if (isMigrated) {\n          if (is.string(val) && schedules.length === 1) {\n            [migratedConfig.schedule] = schedules as any; // TODO: fixme\n          } else {\n            migratedConfig.schedule = schedules;\n          }\n        }\n      } else if (is.string(val) && val.startsWith('{{semanticPrefix}}')) {\n        isMigrated = true;\n        migratedConfig[key] = val.replace(\n          '{{semanticPrefix}}',\n          '{{#if semanticCommitType}}{{semanticCommitType}}{{#if semanticCommitScope}}({{semanticCommitScope}}){{/if}}: {{/if}}'\n        );\n      } else if (key === 'depTypes' && is.array(val)) {\n        val.forEach((depType) => {\n          if (is.object(depType) && !is.array(depType)) {\n            const depTypeName = (depType as any).depType;\n            if (depTypeName) {\n              migratedConfig.packageRules = migratedConfig.packageRules || [];\n              const newPackageRule = migrateConfig(\n                depType as RenovateConfig,\n                key\n              ).migratedConfig;\n              delete newPackageRule.depType;\n              newPackageRule.depTypeList = [depTypeName];\n              migratedConfig.packageRules.push(newPackageRule);\n            }\n          }\n        });\n        isMigrated = true;\n        delete migratedConfig.depTypes;\n      } else if (optionTypes[key] === 'object' && is.boolean(val)) {\n        isMigrated = true;\n        migratedConfig[key] = { enabled: val };\n      } else if (optionTypes[key] === 'boolean') {\n        if (val === 'true') {\n          migratedConfig[key] = true;\n        } else if (val === 'false') {\n          migratedConfig[key] = false;\n        }\n      } else if (\n        optionTypes[key] === 'string' &&\n        is.array(val) &&\n        val.length === 1\n      ) {\n        migratedConfig[key] = `${val[0]}`;\n      } else if (key === 'node' && (val as RenovateConfig).enabled === true) {\n        isMigrated = true;\n        delete migratedConfig.node.enabled;\n        migratedConfig.travis = migratedConfig.travis || {};\n        migratedConfig.travis.enabled = true;\n        if (!Object.keys(migratedConfig.node).length) {\n          delete migratedConfig.node;\n        } else {\n          const subMigrate = migrateConfig(migratedConfig.node, key);\n          migratedConfig.node = subMigrate.migratedConfig;\n        }\n      } else if (is.array(val)) {\n        const newArray = [];\n        for (const item of migratedConfig[key] as unknown[]) {\n          if (is.object(item) && !is.array(item)) {\n            const arrMigrate = migrateConfig(item as RenovateConfig, key);\n            newArray.push(arrMigrate.migratedConfig);\n            if (arrMigrate.isMigrated) {\n              isMigrated = true;\n            }\n          } else {\n            newArray.push(item);\n          }\n        }\n        migratedConfig[key] = newArray;\n      } else if (is.object(val)) {\n        const subMigrate = migrateConfig(\n          migratedConfig[key] as RenovateConfig,\n          key\n        );\n        if (subMigrate.isMigrated) {\n          isMigrated = true;\n          migratedConfig[key] = subMigrate.migratedConfig;\n        }\n      } else if (\n        key.startsWith('commitMessage') &&\n        is.string(val) &&\n        (val.includes('currentVersion') || val.includes('newVersion'))\n      ) {\n        isMigrated = true;\n        migratedConfig[key] = val\n          .replace(/currentVersion/g, 'currentValue')\n          .replace(/newVersion/g, 'newValue')\n          .replace(/newValueMajor/g, 'newMajor')\n          .replace(/newValueMinor/g, 'newMinor');\n      } else if (key === 'raiseDeprecationWarnings') {\n        isMigrated = true;\n        delete migratedConfig.raiseDeprecationWarnings;\n        if (val === false) {\n          migratedConfig.suppressNotifications =\n            migratedConfig.suppressNotifications || [];\n          migratedConfig.suppressNotifications.push('deprecationWarningIssues');\n        }\n      }\n    }\n    if (migratedConfig.endpoints) {\n      migratedConfig.hostRules = migratedConfig.endpoints;\n      delete migratedConfig.endpoints;\n      isMigrated = true;\n    }\n    return { isMigrated, migratedConfig };\n  } catch (err) /* istanbul ignore next */ {\n    logger.debug({ config }, 'migrateConfig() error');\n    throw err;\n  }\n}\n"]}