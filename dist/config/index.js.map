{"version":3,"file":"index.js","sourceRoot":"","sources":["../../lib/config/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { addStream, levels, logger, setContext } from '../logger';\nimport { get, getLanguageList, getManagerList } from '../manager';\nimport { ensureTrailingSlash } from '../util/url';\nimport * as cliParser from './cli';\nimport { RenovateConfig, RenovateConfigStage } from './common';\nimport * as defaultsParser from './defaults';\nimport * as definitions from './definitions';\nimport * as envParser from './env';\nimport * as fileParser from './file';\nimport { resolveConfigPresets } from './presets';\nimport { mergeChildConfig } from './utils';\n\nexport * from './common';\nexport { mergeChildConfig };\n\nexport interface ManagerConfig extends RenovateConfig {\n  language: string;\n  manager: string;\n}\n\nexport function getManagerConfig(\n  config: RenovateConfig,\n  manager: string\n): ManagerConfig {\n  let managerConfig: ManagerConfig = {\n    ...config,\n    language: null,\n    manager: null,\n  };\n  const language = get(manager, 'language');\n  if (language) {\n    managerConfig = mergeChildConfig(managerConfig, config[language]);\n  }\n  managerConfig = mergeChildConfig(managerConfig, config[manager]);\n  for (const i of getLanguageList().concat(getManagerList())) {\n    delete managerConfig[i];\n  }\n  managerConfig.language = language;\n  managerConfig.manager = manager;\n  return managerConfig;\n}\n\nexport async function parseConfigs(\n  env: NodeJS.ProcessEnv,\n  argv: string[]\n): Promise<RenovateConfig> {\n  logger.debug('Parsing configs');\n\n  // Get configs\n  const defaultConfig = await resolveConfigPresets(defaultsParser.getConfig());\n  const fileConfig = await resolveConfigPresets(fileParser.getConfig(env));\n  const cliConfig = await resolveConfigPresets(cliParser.getConfig(argv));\n  const envConfig = await resolveConfigPresets(envParser.getConfig(env));\n\n  let config = mergeChildConfig(fileConfig, envConfig);\n  config = mergeChildConfig(config, cliConfig);\n\n  const combinedConfig = config;\n\n  config = mergeChildConfig(defaultConfig, config);\n\n  if (config.prFooter !== defaultConfig.prFooter) {\n    config.customPrFooter = true;\n  }\n\n  if (config.forceCli) {\n    config = mergeChildConfig(config, { force: { ...cliConfig } });\n  }\n\n  // Set log level\n  levels('stdout', config.logLevel);\n\n  if (config.logContext) {\n    // This only has an effect if logContext was defined via file or CLI, otherwise it would already have been detected in env\n    setContext(config.logContext);\n  }\n\n  // Add file logger\n  // istanbul ignore if\n  if (config.logFile) {\n    logger.debug(\n      `Enabling ${config.logFileLevel} logging to ${config.logFile}`\n    );\n    addStream({\n      name: 'logfile',\n      path: config.logFile,\n      level: config.logFileLevel,\n    });\n  }\n\n  logger.trace({ config: defaultConfig }, 'Default config');\n  logger.debug({ config: fileConfig }, 'File config');\n  logger.debug({ config: cliConfig }, 'CLI config');\n  logger.debug({ config: envConfig }, 'Env config');\n  logger.debug({ config: combinedConfig }, 'Combined config');\n\n  // Get global config\n  logger.trace({ config }, 'Full config');\n\n  // Print config\n  logger.trace({ config }, 'Global config');\n\n  // Massage endpoint to have a trailing slash\n  if (config.endpoint) {\n    logger.debug('Adding trailing slash to endpoint');\n    config.endpoint = ensureTrailingSlash(config.endpoint);\n  }\n\n  // Remove log file entries\n  delete config.logFile;\n  delete config.logFileLevel;\n\n  // Move global variables that we need to use later\n  global.trustLevel =\n    config.trustLevel || /* istanbul ignore next: never happen? */ 'low';\n  delete config.trustLevel;\n\n  return config;\n}\n\nexport function filterConfig(\n  inputConfig: RenovateConfig,\n  targetStage: RenovateConfigStage\n): RenovateConfig {\n  logger.trace({ config: inputConfig }, `filterConfig('${targetStage}')`);\n  const outputConfig: RenovateConfig = { ...inputConfig };\n  const stages = ['global', 'repository', 'package', 'branch', 'pr'];\n  const targetIndex = stages.indexOf(targetStage);\n  for (const option of definitions.getOptions()) {\n    const optionIndex = stages.indexOf(option.stage);\n    if (optionIndex !== -1 && optionIndex < targetIndex) {\n      delete outputConfig[option.name];\n    }\n  }\n  return outputConfig;\n}\n"]}