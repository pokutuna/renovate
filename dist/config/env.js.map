{"version":3,"file":"env.js","sourceRoot":"","sources":["../../lib/config/env.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\n\nimport { PLATFORM_TYPE_GITHUB } from '../constants/platforms';\nimport * as datasourceDocker from '../datasource/docker';\nimport { logger } from '../logger';\nimport { RenovateConfig } from './common';\nimport { RenovateOptions, getOptions } from './definitions';\n\nexport function getEnvName(option: Partial<RenovateOptions>): string {\n  if (option.env === false) {\n    return '';\n  }\n  if (option.env) {\n    return option.env;\n  }\n  const nameWithUnderscores = option.name.replace(/([A-Z])/g, '_$1');\n  return `RENOVATE_${nameWithUnderscores.toUpperCase()}`;\n}\n\nexport function getConfig(env: NodeJS.ProcessEnv): RenovateConfig {\n  const options = getOptions();\n\n  const config: RenovateConfig = { hostRules: [] };\n\n  const coersions = {\n    boolean: (val: string): boolean => val === 'true',\n    array: (val: string): string[] => val.split(',').map((el) => el.trim()),\n    string: (val: string): string => val.replace(/\\\\n/g, '\\n'),\n    object: (val: string): any => JSON.parse(val),\n    integer: parseInt,\n  };\n\n  options.forEach((option) => {\n    if (option.env !== false) {\n      const envName = getEnvName(option);\n      if (env[envName]) {\n        // istanbul ignore if\n        if (option.type === 'array' && option.subType === 'object') {\n          try {\n            const parsed = JSON.parse(env[envName]);\n            if (is.array(parsed)) {\n              config[option.name] = parsed;\n            } else {\n              logger.debug(\n                { val: env[envName], envName },\n                'Could not parse object array'\n              );\n            }\n          } catch (err) {\n            logger.debug({ val: env[envName], envName }, 'Could not parse CLI');\n          }\n        } else {\n          const coerce = coersions[option.type];\n          config[option.name] = coerce(env[envName]);\n        }\n      }\n    }\n  });\n\n  if (env.GITHUB_COM_TOKEN) {\n    config.hostRules.push({\n      hostType: PLATFORM_TYPE_GITHUB,\n      domainName: 'github.com',\n      token: env.GITHUB_COM_TOKEN,\n    });\n  }\n\n  if (env.DOCKER_USERNAME && env.DOCKER_PASSWORD) {\n    config.hostRules.push({\n      hostType: datasourceDocker.id,\n      username: env.DOCKER_USERNAME,\n      password: env.DOCKER_PASSWORD,\n    });\n  }\n\n  // These env vars are deprecated and deleted to make sure they're not used\n  const unsupportedEnv = [\n    'BITBUCKET_TOKEN',\n    'BITBUCKET_USERNAME',\n    'BITBUCKET_PASSWORD',\n    'GITHUB_ENDPOINT',\n    'GITHUB_TOKEN',\n    'GITLAB_ENDPOINT',\n    'GITLAB_TOKEN',\n    'VSTS_ENDPOINT',\n    'VSTS_TOKEN',\n  ];\n  // eslint-disable-next-line no-param-reassign\n  unsupportedEnv.forEach((val) => delete env[val]);\n\n  return config;\n}\n"]}