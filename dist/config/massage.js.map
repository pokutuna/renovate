{"version":3,"file":"massage.js","sourceRoot":"","sources":["../../lib/config/massage.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { clone } from '../util/clone';\nimport { PackageRule, RenovateConfig, UpdateType } from './common';\nimport { getOptions } from './definitions';\n\nconst options = getOptions();\n\nlet allowedStrings: string[];\n\n// Returns a massaged config\nexport function massageConfig(config: RenovateConfig): RenovateConfig {\n  if (!allowedStrings) {\n    allowedStrings = [];\n    options.forEach((option) => {\n      if (option.allowString) {\n        allowedStrings.push(option.name);\n      }\n    });\n  }\n  const massagedConfig = clone(config);\n  for (const [key, val] of Object.entries(config)) {\n    if (allowedStrings.includes(key) && is.string(val)) {\n      massagedConfig[key] = [val];\n    } else if (key === 'npmToken' && is.string(val) && val.length < 50) {\n      massagedConfig.npmrc = `//registry.npmjs.org/:_authToken=${val}\\n`;\n      delete massagedConfig.npmToken;\n    } else if (is.array(val)) {\n      massagedConfig[key] = [];\n      val.forEach((item) => {\n        if (is.object(item)) {\n          (massagedConfig[key] as RenovateConfig[]).push(\n            massageConfig(item as RenovateConfig)\n          );\n        } else {\n          (massagedConfig[key] as unknown[]).push(item);\n        }\n      });\n    } else if (is.object(val) && key !== 'encrypted') {\n      massagedConfig[key] = massageConfig(val as RenovateConfig);\n    }\n  }\n  if (is.nonEmptyArray(massagedConfig.packageRules)) {\n    const newRules: PackageRule[] = [];\n    const updateTypes: UpdateType[] = [\n      'major',\n      'minor',\n      'patch',\n      'pin',\n      'digest',\n      'lockFileMaintenance',\n      'rollback',\n    ];\n    for (const rule of massagedConfig.packageRules) {\n      newRules.push(rule);\n      for (const [key, val] of Object.entries(rule) as [\n        UpdateType,\n        PackageRule\n      ][]) {\n        if (updateTypes.includes(key)) {\n          const newRule = clone(rule);\n          newRule.updateTypes = rule.updateTypes || [];\n          newRule.updateTypes.push(key);\n          Object.assign(newRule, val);\n          newRules.push(newRule);\n        }\n      }\n    }\n    for (const rule of newRules) {\n      updateTypes.forEach((updateType) => {\n        delete rule[updateType];\n      });\n    }\n    massagedConfig.packageRules = newRules;\n  }\n  return massagedConfig;\n}\n"]}