{"version":3,"file":"validation.js","sourceRoot":"","sources":["../../lib/config/validation.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,0DAAkC;AAClC,yCAAsC;AACtC,2DAA6C;AAC7C,yDAAgF;AAEhF,+CAA4D;AAC5D,uCAAiD;AACjD,gFAAkE;AAElE,MAAM,OAAO,GAAG,wBAAU,EAAE,CAAC;AAE7B,IAAI,WAAoD,CAAC;AAOlD,KAAK,UAAU,cAAc,CAClC,MAAsB,EACtB,QAAkB,EAClB,UAAmB;IAEnB,IAAI,CAAC,WAAW,EAAE;QAChB,WAAW,GAAG,EAAE,CAAC;QACjB,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;YACzB,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC;QACzC,CAAC,CAAC,CAAC;KACJ;IACD,IAAI,MAAM,GAAwB,EAAE,CAAC;IACrC,IAAI,QAAQ,GAAwB,EAAE,CAAC;IAEvC,SAAS,qBAAqB,CAAC,MAAc;QAC3C,MAAM,iBAAiB,GAAG;YACxB,UAAU,EAAE,uHAAuH;YACnI,aAAa,EAAE,uGAAuG;YACtH,OAAO,EAAE,yIAAyI;SACnJ,CAAC;QACF,OAAO,iBAAiB,CAAC,MAAM,CAAC,CAAC;IACnC,CAAC;IAED,SAAS,SAAS,CAAC,GAAW;QAC5B,MAAM,YAAY,GAAG;YACnB,SAAS;YACT,SAAS;YACT,UAAU;YACV,aAAa;YACb,WAAW;YACX,YAAY;YACZ,yBAAyB;YACzB,oBAAoB;YACpB,eAAe;YACf,QAAQ;SACT,CAAC;QACF,OAAO,YAAY,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;IACpC,CAAC;IAED,SAAS,mBAAmB,CAAC,GAAW,EAAE,GAAW;QACnD,IAAI,GAAG,KAAK,SAAS,EAAE;YACrB,KAAK,MAAM,KAAK,IAAI,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE;gBACtC,IAAI,CAAC,YAAE,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE;oBACxB,OAAO,KAAK,CAAC;iBACd;aACF;SACF;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAED,KAAK,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;QAC/C,MAAM,WAAW,GAAG,UAAU,CAAC,CAAC,CAAC,GAAG,UAAU,IAAI,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC;QAC9D,IACE,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,uCAAuC;YAC1D,CAAE,YAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,uBAAuB;UAClD;YACA,IAAI,qBAAqB,CAAC,GAAG,CAAC,EAAE;gBAC9B,QAAQ,CAAC,IAAI,CAAC;oBACZ,OAAO,EAAE,qBAAqB;oBAC9B,OAAO,EAAE,qBAAqB,CAAC,GAAG,CAAC;iBACpC,CAAC,CAAC;aACJ;YACD,MAAM,YAAY,GAAG;gBACnB,YAAY;gBACZ,YAAY;gBACZ,eAAe;gBACf,SAAS;gBACT,qBAAqB;aACtB,CAAC;YACF,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,YAAY,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,IAAI,GAAG,EAAE;gBACnE,IAAI;oBACF,IAAI,GAAG,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,MAAM,CAAC,CAAC;oBACnD,GAAG,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;oBACpC,QAAQ,CAAC,OAAO,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;iBAC/B;gBAAC,OAAO,GAAG,EAAE;oBACZ,MAAM,CAAC,IAAI,CAAC;wBACV,OAAO,EAAE,qBAAqB;wBAC9B,OAAO,EAAE,oCAAoC,WAAW,EAAE;qBAC3D,CAAC,CAAC;iBACJ;aACF;YACD,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE;gBACrB,MAAM,CAAC,IAAI,CAAC;oBACV,OAAO,EAAE,qBAAqB;oBAC9B,OAAO,EAAE,iCAAiC,WAAW,EAAE;iBACxD,CAAC,CAAC;aACJ;iBAAM,IAAI,GAAG,KAAK,UAAU,EAAE;gBAC7B,MAAM,CAAC,aAAa,EAAE,YAAY,CAAC,GAAG,2BAAgB,CAAC,GAAe,CAAC,CAAC;gBACxE,IAAI,CAAC,aAAa,EAAE;oBAClB,MAAM,CAAC,IAAI,CAAC;wBACV,OAAO,EAAE,qBAAqB;wBAC9B,OAAO,EAAE,WAAW,WAAW,OAAO,YAAY,IAAI;qBACvD,CAAC,CAAC;iBACJ;aACF;iBAAM,IACL,GAAG,KAAK,iBAAiB;gBACzB,YAAE,CAAC,MAAM,CAAC,GAAG,CAAC;gBACd,GAAG,CAAC,MAAM,GAAG,CAAC;gBACd,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC;gBACnB,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,EACjB;gBACA,IAAI;oBACF,aAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;iBACzB;gBAAC,OAAO,GAAG,EAAE;oBACZ,MAAM,CAAC,IAAI,CAAC;wBACV,OAAO,EAAE,qBAAqB;wBAC9B,OAAO,EAAE,sBAAsB,WAAW,OAAO,GAAG,IAAI;qBACzD,CAAC,CAAC;iBACJ;aACF;iBAAM,IACL,GAAG,KAAK,iBAAiB;gBACzB,YAAE,CAAC,MAAM,CAAC,GAAG,CAAC;gBACd,GAAG,CAAC,MAAM,GAAG,CAAC;gBACd,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC;gBACpB,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,EACjB;gBACA,IAAI;oBACF,aAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;iBACzB;gBAAC,OAAO,GAAG,EAAE;oBACZ,MAAM,CAAC,IAAI,CAAC;wBACV,OAAO,EAAE,qBAAqB;wBAC9B,OAAO,EAAE,sBAAsB,WAAW,OAAO,GAAG,IAAI;qBACzD,CAAC,CAAC;iBACJ;aACF;iBAAM,IAAI,GAAG,KAAK,UAAU,IAAI,GAAG,KAAK,IAAI,EAAE;gBAC7C,MAAM,CAAC,aAAa,EAAE,YAAY,CAAC,GAAG,2BAAgB,CAAC,GAAa,CAAC,CAAC;gBACtE,IAAI,CAAC,aAAa,EAAE;oBAClB,MAAM,CAAC,IAAI,CAAC;wBACV,OAAO,EAAE,qBAAqB;wBAC9B,OAAO,EAAE,GAAG,WAAW,KAAK,YAAY,EAAE;qBAC3C,CAAC,CAAC;iBACJ;aACF;iBAAM,IAAI,GAAG,IAAI,IAAI,EAAE;gBACtB,MAAM,IAAI,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC;gBAC9B,IAAI,IAAI,KAAK,SAAS,EAAE;oBACtB,IAAI,GAAG,KAAK,IAAI,IAAI,GAAG,KAAK,KAAK,EAAE;wBACjC,MAAM,CAAC,IAAI,CAAC;4BACV,OAAO,EAAE,qBAAqB;4BAC9B,OAAO,EAAE,0BAA0B,WAAW,gCAAgC,IAAI,CAAC,SAAS,CAC1F,GAAG,CACJ,KAAK,OAAO,GAAG,GAAG;yBACpB,CAAC,CAAC;qBACJ;iBACF;qBAAM,IAAI,IAAI,KAAK,OAAO,IAAI,GAAG,EAAE;oBAClC,IAAI,CAAC,YAAE,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;wBAClB,MAAM,CAAC,IAAI,CAAC;4BACV,OAAO,EAAE,qBAAqB;4BAC9B,OAAO,EAAE,0BAA0B,WAAW,6BAA6B;yBAC5E,CAAC,CAAC;qBACJ;yBAAM;wBACL,KAAK,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,IAAI,GAAG,CAAC,OAAO,EAAE,EAAE;4BAC9C,IAAI,YAAE,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE;gCACrB,MAAM,aAAa,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,cAAc,CACvD,MAAM,EACN,QAAQ,EACR,GAAG,WAAW,IAAI,QAAQ,GAAG,CAC9B,CAAC;gCACF,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;gCACnD,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;6BAC9C;yBACF;wBACD,IAAI,GAAG,KAAK,SAAS,EAAE;4BACrB,MAAM,IAAI,GAAG,qBAAqB,CAAC;4BACnC,KAAK,MAAM,MAAM,IAAI,GAAG,EAAE;gCACxB,IAAI,YAAE,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;oCAC1C,MAAM,CAAC,EAAE,QAAQ,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;oCACvC,MAAM,CAAC,aAAa,EAAE,YAAY,CAAC,GAAG,2BAAgB,CACpD,QAAQ,CACT,CAAC;oCACF,IAAI,CAAC,aAAa,EAAE;wCAClB,MAAM,CAAC,IAAI,CAAC;4CACV,OAAO,EAAE,qBAAqB;4CAC9B,OAAO,EAAE,GAAG,WAAW,KAAK,YAAY,EAAE;yCAC3C,CAAC,CAAC;qCACJ;iCACF;6BACF;yBACF;wBAED,MAAM,SAAS,GAAG;4BAChB,OAAO;4BACP,WAAW;4BACX,gBAAgB;4BAChB,UAAU;4BACV,aAAa;4BACb,aAAa;4BACb,cAAc;4BACd,iBAAiB;4BACjB,qBAAqB;4BACrB,wBAAwB;4BACxB,mBAAmB;4BACnB,aAAa;4BACb,qBAAqB;yBACtB,CAAC;wBACF,IAAI,GAAG,KAAK,cAAc,EAAE;4BAC1B,KAAK,MAAM,WAAW,IAAI,GAAG,EAAE;gCAC7B,IAAI,WAAW,GAAG,KAAK,CAAC;gCACxB,IAAI,YAAE,CAAC,MAAM,CAAC,WAAW,CAAC,EAAE;oCAC1B,MAAM,YAAY,GAAG,MAAM,8BAAoB,CAC7C,WAA6B,EAC7B,MAAM,CACP,CAAC;oCACF,MAAM,CAAC,IAAI,CACT,GAAG,gBAAgB,CAAC,KAAK,CAAC,EAAE,YAAY,EAAE,WAAW,EAAE,CAAC,CACzD,CAAC;oCACF,KAAK,MAAM,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE;wCAC5C,IAAI,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;4CAC5B,WAAW,GAAG,IAAI,CAAC;yCACpB;qCACF;oCACD,IAAI,CAAC,WAAW,EAAE;wCAChB,MAAM,OAAO,GAAG,GAAG,WAAW,0DAA0D,SAAS,CAAC,IAAI,CACpG,IAAI,CACL,yHAAyH,CAAC;wCAC3H,MAAM,CAAC,IAAI,CAAC;4CACV,OAAO,EAAE,qBAAqB;4CAC9B,OAAO;yCACR,CAAC,CAAC;qCACJ;iCACF;qCAAM;oCACL,MAAM,CAAC,IAAI,CAAC;wCACV,OAAO,EAAE,qBAAqB;wCAC9B,OAAO,EAAE,GAAG,WAAW,4BAA4B;qCACpD,CAAC,CAAC;iCACJ;6BACF;yBACF;wBACD,IAAI,GAAG,KAAK,eAAe,EAAE;4BAC3B,MAAM,WAAW,GAAG;gCAClB,WAAW;gCACX,cAAc;gCACd,iBAAiB;gCACjB,oBAAoB;gCACpB,oBAAoB;gCACpB,oBAAoB;6BACrB,CAAC;4BACF,kBAAkB;4BAClB,KAAK,MAAM,YAAY,IAAI,GAAY,EAAE;gCACvC,IACE,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,IAAI,CAC5B,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,CAChC,EACD;oCACA,MAAM,cAAc,GAAG,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,MAAM,CACrD,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,CAChC,CAAC;oCACF,MAAM,CAAC,IAAI,CAAC;wCACV,OAAO,EAAE,qBAAqB;wCAC9B,OAAO,EAAE,6CAA6C,cAAc,CAAC,IAAI,CACvE,IAAI,CACL,EAAE;qCACJ,CAAC,CAAC;iCACJ;qCAAM,IACL,CAAC,YAAY,CAAC,YAAY;oCAC1B,YAAY,CAAC,YAAY,CAAC,MAAM,KAAK,CAAC,EACtC;oCACA,MAAM,CAAC,IAAI,CAAC;wCACV,OAAO,EAAE,qBAAqB;wCAC9B,OAAO,EAAE,iBAAiB,WAAW,kDAAkD;qCACxF,CAAC,CAAC;iCACJ;qCAAM;oCACL,IAAI,UAAU,GAAG,KAAK,CAAC;oCACvB,KAAK,MAAM,WAAW,IAAI,YAAY,CAAC,YAAY,EAAE;wCACnD,IAAI;4CACF,aAAK,CAAC,WAAW,CAAC,CAAC;4CACnB,UAAU,GAAG,IAAI,CAAC;yCACnB;wCAAC,OAAO,CAAC,EAAE;4CACV,MAAM,CAAC,IAAI,CAAC;gDACV,OAAO,EAAE,qBAAqB;gDAC9B,OAAO,EAAE,sBAAsB,WAAW,OAAO,WAAW,IAAI;6CACjE,CAAC,CAAC;yCACJ;qCACF;oCACD,IAAI,UAAU,EAAE;wCACd,MAAM,eAAe,GAAG;4CACtB,SAAS;4CACT,cAAc;4CACd,YAAY;yCACb,CAAC;wCACF,KAAK,MAAM,KAAK,IAAI,eAAe,EAAE;4CACnC,IACE,CAAC,YAAY,CAAC,GAAG,KAAK,UAAU,CAAC;gDACjC,CAAC,YAAY,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,EAAE,CAC9C,WAAW,CAAC,QAAQ,CAAC,MAAM,KAAK,GAAG,CAAC,CACrC,EACD;gDACA,MAAM,CAAC,IAAI,CAAC;oDACV,OAAO,EAAE,qBAAqB;oDAC9B,OAAO,EAAE,+BAA+B,KAAK,+CAA+C,KAAK,EAAE;iDACpG,CAAC,CAAC;6CACJ;yCACF;qCACF;iCACF;6BACF;yBACF;wBACD,IAAI,GAAG,KAAK,iBAAiB,IAAI,GAAG,KAAK,wBAAwB,EAAE;4BACjE,KAAK,MAAM,OAAO,IAAI,GAAe,EAAE;gCACrC,IAAI,OAAO,KAAK,GAAG,EAAE;oCACnB,IAAI;wCACF,aAAK,CAAC,OAAO,CAAC,CAAC;qCAChB;oCAAC,OAAO,CAAC,EAAE;wCACV,MAAM,CAAC,IAAI,CAAC;4CACV,OAAO,EAAE,qBAAqB;4CAC9B,OAAO,EAAE,sBAAsB,WAAW,OAAO,OAAO,IAAI;yCAC7D,CAAC,CAAC;qCACJ;iCACF;6BACF;yBACF;wBACD,IAAI,GAAG,KAAK,WAAW,EAAE;4BACvB,KAAK,MAAM,SAAS,IAAI,GAAe,EAAE;gCACvC,IAAI;oCACF,aAAK,CAAC,SAAS,CAAC,CAAC;iCAClB;gCAAC,OAAO,CAAC,EAAE;oCACV,MAAM,CAAC,IAAI,CAAC;wCACV,OAAO,EAAE,qBAAqB;wCAC9B,OAAO,EAAE,sBAAsB,WAAW,OAAO,SAAS,IAAI;qCAC/D,CAAC,CAAC;iCACJ;6BACF;yBACF;wBACD,IACE,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,GAAG,KAAK,qBAAqB,CAAC;4BAC1D,CAAC,kBAAkB,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,uBAAuB;4BAC/D,CAAC,UAAU,IAAI,CAAC,QAAQ,CAAC,CAAC,wBAAwB;0BAClD;4BACA,MAAM,CAAC,IAAI,CAAC;gCACV,OAAO,EAAE,qBAAqB;gCAC9B,OAAO,EAAE,GAAG,WAAW,KAAK,GAAG,0CAA0C;6BAC1E,CAAC,CAAC;yBACJ;qBACF;iBACF;qBAAM,IAAI,IAAI,KAAK,QAAQ,EAAE;oBAC5B,IAAI,CAAC,YAAE,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE;wBACnB,MAAM,CAAC,IAAI,CAAC;4BACV,OAAO,EAAE,qBAAqB;4BAC9B,OAAO,EAAE,0BAA0B,WAAW,uBAAuB;yBACtE,CAAC,CAAC;qBACJ;iBACF;qBAAM,IAAI,IAAI,KAAK,QAAQ,IAAI,WAAW,KAAK,eAAe,EAAE;oBAC/D,IAAI,YAAE,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE;wBAClB,IAAI,GAAG,KAAK,SAAS,EAAE;4BACrB,IAAI,CAAC,mBAAmB,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE;gCAClC,MAAM,CAAC,IAAI,CAAC;oCACV,OAAO,EAAE,qBAAqB;oCAC9B,OAAO,EAAE,oCAAoC;iCAC9C,CAAC,CAAC;6BACJ;yBACF;6BAAM;4BACL,MAAM,cAAc,GAAG,OAAO;iCAC3B,MAAM,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,UAAU,CAAC;iCACrC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;4BAChC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;gCACjC,MAAM,aAAa,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,cAAc,CACvD,GAAG,EACH,QAAQ,EACR,WAAW,CACZ,CAAC;gCACF,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;gCACnD,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;6BAC9C;yBACF;qBACF;yBAAM;wBACL,MAAM,CAAC,IAAI,CAAC;4BACV,OAAO,EAAE,qBAAqB;4BAC9B,OAAO,EAAE,0BAA0B,WAAW,4BAA4B;yBAC3E,CAAC,CAAC;qBACJ;iBACF;aACF;SACF;KACF;IACD,SAAS,OAAO,CAAC,CAAoB,EAAE,CAAoB;QACzD,+CAA+C;QAC/C,IAAI,CAAC,CAAC,OAAO,KAAK,CAAC,CAAC,OAAO,EAAE;YAC3B,OAAO,CAAC,CAAC,OAAO,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SACvC;QACD,+CAA+C;QAC/C,OAAO,CAAC,CAAC,OAAO,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACxC,CAAC;IACD,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACrB,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACvB,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAC;AAC9B,CAAC;AAhYD,wCAgYC","sourcesContent":["import is from '@sindresorhus/is';\nimport { regEx } from '../util/regex';\nimport * as template from '../util/template';\nimport { hasValidSchedule, hasValidTimezone } from '../workers/branch/schedule';\nimport { RenovateConfig, ValidationMessage } from './common';\nimport { RenovateOptions, getOptions } from './definitions';\nimport { resolveConfigPresets } from './presets';\nimport * as managerValidator from './validation-helpers/managers';\n\nconst options = getOptions();\n\nlet optionTypes: Record<string, RenovateOptions['type']>;\n\nexport interface ValidationResult {\n  errors: ValidationMessage[];\n  warnings: ValidationMessage[];\n}\n\nexport async function validateConfig(\n  config: RenovateConfig,\n  isPreset?: boolean,\n  parentPath?: string\n): Promise<ValidationResult> {\n  if (!optionTypes) {\n    optionTypes = {};\n    options.forEach((option) => {\n      optionTypes[option.name] = option.type;\n    });\n  }\n  let errors: ValidationMessage[] = [];\n  let warnings: ValidationMessage[] = [];\n\n  function getDeprecationMessage(option: string): string {\n    const deprecatedOptions = {\n      branchName: `Direct editing of branchName is now deprecated. Please edit branchPrefix, managerBranchPrefix, or branchTopic instead`,\n      commitMessage: `Direct editing of commitMessage is now deprecated. Please edit commitMessage's subcomponents instead.`,\n      prTitle: `Direct editing of prTitle is now deprecated. Please edit commitMessage subcomponents instead as they will be passed through to prTitle.`,\n    };\n    return deprecatedOptions[option];\n  }\n\n  function isIgnored(key: string): boolean {\n    const ignoredNodes = [\n      '$schema',\n      'depType',\n      'npmToken',\n      'packageFile',\n      'forkToken',\n      'repository',\n      'vulnerabilityAlertsOnly',\n      'vulnerabilityAlert',\n      'copyLocalLibs', // deprecated - functionality is now enabled by default\n      'prBody', // deprecated\n    ];\n    return ignoredNodes.includes(key);\n  }\n\n  function validateAliasObject(key: string, val: object): boolean {\n    if (key === 'aliases') {\n      for (const value of Object.values(val)) {\n        if (!is.urlString(value)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  for (const [key, val] of Object.entries(config)) {\n    const currentPath = parentPath ? `${parentPath}.${key}` : key;\n    if (\n      !isIgnored(key) && // We need to ignore some reserved keys\n      !(is as any).function(val) // Ignore all functions\n    ) {\n      if (getDeprecationMessage(key)) {\n        warnings.push({\n          depName: 'Deprecation Warning',\n          message: getDeprecationMessage(key),\n        });\n      }\n      const templateKeys = [\n        'branchName',\n        'commitBody',\n        'commitMessage',\n        'prTitle',\n        'semanticCommitScope',\n      ];\n      if ((key.endsWith('Template') || templateKeys.includes(key)) && val) {\n        try {\n          let res = template.compile(val.toString(), config);\n          res = template.compile(res, config);\n          template.compile(res, config);\n        } catch (err) {\n          errors.push({\n            depName: 'Configuration Error',\n            message: `Invalid template in config path: ${currentPath}`,\n          });\n        }\n      }\n      if (!optionTypes[key]) {\n        errors.push({\n          depName: 'Configuration Error',\n          message: `Invalid configuration option: ${currentPath}`,\n        });\n      } else if (key === 'schedule') {\n        const [validSchedule, errorMessage] = hasValidSchedule(val as string[]);\n        if (!validSchedule) {\n          errors.push({\n            depName: 'Configuration Error',\n            message: `Invalid ${currentPath}: \\`${errorMessage}\\``,\n          });\n        }\n      } else if (\n        key === 'allowedVersions' &&\n        is.string(val) &&\n        val.length > 1 &&\n        val.startsWith('/') &&\n        val.endsWith('/')\n      ) {\n        try {\n          regEx(val.slice(1, -1));\n        } catch (err) {\n          errors.push({\n            depName: 'Configuration Error',\n            message: `Invalid regExp for ${currentPath}: \\`${val}\\``,\n          });\n        }\n      } else if (\n        key === 'allowedVersions' &&\n        is.string(val) &&\n        val.length > 2 &&\n        val.startsWith('!/') &&\n        val.endsWith('/')\n      ) {\n        try {\n          regEx(val.slice(2, -1));\n        } catch (err) {\n          errors.push({\n            depName: 'Configuration Error',\n            message: `Invalid regExp for ${currentPath}: \\`${val}\\``,\n          });\n        }\n      } else if (key === 'timezone' && val !== null) {\n        const [validTimezone, errorMessage] = hasValidTimezone(val as string);\n        if (!validTimezone) {\n          errors.push({\n            depName: 'Configuration Error',\n            message: `${currentPath}: ${errorMessage}`,\n          });\n        }\n      } else if (val != null) {\n        const type = optionTypes[key];\n        if (type === 'boolean') {\n          if (val !== true && val !== false) {\n            errors.push({\n              depName: 'Configuration Error',\n              message: `Configuration option \\`${currentPath}\\` should be boolean. Found: ${JSON.stringify(\n                val\n              )} (${typeof val})`,\n            });\n          }\n        } else if (type === 'array' && val) {\n          if (!is.array(val)) {\n            errors.push({\n              depName: 'Configuration Error',\n              message: `Configuration option \\`${currentPath}\\` should be a list (Array)`,\n            });\n          } else {\n            for (const [subIndex, subval] of val.entries()) {\n              if (is.object(subval)) {\n                const subValidation = await module.exports.validateConfig(\n                  subval,\n                  isPreset,\n                  `${currentPath}[${subIndex}]`\n                );\n                warnings = warnings.concat(subValidation.warnings);\n                errors = errors.concat(subValidation.errors);\n              }\n            }\n            if (key === 'extends') {\n              const tzRe = /^:timezone\\((.+)\\)$/;\n              for (const subval of val) {\n                if (is.string(subval) && tzRe.test(subval)) {\n                  const [, timezone] = tzRe.exec(subval);\n                  const [validTimezone, errorMessage] = hasValidTimezone(\n                    timezone\n                  );\n                  if (!validTimezone) {\n                    errors.push({\n                      depName: 'Configuration Error',\n                      message: `${currentPath}: ${errorMessage}`,\n                    });\n                  }\n                }\n              }\n            }\n\n            const selectors = [\n              'paths',\n              'languages',\n              'baseBranchList',\n              'managers',\n              'datasources',\n              'depTypeList',\n              'packageNames',\n              'packagePatterns',\n              'excludePackageNames',\n              'excludePackagePatterns',\n              'sourceUrlPrefixes',\n              'updateTypes',\n              'matchCurrentVersion',\n            ];\n            if (key === 'packageRules') {\n              for (const packageRule of val) {\n                let hasSelector = false;\n                if (is.object(packageRule)) {\n                  const resolvedRule = await resolveConfigPresets(\n                    packageRule as RenovateConfig,\n                    config\n                  );\n                  errors.push(\n                    ...managerValidator.check({ resolvedRule, currentPath })\n                  );\n                  for (const pKey of Object.keys(resolvedRule)) {\n                    if (selectors.includes(pKey)) {\n                      hasSelector = true;\n                    }\n                  }\n                  if (!hasSelector) {\n                    const message = `${currentPath}: Each packageRule must contain at least one selector (${selectors.join(\n                      ', '\n                    )}). If you wish for configuration to apply to all packages, it is not necessary to place it inside a packageRule at all.`;\n                    errors.push({\n                      depName: 'Configuration Error',\n                      message,\n                    });\n                  }\n                } else {\n                  errors.push({\n                    depName: 'Configuration Error',\n                    message: `${currentPath} must contain JSON objects`,\n                  });\n                }\n              }\n            }\n            if (key === 'regexManagers') {\n              const allowedKeys = [\n                'fileMatch',\n                'matchStrings',\n                'depNameTemplate',\n                'lookupNameTemplate',\n                'datasourceTemplate',\n                'versioningTemplate',\n              ];\n              // TODO: fix types\n              for (const regexManager of val as any[]) {\n                if (\n                  Object.keys(regexManager).some(\n                    (k) => !allowedKeys.includes(k)\n                  )\n                ) {\n                  const disallowedKeys = Object.keys(regexManager).filter(\n                    (k) => !allowedKeys.includes(k)\n                  );\n                  errors.push({\n                    depName: 'Configuration Error',\n                    message: `Regex Manager contains disallowed fields: ${disallowedKeys.join(\n                      ', '\n                    )}`,\n                  });\n                } else if (\n                  !regexManager.matchStrings ||\n                  regexManager.matchStrings.length !== 1\n                ) {\n                  errors.push({\n                    depName: 'Configuration Error',\n                    message: `Regex Manager ${currentPath} must contain a matchStrings array of length one`,\n                  });\n                } else {\n                  let validRegex = false;\n                  for (const matchString of regexManager.matchStrings) {\n                    try {\n                      regEx(matchString);\n                      validRegex = true;\n                    } catch (e) {\n                      errors.push({\n                        depName: 'Configuration Error',\n                        message: `Invalid regExp for ${currentPath}: \\`${matchString}\\``,\n                      });\n                    }\n                  }\n                  if (validRegex) {\n                    const mandatoryFields = [\n                      'depName',\n                      'currentValue',\n                      'datasource',\n                    ];\n                    for (const field of mandatoryFields) {\n                      if (\n                        !regexManager[`${field}Template`] &&\n                        !regexManager.matchStrings.some((matchString) =>\n                          matchString.includes(`(?<${field}>`)\n                        )\n                      ) {\n                        errors.push({\n                          depName: 'Configuration Error',\n                          message: `Regex Managers must contain ${field}Template configuration or regex group named ${field}`,\n                        });\n                      }\n                    }\n                  }\n                }\n              }\n            }\n            if (key === 'packagePatterns' || key === 'excludePackagePatterns') {\n              for (const pattern of val as string[]) {\n                if (pattern !== '*') {\n                  try {\n                    regEx(pattern);\n                  } catch (e) {\n                    errors.push({\n                      depName: 'Configuration Error',\n                      message: `Invalid regExp for ${currentPath}: \\`${pattern}\\``,\n                    });\n                  }\n                }\n              }\n            }\n            if (key === 'fileMatch') {\n              for (const fileMatch of val as string[]) {\n                try {\n                  regEx(fileMatch);\n                } catch (e) {\n                  errors.push({\n                    depName: 'Configuration Error',\n                    message: `Invalid regExp for ${currentPath}: \\`${fileMatch}\\``,\n                  });\n                }\n              }\n            }\n            if (\n              (selectors.includes(key) || key === 'matchCurrentVersion') &&\n              !/p.*Rules\\[\\d+\\]$/.test(parentPath) && // Inside a packageRule\n              (parentPath || !isPreset) // top level in a preset\n            ) {\n              errors.push({\n                depName: 'Configuration Error',\n                message: `${currentPath}: ${key} should be inside a \\`packageRule\\` only`,\n              });\n            }\n          }\n        } else if (type === 'string') {\n          if (!is.string(val)) {\n            errors.push({\n              depName: 'Configuration Error',\n              message: `Configuration option \\`${currentPath}\\` should be a string`,\n            });\n          }\n        } else if (type === 'object' && currentPath !== 'compatibility') {\n          if (is.object(val)) {\n            if (key === 'aliases') {\n              if (!validateAliasObject(key, val)) {\n                errors.push({\n                  depName: 'Configuration Error',\n                  message: `Invalid alias object configuration`,\n                });\n              }\n            } else {\n              const ignoredObjects = options\n                .filter((option) => option.freeChoice)\n                .map((option) => option.name);\n              if (!ignoredObjects.includes(key)) {\n                const subValidation = await module.exports.validateConfig(\n                  val,\n                  isPreset,\n                  currentPath\n                );\n                warnings = warnings.concat(subValidation.warnings);\n                errors = errors.concat(subValidation.errors);\n              }\n            }\n          } else {\n            errors.push({\n              depName: 'Configuration Error',\n              message: `Configuration option \\`${currentPath}\\` should be a json object`,\n            });\n          }\n        }\n      }\n    }\n  }\n  function sortAll(a: ValidationMessage, b: ValidationMessage): number {\n    // istanbul ignore else: currently never happen\n    if (a.depName === b.depName) {\n      return a.message > b.message ? 1 : -1;\n    }\n    // istanbul ignore next: currently never happen\n    return a.depName > b.depName ? 1 : -1;\n  }\n  errors.sort(sortAll);\n  warnings.sort(sortAll);\n  return { errors, warnings };\n}\n"]}