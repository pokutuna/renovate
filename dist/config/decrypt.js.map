{"version":3,"file":"decrypt.js","sourceRoot":"","sources":["../../lib/config/decrypt.ts"],"names":[],"mappings":"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","sourcesContent":["import crypto from 'crypto';\nimport is from '@sindresorhus/is';\nimport { logger } from '../logger';\nimport { maskToken } from '../util/mask';\nimport { add } from '../util/sanitize';\nimport { RenovateConfig } from './common';\n\nexport function decryptConfig(\n  config: RenovateConfig,\n  privateKey?: string | Buffer\n): RenovateConfig {\n  logger.trace({ config }, 'decryptConfig()');\n  const decryptedConfig = { ...config };\n  for (const [key, val] of Object.entries(config)) {\n    if (key === 'encrypted' && is.object(val)) {\n      logger.debug({ config: val }, 'Found encrypted config');\n      if (privateKey) {\n        for (const [eKey, eVal] of Object.entries(val)) {\n          try {\n            let decryptedStr: string;\n            try {\n              logger.debug('Trying default padding for ' + eKey);\n              decryptedStr = crypto\n                .privateDecrypt(privateKey, Buffer.from(eVal, 'base64'))\n                .toString();\n              logger.debug('Decrypted config using default padding');\n            } catch (err) {\n              logger.debug('Trying RSA_PKCS1_PADDING for ' + eKey);\n              decryptedStr = crypto\n                .privateDecrypt(\n                  {\n                    key: privateKey,\n                    padding: crypto.constants.RSA_PKCS1_PADDING,\n                  },\n                  Buffer.from(eVal, 'base64')\n                )\n                .toString();\n              // let it throw if the above fails\n            }\n            // istanbul ignore if\n            if (!decryptedStr.length) {\n              throw new Error('empty string');\n            }\n            logger.debug(`Decrypted ${eKey}`);\n            if (eKey === 'npmToken') {\n              const token = decryptedStr.replace(/\\n$/, '');\n              add(token);\n              logger.debug(\n                { decryptedToken: maskToken(token) },\n                'Migrating npmToken to npmrc'\n              );\n              if (decryptedConfig.npmrc) {\n                /* eslint-disable no-template-curly-in-string */\n                if (decryptedConfig.npmrc.includes('${NPM_TOKEN}')) {\n                  logger.debug('Replacing ${NPM_TOKEN} with decrypted token');\n                  decryptedConfig.npmrc = decryptedConfig.npmrc.replace(\n                    /\\${NPM_TOKEN}/g,\n                    token\n                  );\n                } else {\n                  logger.debug(\n                    'Appending _authToken= to end of existing npmrc'\n                  );\n                  decryptedConfig.npmrc = decryptedConfig.npmrc.replace(\n                    /\\n?$/,\n                    `\\n_authToken=${token}\\n`\n                  );\n                }\n                /* eslint-enable no-template-curly-in-string */\n              } else {\n                logger.debug('Adding npmrc to config');\n                decryptedConfig.npmrc = `//registry.npmjs.org/:_authToken=${token}\\n`;\n              }\n            } else {\n              decryptedConfig[eKey] = decryptedStr;\n              add(decryptedStr);\n            }\n          } catch (err) {\n            const error = new Error('config-validation');\n            error.validationError = `Failed to decrypt field ${eKey}. Please re-encrypt and try again.`;\n            throw error;\n          }\n        }\n      } else {\n        logger.error('Found encrypted data but no privateKey');\n      }\n      delete decryptedConfig.encrypted;\n    } else if (is.array(val)) {\n      decryptedConfig[key] = [];\n      val.forEach((item) => {\n        if (is.object(item) && !is.array(item)) {\n          (decryptedConfig[key] as RenovateConfig[]).push(\n            decryptConfig(item as RenovateConfig, privateKey)\n          );\n        } else {\n          (decryptedConfig[key] as unknown[]).push(item);\n        }\n      });\n    } else if (is.object(val) && key !== 'content') {\n      decryptedConfig[key] = decryptConfig(val as RenovateConfig, privateKey);\n    }\n  }\n  delete decryptedConfig.encrypted;\n  logger.trace({ config: decryptedConfig }, 'decryptedConfig');\n  return decryptedConfig;\n}\n"]}