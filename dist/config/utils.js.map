{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../lib/config/utils.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,sCAAmC;AACnC,yCAAsC;AAEtC,2DAA6C;AAE7C,SAAgB,gBAAgB,CAC9B,MAAS,EACT,KAAa;IAEb,eAAM,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,EAAE,kBAAkB,CAAC,CAAC;IACpD,IAAI,CAAC,KAAK,EAAE;QACV,OAAO,MAAe,CAAC;KACxB;IACD,MAAM,YAAY,GAAG,aAAK,CAAC,MAAM,CAAC,CAAC;IACnC,MAAM,WAAW,GAAG,aAAK,CAAC,KAAK,CAAC,CAAC;IACjC,MAAM,MAAM,GAAwB,EAAE,GAAG,YAAY,EAAE,GAAG,WAAW,EAAE,CAAC;IACxE,KAAK,MAAM,MAAM,IAAI,WAAW,CAAC,UAAU,EAAE,EAAE;QAC7C,IACE,MAAM,CAAC,SAAS;YAChB,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC;YACxB,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,EACzB;YACA,eAAM,CAAC,KAAK,CAAC,qBAAqB,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC;YACjD,IAAI,MAAM,CAAC,IAAI,KAAK,OAAO,EAAE;gBAC3B,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,GAAI,YAAY,CAAC,MAAM,CAAC,IAAI,CAAe,CAAC,MAAM,CACnE,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CACpB,CAAC;aACH;iBAAM;gBACL,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,gBAAgB,CACpC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAmB,EAC3C,WAAW,CAAC,MAAM,CAAC,IAAI,CAAmB,CAC3C,CAAC;aACH;YACD,eAAM,CAAC,KAAK,CACV,EAAE,MAAM,EAAE,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,EAC/B,iBAAiB,MAAM,CAAC,IAAI,EAAE,CAC/B,CAAC;SACH;KACF;IACD,OAAO,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC;AAC7C,CAAC;AAnCD,4CAmCC","sourcesContent":["import { logger } from '../logger';\nimport { clone } from '../util/clone';\nimport { RenovateConfig } from './common';\nimport * as definitions from './definitions';\n\nexport function mergeChildConfig<T, TChild>(\n  parent: T,\n  child: TChild\n): T & TChild {\n  logger.trace({ parent, child }, `mergeChildConfig`);\n  if (!child) {\n    return parent as never;\n  }\n  const parentConfig = clone(parent);\n  const childConfig = clone(child);\n  const config: Record<string, any> = { ...parentConfig, ...childConfig };\n  for (const option of definitions.getOptions()) {\n    if (\n      option.mergeable &&\n      childConfig[option.name] &&\n      parentConfig[option.name]\n    ) {\n      logger.trace(`mergeable option: ${option.name}`);\n      if (option.type === 'array') {\n        config[option.name] = (parentConfig[option.name] as unknown[]).concat(\n          config[option.name]\n        );\n      } else {\n        config[option.name] = mergeChildConfig(\n          parentConfig[option.name] as RenovateConfig,\n          childConfig[option.name] as RenovateConfig\n        );\n      }\n      logger.trace(\n        { result: config[option.name] },\n        `Merged config.${option.name}`\n      );\n    }\n  }\n  return Object.assign(config, config.force);\n}\n"]}