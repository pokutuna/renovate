{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/config/presets/index.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport {\n  CONFIG_VALIDATION,\n  PLATFORM_RATE_LIMIT_EXCEEDED,\n} from '../../constants/error-messages';\nimport { logger } from '../../logger';\nimport { ExternalHostError } from '../../types/errors/external-host-error';\nimport { regEx } from '../../util/regex';\nimport { RenovateConfig } from '../common';\nimport * as massage from '../massage';\nimport * as migration from '../migration';\nimport { mergeChildConfig } from '../utils';\nimport { PresetApi } from './common';\nimport * as github from './github';\nimport * as gitlab from './gitlab';\nimport * as internal from './internal';\nimport * as local from './local';\nimport * as npm from './npm';\n\nconst presetSources: Record<string, PresetApi> = {\n  github,\n  npm,\n  gitlab,\n  local,\n  internal,\n};\n\nexport function replaceArgs(\n  obj: string | string[] | Record<string, any> | Record<string, any>[],\n  argMapping: Record<string, any>\n): any {\n  if (is.string(obj)) {\n    let returnStr = obj;\n    for (const [arg, argVal] of Object.entries(argMapping)) {\n      const re = regEx(`{{${arg}}}`, 'g');\n      returnStr = returnStr.replace(re, argVal);\n    }\n    return returnStr;\n  }\n  if (is.array(obj)) {\n    const returnArray = [];\n    for (const item of obj) {\n      returnArray.push(replaceArgs(item, argMapping));\n    }\n    return returnArray;\n  }\n  if (is.object(obj)) {\n    const returnObj = {};\n    for (const [key, val] of Object.entries(obj)) {\n      returnObj[key] = replaceArgs(val, argMapping);\n    }\n    return returnObj;\n  }\n  return obj;\n}\n\nexport function parsePreset(input: string): ParsedPreset {\n  let str = input;\n  let presetSource: string;\n  let packageName: string;\n  let presetName: string;\n  let params: string[];\n  if (str.startsWith('github>')) {\n    presetSource = 'github';\n    str = str.substring('github>'.length);\n  } else if (str.startsWith('gitlab>')) {\n    presetSource = 'gitlab';\n    str = str.substring('gitlab>'.length);\n  } else if (str.startsWith('local>')) {\n    presetSource = 'local';\n    str = str.substring('local>'.length);\n  } else if (\n    !str.startsWith('@') &&\n    !str.startsWith(':') &&\n    str.includes('/')\n  ) {\n    presetSource = 'local';\n  }\n  str = str.replace(/^npm>/, '');\n  presetSource = presetSource || 'npm';\n  if (str.includes('(')) {\n    params = str\n      .slice(str.indexOf('(') + 1, -1)\n      .split(',')\n      .map((elem) => elem.trim());\n    str = str.slice(0, str.indexOf('('));\n  }\n  const presetsPackages = [\n    'config',\n    'default',\n    'docker',\n    'group',\n    'helpers',\n    'monorepo',\n    'packages',\n    'preview',\n    'schedule',\n  ];\n  if (\n    presetsPackages.some((presetPackage) => str.startsWith(`${presetPackage}:`))\n  ) {\n    presetSource = 'internal';\n    [packageName, presetName] = str.split(':');\n  } else if (str.startsWith(':')) {\n    // default namespace\n    presetSource = 'internal';\n    packageName = 'default';\n    presetName = str.slice(1);\n  } else if (str.startsWith('@')) {\n    // scoped namespace\n    [, packageName] = /(@.*?)(:|$)/.exec(str);\n    str = str.slice(packageName.length);\n    if (!packageName.includes('/')) {\n      packageName += '/renovate-config';\n    }\n    if (str === '') {\n      presetName = 'default';\n    } else {\n      presetName = str.slice(1);\n    }\n  } else {\n    // non-scoped namespace\n    [, packageName] = /(.*?)(:|$)/.exec(str);\n    presetName = str.slice(packageName.length + 1);\n    if (presetSource === 'npm' && !packageName.startsWith('renovate-config-')) {\n      packageName = `renovate-config-${packageName}`;\n    }\n    if (presetName === '') {\n      presetName = 'default';\n    }\n  }\n  return { presetSource, packageName, presetName, params };\n}\n\nexport async function getPreset(\n  preset: string,\n  baseConfig?: RenovateConfig\n): Promise<RenovateConfig> {\n  logger.trace(`getPreset(${preset})`);\n  const { presetSource, packageName, presetName, params } = parsePreset(preset);\n  let presetConfig = await presetSources[presetSource].getPreset({\n    packageName,\n    presetName,\n    baseConfig,\n  });\n  logger.trace({ presetConfig }, `Found preset ${preset}`);\n  if (params) {\n    const argMapping = {};\n    for (const [index, value] of params.entries()) {\n      argMapping[`arg${index}`] = value;\n    }\n    presetConfig = replaceArgs(presetConfig, argMapping);\n  }\n  logger.trace({ presetConfig }, `Applied params to preset ${preset}`);\n  const presetKeys = Object.keys(presetConfig);\n  // istanbul ignore if\n  if (\n    presetKeys.length === 2 &&\n    presetKeys.includes('description') &&\n    presetKeys.includes('extends')\n  ) {\n    // preset is just a collection of other presets\n    delete presetConfig.description;\n  }\n  const packageListKeys = [\n    'description',\n    'packageNames',\n    'excludePackageNames',\n    'packagePatterns',\n    'excludePackagePatterns',\n  ];\n  if (presetKeys.every((key) => packageListKeys.includes(key))) {\n    delete presetConfig.description;\n  }\n  const { migratedConfig } = migration.migrateConfig(presetConfig);\n  return massage.massageConfig(migratedConfig);\n}\n\nexport async function resolveConfigPresets(\n  inputConfig: RenovateConfig,\n  baseConfig?: RenovateConfig,\n  ignorePresets?: string[],\n  existingPresets: string[] = []\n): Promise<RenovateConfig> {\n  if (!ignorePresets || ignorePresets.length === 0) {\n    ignorePresets = inputConfig.ignorePresets || []; // eslint-disable-line\n  }\n  logger.trace(\n    { config: inputConfig, existingPresets },\n    'resolveConfigPresets'\n  );\n  let config: RenovateConfig = {};\n  // First, merge all the preset configs from left to right\n  if (inputConfig.extends?.length) {\n    for (const preset of inputConfig.extends) {\n      // istanbul ignore if\n      if (existingPresets.includes(preset)) {\n        logger.debug(`Already seen preset ${preset} in ${existingPresets}`);\n      } else if (ignorePresets.includes(preset)) {\n        // istanbul ignore next\n        logger.debug(`Ignoring preset ${preset} in ${existingPresets}`);\n      } else {\n        logger.trace(`Resolving preset \"${preset}\"`);\n        let fetchedPreset: RenovateConfig;\n        try {\n          fetchedPreset = await getPreset(preset, baseConfig);\n        } catch (err) {\n          logger.debug({ preset, err }, 'Preset fetch error');\n          // istanbul ignore if\n          if (err instanceof ExternalHostError) {\n            throw err;\n          }\n          // istanbul ignore if\n          if (err.message === PLATFORM_RATE_LIMIT_EXCEEDED) {\n            throw err;\n          }\n          const error = new Error(CONFIG_VALIDATION);\n          if (err.message === 'dep not found') {\n            error.validationError = `Cannot find preset's package (${preset})`;\n          } else if (err.message === 'preset renovate-config not found') {\n            error.validationError = `Preset package is missing a renovate-config entry (${preset})`;\n          } else if (err.message === 'preset not found') {\n            error.validationError = `Preset name not found within published preset config (${preset})`;\n          }\n          // istanbul ignore if\n          if (existingPresets.length) {\n            error.validationError +=\n              '. Note: this is a *nested* preset so please contact the preset author if you are unable to fix it yourself.';\n          }\n          logger.info(\n            { validationError: error.validationError },\n            'Throwing preset error'\n          );\n          throw error;\n        }\n        const presetConfig = await resolveConfigPresets(\n          fetchedPreset,\n          baseConfig,\n          ignorePresets,\n          existingPresets.concat([preset])\n        );\n        // istanbul ignore if\n        if (inputConfig?.ignoreDeps?.length === 0) {\n          delete presetConfig.description;\n        }\n        config = mergeChildConfig(config, presetConfig);\n      }\n    }\n  }\n  logger.trace({ config }, `Post-preset resolve config`);\n  // Now assign \"regular\" config on top\n  config = mergeChildConfig(config, inputConfig);\n  delete config.extends;\n  delete config.ignorePresets;\n  logger.trace({ config }, `Post-merge resolve config`);\n  for (const [key, val] of Object.entries(config)) {\n    const ignoredKeys = ['content', 'onboardingConfig'];\n    if (is.array(val)) {\n      // Resolve nested objects inside arrays\n      config[key] = [];\n      for (const element of val) {\n        if (is.object(element)) {\n          (config[key] as RenovateConfig[]).push(\n            await resolveConfigPresets(\n              element as RenovateConfig,\n              baseConfig,\n              ignorePresets,\n              existingPresets\n            )\n          );\n        } else {\n          (config[key] as unknown[]).push(element);\n        }\n      }\n    } else if (is.object(val) && !ignoredKeys.includes(key)) {\n      // Resolve nested objects\n      logger.trace(`Resolving object \"${key}\"`);\n      config[key] = await resolveConfigPresets(\n        val as RenovateConfig,\n        baseConfig,\n        ignorePresets,\n        existingPresets\n      );\n    }\n  }\n  logger.trace({ config: inputConfig }, 'Input config');\n  logger.trace({ config }, 'Resolved config');\n  return config;\n}\n\nexport interface ParsedPreset {\n  presetSource: string;\n  packageName: string;\n  presetName: string;\n  params?: string[];\n}\n"]}