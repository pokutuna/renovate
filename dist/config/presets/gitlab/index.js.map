{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/config/presets/gitlab/index.ts"],"names":[],"mappings":";;;AAAA,4CAAyC;AACzC,mFAA8E;AAE9E,sDAAuD;AAEvD,kCAA4D;AAE5D,MAAM,SAAS,GAAG,IAAI,mBAAU,EAAE,CAAC;AACtB,QAAA,QAAQ,GAAG,4BAA4B,CAAC;AAErD,KAAK,UAAU,oBAAoB,CACjC,iBAAyB,EACzB,QAAgB;IAEhB,MAAM,WAAW,GAAG,GAAG,QAAQ,YAAY,iBAAiB,sBAAsB,CAAC;IAEnF,MAAM,GAAG,GAAG,MAAM,SAAS,CAAC,OAAO,CAAiB,WAAW,CAAC,CAAC;IACjE,MAAM,QAAQ,GAAG,GAAG,CAAC,IAAI,CAAC;IAC1B,IAAI,iBAAiB,GAAG,QAAQ,CAAC;IACjC,KAAK,MAAM,MAAM,IAAI,QAAQ,EAAE;QAC7B,IAAI,MAAM,CAAC,OAAO,EAAE;YAClB,iBAAiB,GAAG,MAAM,CAAC,IAAI,CAAC;YAChC,MAAM;SACP;KACF;IAED,OAAO,iBAAiB,CAAC;AAC3B,CAAC;AAEM,KAAK,UAAU,aAAa,CACjC,IAAY,EACZ,QAAgB,EAChB,QAAgB;IAEhB,IAAI;QACF,MAAM,cAAc,GAAG,kBAAkB,CAAC,IAAI,CAAC,CAAC;QAChD,MAAM,iBAAiB,GAAG,kBAAkB,CAAC,QAAQ,CAAC,CAAC;QACvD,MAAM,iBAAiB,GAAG,MAAM,oBAAoB,CAClD,cAAc,EACd,QAAQ,CACT,CAAC;QACF,MAAM,GAAG,GAAG,GAAG,QAAQ,YAAY,cAAc,qBAAqB,iBAAiB,YAAY,iBAAiB,EAAE,CAAC;QACvH,OAAO,CAAC,MAAM,SAAS,CAAC,OAAO,CAAS,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC;KACpD;IAAC,OAAO,GAAG,EAAE;QACZ,IAAI,GAAG,YAAY,uCAAiB,EAAE;YACpC,MAAM,GAAG,CAAC;SACX;QACD,eAAM,CAAC,KAAK,CACV,EAAE,UAAU,EAAE,GAAG,CAAC,UAAU,EAAE,EAC9B,sBAAsB,QAAQ,YAAY,CAC3C,CAAC;QACF,MAAM,IAAI,KAAK,CAAC,2BAAoB,CAAC,CAAC;KACvC;AACH,CAAC;AAxBD,sCAwBC;AAED,SAAgB,qBAAqB,CACnC,OAAe,EACf,UAAkB,EAClB,QAAQ,GAAG,gBAAQ;IAEnB,OAAO,kBAAW,CAAC;QACjB,OAAO;QACP,UAAU,EAAE,UAAU;QACtB,QAAQ;QACR,KAAK,EAAE,aAAa;KACrB,CAAC,CAAC;AACL,CAAC;AAXD,sDAWC;AAED,SAAgB,SAAS,CAAC,EACxB,WAAW,EAAE,OAAO,EACpB,UAAU,GAAG,SAAS,GACT;IACb,OAAO,qBAAqB,CAAC,OAAO,EAAE,UAAU,EAAE,gBAAQ,CAAC,CAAC;AAC9D,CAAC;AALD,8BAKC","sourcesContent":["import { logger } from '../../../logger';\nimport { ExternalHostError } from '../../../types/errors/external-host-error';\nimport type { GitLabBranch } from '../../../types/platform/gitlab';\nimport { GitlabHttp } from '../../../util/http/gitlab';\nimport { Preset, PresetConfig } from '../common';\nimport { PRESET_DEP_NOT_FOUND, fetchPreset } from '../util';\n\nconst gitlabApi = new GitlabHttp();\nexport const Endpoint = 'https://gitlab.com/api/v4/';\n\nasync function getDefaultBranchName(\n  urlEncodedPkgName: string,\n  endpoint: string\n): Promise<string> {\n  const branchesUrl = `${endpoint}projects/${urlEncodedPkgName}/repository/branches`;\n\n  const res = await gitlabApi.getJson<GitLabBranch[]>(branchesUrl);\n  const branches = res.body;\n  let defautlBranchName = 'master';\n  for (const branch of branches) {\n    if (branch.default) {\n      defautlBranchName = branch.name;\n      break;\n    }\n  }\n\n  return defautlBranchName;\n}\n\nexport async function fetchJSONFile(\n  repo: string,\n  fileName: string,\n  endpoint: string\n): Promise<Preset> {\n  try {\n    const urlEncodedRepo = encodeURIComponent(repo);\n    const urlEncodedPkgName = encodeURIComponent(fileName);\n    const defautlBranchName = await getDefaultBranchName(\n      urlEncodedRepo,\n      endpoint\n    );\n    const url = `${endpoint}projects/${urlEncodedRepo}/repository/files/${urlEncodedPkgName}/raw?ref=${defautlBranchName}`;\n    return (await gitlabApi.getJson<Preset>(url)).body;\n  } catch (err) {\n    if (err instanceof ExternalHostError) {\n      throw err;\n    }\n    logger.debug(\n      { statusCode: err.statusCode },\n      `Failed to retrieve ${fileName} from repo`\n    );\n    throw new Error(PRESET_DEP_NOT_FOUND);\n  }\n}\n\nexport function getPresetFromEndpoint(\n  pkgName: string,\n  presetName: string,\n  endpoint = Endpoint\n): Promise<Preset> {\n  return fetchPreset({\n    pkgName,\n    filePreset: presetName,\n    endpoint,\n    fetch: fetchJSONFile,\n  });\n}\n\nexport function getPreset({\n  packageName: pkgName,\n  presetName = 'default',\n}: PresetConfig): Promise<Preset> {\n  return getPresetFromEndpoint(pkgName, presetName, Endpoint);\n}\n"]}