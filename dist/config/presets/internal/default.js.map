{"version":3,"file":"default.js","sourceRoot":"","sources":["../../../../lib/config/presets/internal/default.ts"],"names":[],"mappings":"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","sourcesContent":["import { Preset } from '../common';\n\nexport const presets: Record<string, Preset> = {\n  enableRenovate: {\n    description: 'Enable renovate',\n    enabled: true,\n  },\n  disableRenovate: {\n    description: 'Disable renovate',\n    enabled: false,\n  },\n  disableMajorUpdates: {\n    description: 'Disables major updates',\n    major: {\n      enabled: false,\n    },\n  },\n  disableDomain: {\n    description: 'Disable requests to a particular domain',\n    hostRules: [\n      {\n        domainName: '{{arg0}}',\n        enabled: false,\n      },\n    ],\n  },\n  disableHost: {\n    description: 'Disable requests to a particular hostName',\n    hostRules: [\n      {\n        hostName: '{{arg0}}',\n        enabled: false,\n      },\n    ],\n  },\n  ignoreModulesAndTests: {\n    description:\n      'Ignore `node_modules`, `bower_components`, `vendor` and various test/tests directories',\n    ignorePaths: [\n      '**/node_modules/**',\n      '**/bower_components/**',\n      '**/vendor/**',\n      '**/examples/**',\n      '**/__tests__/**',\n      '**/test/**',\n      '**/tests/**',\n      '**/__fixtures__/**',\n    ],\n  },\n  includeNodeModules: {\n    description:\n      'Include <code>package.json</code> files found within <code>node_modules</code> folders or <code>bower_components</code>.',\n    ignorePaths: [],\n  },\n  pinVersions: {\n    description:\n      'Use version pinning (maintain a single version only and not semver ranges)',\n    rangeStrategy: 'pin',\n  },\n  preserveSemverRanges: {\n    description:\n      'Preserve (but continue to upgrade) any existing semver ranges',\n    rangeStrategy: 'replace',\n  },\n  pinAllExceptPeerDependencies: {\n    description:\n      'Pin dependency versions for all except <code>peerDependencies</code>',\n    packageRules: [\n      {\n        packagePatterns: ['*'],\n        rangeStrategy: 'pin',\n      },\n      {\n        depTypeList: ['engines', 'peerDependencies'],\n        rangeStrategy: 'auto',\n      },\n    ],\n  },\n  pinDependencies: {\n    description: 'Pin dependency versions for <code>dependencies</code>',\n    packageRules: [\n      {\n        depTypeList: ['dependencies'],\n        rangeStrategy: 'pin',\n      },\n    ],\n  },\n  pinDevDependencies: {\n    description: 'Pin dependency versions for <code>devDependencies</code>',\n    packageRules: [\n      {\n        depTypeList: ['devDependencies'],\n        rangeStrategy: 'pin',\n      },\n    ],\n  },\n  pinOnlyDevDependencies: {\n    description:\n      'Pin dependency versions for <code>devDependencies</code> and retain semver ranges for others',\n    packageRules: [\n      {\n        packagePatterns: ['*'],\n        rangeStrategy: 'replace',\n      },\n      {\n        depTypeList: ['devDependencies'],\n        rangeStrategy: 'pin',\n      },\n      {\n        depTypeList: ['peerDependencies'],\n        rangeStrategy: 'widen',\n      },\n    ],\n  },\n  autodetectPinVersions: {\n    description: 'Autodetect whether to pin dependencies or maintain ranges',\n    rangeStrategy: 'auto',\n  },\n  separateMajorReleases: {\n    description:\n      'Separate major versions of dependencies into individual branches/PRs',\n    separateMajorMinor: true,\n  },\n  separateMultipleMajorReleases: {\n    description:\n      'Separate each available major versions of dependencies into individual branches/PRs',\n    separateMajorMinor: true,\n    separateMultipleMajor: true,\n  },\n  separatePatchReleases: {\n    description:\n      'Separate patch and minor releases of dependencies into separate PRs',\n    separateMinorPatch: true,\n  },\n  combinePatchMinorReleases: {\n    description:\n      'Do not separate patch and minor upgrades into separate PRs for the same dependency',\n    separateMinorPatch: false,\n  },\n  renovatePrefix: {\n    description: 'Use <code>renovate/</code> as prefix for all branch names',\n    branchPrefix: 'renovate/',\n  },\n  semanticCommitType: {\n    description:\n      'Use <code>{{arg0}}</code> as semantic commit type for commit messages and PR titles',\n    semanticCommitType: '{{arg0}}',\n  },\n  semanticPrefixChore: {\n    description:\n      'Use <code>chore</code> as semantic commit type for commit messages and PR titles',\n    extends: [':semanticCommitType(chore)'],\n  },\n  semanticPrefixFix: {\n    description:\n      'Use <code>fix</code> as semantic commit type for commit messages and PR titles',\n    extends: [':semanticCommitType(fix)'],\n  },\n  disablePeerDependencies: {\n    description:\n      'Do not renovate <code>peerDependencies</code> versions/ranges',\n    packageRules: [\n      {\n        depTypeList: ['peerDependencies'],\n        enabled: false,\n      },\n    ],\n  },\n  disableDevDependencies: {\n    description: 'Do not renovate <code>devDependencies</code> versions/ranges',\n    packageRules: [\n      {\n        depTypeList: ['devDependencies'],\n        enabled: false,\n      },\n    ],\n  },\n  disableDigestUpdates: {\n    description: 'Disable digest and git hash updates',\n    digest: {\n      enabled: false,\n    },\n  },\n  semanticPrefixFixDepsChoreOthers: {\n    description:\n      'If semantic commits detected, use semantic commit type <code>fix</code> for dependencies and <code>chore</code> for all others',\n    packageRules: [\n      {\n        packagePatterns: ['*'],\n        semanticCommitType: 'chore',\n      },\n      {\n        depTypeList: ['dependencies'],\n        semanticCommitType: 'fix',\n      },\n    ],\n  },\n  semanticCommitTypeAll: {\n    description:\n      'If semantic commits detected, use semantic commit type <code>{{arg0}}</code> for all',\n    packageRules: [\n      {\n        packagePatterns: ['*'],\n        semanticCommitType: '{{arg0}}',\n      },\n    ],\n  },\n  rebaseStalePrs: {\n    description:\n      'Rebase existing PRs any time the base branch has been updated',\n    rebaseWhen: 'behind-base-branch',\n  },\n  unpublishSafe: {\n    description:\n      'Set a status check to warn when upgrades <  24 hours old might get unpublished',\n    unpublishSafe: true,\n  },\n  unpublishSafeDisabled: {\n    description:\n      \"Create branches/PRs for dependency upgrades as soon as they're available\",\n    unpublishSafe: false,\n  },\n  prImmediately: {\n    description: 'Raise PRs immediately (after branch is created)',\n    prCreation: 'immediate',\n  },\n  prNotPending: {\n    description:\n      'Wait until branch tests have passed or failed before creating the PR',\n    prCreation: 'not-pending',\n  },\n  prHourlyLimitNone: {\n    description: 'Removes rate limit for PR creation per hour',\n    prHourlyLimit: 0,\n  },\n  prHourlyLimit1: {\n    description: 'Rate limit PR creation to a maximum of one per hour',\n    prHourlyLimit: 1,\n  },\n  prHourlyLimit2: {\n    description: 'Rate limit PR creation to a maximum of two per hour',\n    prHourlyLimit: 2,\n  },\n  prHourlyLimit4: {\n    description: 'Rate limit PR creation to a maximum of four per hour',\n    prHourlyLimit: 4,\n  },\n  prConcurrentLimitNone: {\n    description: 'Remove limit for open PRs',\n    prConcurrentLimit: 0,\n  },\n  prConcurrentLimit10: {\n    description: 'Limit to maximum 10 open PRs',\n    prConcurrentLimit: 10,\n  },\n  prConcurrentLimit20: {\n    description: 'Limit to maximum 20 open PRs at any time',\n    prConcurrentLimit: 20,\n  },\n  disableRateLimiting: {\n    description: 'Remove hourly and concurrent rate limits',\n    prConcurrentLimit: 0,\n    prHourlyLimit: 0,\n  },\n  automergeDisabled: {\n    description:\n      'Disable automerging feature - wait for humans to merge all PRs',\n    automerge: false,\n  },\n  automergeDigest: {\n    description: 'Automerge digest upgrades if they pass tests',\n    digest: {\n      automerge: true,\n    },\n  },\n  automergePatch: {\n    description: 'Automerge patch upgrades if they pass tests',\n    separateMinorPatch: true,\n    patch: {\n      automerge: true,\n    },\n    pin: {\n      automerge: true,\n    },\n    lockFileMaintenance: {\n      automerge: true,\n    },\n  },\n  automergeMinor: {\n    description: 'Automerge patch and minor upgrades if they pass tests',\n    minor: {\n      automerge: true,\n    },\n    patch: {\n      automerge: true,\n    },\n    pin: {\n      automerge: true,\n    },\n    lockFileMaintenance: {\n      automerge: true,\n    },\n  },\n  automergeMajor: {\n    description: 'Automerge all upgrades (including major) if they pass tests',\n    automerge: true,\n  },\n  automergeAll: {\n    description: 'Automerge all upgrades (including major) if they pass tests',\n    automerge: true,\n  },\n  automergeBranch: {\n    description:\n      'If automerging, push the new commit directly to base branch (no PR)',\n    automergeType: 'branch',\n  },\n  automergeBranchMergeCommit: {\n    description:\n      'If automerging, perform a merge-commit on branch (no PR) - deprecated, use :automergeBranch instead',\n    automergeType: 'branch-merge-commit',\n  },\n  automergeBranchPush: {\n    description:\n      'If automerging, push the new commit directly to base branch (no PR) - deprecated, use :automergeBranch instead',\n    automergeType: 'branch-push',\n  },\n  automergePr: {\n    description: 'Raise a PR first before any automerging',\n    automergeType: 'pr',\n  },\n  automergeRequireAllStatusChecks: {\n    description: 'Require all status checks to pass before any automerging',\n    requiredStatusChecks: [],\n  },\n  skipStatusChecks: {\n    description: 'Skip status checks and automerge right away',\n    requiredStatusChecks: null,\n  },\n  maintainLockFilesDisabled: {\n    description:\n      'Update existing lock files only when <code>package.json</code> is modified',\n    lockFileMaintenance: {\n      enabled: false,\n    },\n  },\n  pinDigestsDisabled: {\n    description: 'Disable pinning of docker dependency digests',\n    pinDigests: false,\n  },\n  maintainLockFilesWeekly: {\n    description: 'Run lock file maintenance (updates) early Monday mornings',\n    lockFileMaintenance: {\n      enabled: true,\n      extends: 'schedule:weekly',\n    },\n  },\n  maintainLockFilesMonthly: {\n    description:\n      'Run lock file maintenance (updates) on the first day of each month',\n    lockFileMaintenance: {\n      enabled: true,\n      extends: 'schedule:monthly',\n    },\n  },\n  ignoreUnstable: {\n    description:\n      'Upgrade to unstable versions only if the existing version is unstable',\n    ignoreUnstable: true,\n  },\n  respectLatest: {\n    description: 'Upgrade versions up to the \"latest\" tag in npm registry',\n    respectLatest: true,\n  },\n  updateNotScheduled: {\n    description: 'Keep existing branches updated even when not scheduled',\n    updateNotScheduled: true,\n  },\n  noUnscheduledUpdates: {\n    description: 'Make no updates to branches when not scheduled',\n    updateNotScheduled: false,\n  },\n  automergeLinters: {\n    description: 'Update lint packages automatically if tests pass',\n    packageRules: [\n      {\n        extends: ['packages:linters'],\n        automerge: true,\n      },\n    ],\n  },\n  automergeTesters: {\n    description: 'Update testing packages automatically if tests pass',\n    packageRules: [\n      {\n        extends: ['packages:test'],\n        automerge: true,\n      },\n    ],\n  },\n  automergeTypes: {\n    description: 'Update @types/* packages automatically if tests pass',\n    packageRules: [\n      {\n        packagePatterns: ['^@types/'],\n        automerge: true,\n      },\n    ],\n  },\n  doNotPinPackage: {\n    description: 'Disable version pinning for <code>{{arg0}}</code>',\n    packageRules: [\n      {\n        packageNames: ['{{arg0}}'],\n        rangeStrategy: 'replace',\n      },\n    ],\n  },\n  pinSkipCi: {\n    description: 'Add [skip ci] to commit message body whenever pinning',\n    pin: {\n      commitBody: '[skip ci]',\n    },\n  },\n  gitSignOff: {\n    description: 'Append git Signed-off-by signature to git commits.',\n    commitBody: 'Signed-off-by: {{{gitAuthor}}}',\n  },\n  npm: {\n    description: 'Keep package.json npm dependencies updated',\n    npm: {\n      enabled: true,\n    },\n  },\n  gomod: {\n    description: 'Enable Go modules support',\n    gomod: {\n      enabled: true,\n    },\n  },\n  onlyNpm: {\n    description: 'Renovate only npm dependencies',\n    docker: {\n      enabled: false,\n    },\n    meteor: {\n      enabled: false,\n    },\n  },\n  docker: {\n    description: 'Keep Dockerfile FROM sources updated',\n    docker: {\n      enabled: true,\n    },\n  },\n  meteor: {\n    description: 'Keep Meteor Npm.depends packages updated',\n    meteor: {\n      enabled: true,\n    },\n  },\n  group: {\n    description: 'Group {{arg1}} packages into same branch/PR',\n    packageRules: [\n      {\n        extends: ['{{arg0}}'],\n        groupName: '{{arg1}}',\n      },\n    ],\n  },\n  label: {\n    description: 'Apply label <code>{{arg0}}</code> to PRs',\n    labels: ['{{arg0}}'],\n  },\n  labels: {\n    description:\n      'Apply labels <code>{{arg0}}</code> and <code>{{arg1}}</code> to PRs',\n    labels: ['{{arg0}}', '{{arg1}}'],\n  },\n  assignee: {\n    description: 'Assign PRs to <code>{{arg0}}</code>',\n    assignees: ['{{arg0}}'],\n  },\n  reviewer: {\n    description: 'Add <code>{{arg0}}</code> as reviewer for PRs',\n    reviewers: ['{{arg0}}'],\n  },\n  assignAndReview: {\n    description: 'Set <code>{{arg0}}</code> as assignee and reviewer of PRs',\n    extends: [':assignee({{arg0}})', ':reviewer({{arg0}})'],\n  },\n  enableVulnerabilityAlerts: {\n    description: 'Raise PR when vulnerability alerts are detected',\n    vulnerabilityAlerts: {\n      enabled: true,\n    },\n  },\n  enableVulnerabilityAlertsWithLabel: {\n    description:\n      'Raise PR when vulnerability alerts are detected with label <code>{{arg0}}</code>',\n    vulnerabilityAlerts: {\n      enabled: true,\n      labels: ['{{arg0}}'],\n    },\n  },\n  disableVulnerabilityAlerts: {\n    description: 'Disable vulnerability alerts completely',\n    vulnerabilityAlerts: {\n      enabled: false,\n    },\n  },\n  semanticCommits: {\n    description: 'Use semantic prefixes for commit messages and PR titles',\n    semanticCommits: true,\n  },\n  semanticCommitsDisabled: {\n    description: 'Disable semantic prefixes for commit messages and PR titles',\n    semanticCommits: false,\n  },\n  disableLockFiles: {\n    description: 'Disable lock file updates',\n    updateLockFiles: false,\n  },\n  semanticCommitScope: {\n    description:\n      'Use semantic commit scope <code>{{arg0}}</code> for all commits and PR titles',\n    semanticCommitScope: '{{arg0}}',\n  },\n  semanticCommitScopeDisabled: {\n    description: 'Disable semantic commit scope for all commits and PR titles',\n    semanticCommitScope: null,\n  },\n  widenPeerDependencies: {\n    description:\n      'Always widen peerDependencies semver ranges when updating, instead of replacing',\n    packageRules: [\n      {\n        depTypeList: ['peerDependencies'],\n        rangeStrategy: 'widen',\n      },\n    ],\n  },\n  dependencyDashboard: {\n    description: 'Enable Renovate Dependency Dashboard creation',\n    dependencyDashboard: true,\n  },\n  dependencyDashboardApproval: {\n    description: 'Enable Renovate Dependency Dashboard approval workflow',\n    dependencyDashboardApproval: true,\n  },\n  timezone: {\n    description: 'Evaluate schedules according to timezone {{arg0}}',\n    timezone: '{{arg0}}',\n  },\n  pathSemanticCommitType: {\n    description:\n      'Use semanticCommitType {{arg0}} for all package files matching path {{arg1}}',\n    packageRules: [\n      {\n        paths: ['{{arg0}}'],\n        semanticCommitType: '{{arg1}}',\n      },\n    ],\n  },\n  followTag: {\n    description:\n      'For package <code>{{arg0}}</code>, strictly follow release tag <code>{{arg1}}</code>',\n    packageRules: [\n      {\n        packageNames: ['{{arg0}}'],\n        followTag: '{{arg1}}',\n      },\n    ],\n  },\n  githubComToken: {\n    description: 'Use provided token for github.com lookups',\n    hostRules: [\n      {\n        domainName: 'github.com',\n        encrypted: {\n          token: '{{arg0}}',\n        },\n      },\n    ],\n  },\n  base: {\n    description: 'deprecated alias for config:base',\n    extends: ['config:base'],\n  },\n  app: {\n    description: 'deprecated alias for config:js-app',\n    extends: ['config:js-app'],\n  },\n  library: {\n    description: 'deprecated alias for config:js-lib',\n    extends: ['config:js-lib'],\n  },\n};\n"]}