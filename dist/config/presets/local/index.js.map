{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/config/presets/local/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,4DAGsC;AAEtC,kDAAoC;AACpC,kDAAoC;AAEpC,SAAgB,SAAS,CAAC,EACxB,WAAW,EAAE,OAAO,EACpB,UAAU,GAAG,SAAS,EACtB,UAAU,GACG;IACb,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,UAAU,CAAC;IAC1C,IAAI,CAAC,QAAQ,EAAE;QACb,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;KAC9D;IACD,QAAQ,QAAQ,CAAC,WAAW,EAAE,EAAE;QAC9B,KAAK,gCAAoB;YACvB,OAAO,MAAM,CAAC,qBAAqB,CAAC,OAAO,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;QACrE,KAAK,gCAAoB;YACvB,OAAO,MAAM,CAAC,qBAAqB,CAAC,OAAO,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;QACrE;YACE,MAAM,IAAI,KAAK,CACb,yBAAyB,UAAU,CAAC,QAAQ,qBAAqB,CAClE,CAAC;KACL;AACH,CAAC;AAnBD,8BAmBC","sourcesContent":["import {\n  PLATFORM_TYPE_GITHUB,\n  PLATFORM_TYPE_GITLAB,\n} from '../../../constants/platforms';\nimport { Preset, PresetConfig } from '../common';\nimport * as github from '../github';\nimport * as gitlab from '../gitlab';\n\nexport function getPreset({\n  packageName: pkgName,\n  presetName = 'default',\n  baseConfig,\n}: PresetConfig): Promise<Preset> {\n  const { platform, endpoint } = baseConfig;\n  if (!platform) {\n    throw new Error(`Missing platform config for local preset.`);\n  }\n  switch (platform.toLowerCase()) {\n    case PLATFORM_TYPE_GITLAB:\n      return gitlab.getPresetFromEndpoint(pkgName, presetName, endpoint);\n    case PLATFORM_TYPE_GITHUB:\n      return github.getPresetFromEndpoint(pkgName, presetName, endpoint);\n    default:\n      throw new Error(\n        `Unsupported platform '${baseConfig.platform}' for local preset.`\n      );\n  }\n}\n"]}