{"version":3,"file":"util.js","sourceRoot":"","sources":["../../../lib/config/presets/util.ts"],"names":[],"mappings":";;;AAAA,yCAAsC;AACtC,wCAAqD;AAGxC,QAAA,oBAAoB,GAAG,eAAe,CAAC;AACvC,QAAA,gBAAgB,GAAG,kBAAkB,CAAC;AAe5C,KAAK,UAAU,WAAW,CAAC,EAChC,OAAO,EACP,UAAU,EACV,QAAQ,EACR,KAAK,GACa;IAClB,6CAA6C;IAC7C,QAAQ,GAAG,yBAAmB,CAAC,QAAQ,CAAC,CAAC;IACzC,MAAM,CAAC,QAAQ,EAAE,UAAU,EAAE,aAAa,CAAC,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACpE,IAAI,WAA4B,CAAC;IACjC,IAAI,QAAQ,KAAK,SAAS,EAAE;QAC1B,IAAI;YACF,WAAW,GAAG,MAAM,KAAK,CAAC,OAAO,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;SAC9D;QAAC,OAAO,GAAG,EAAE;YACZ,IAAI,GAAG,CAAC,OAAO,KAAK,4BAAoB,EAAE;gBACxC,MAAM,GAAG,CAAC;aACX;YACD,eAAM,CAAC,KAAK,CAAC,sDAAsD,CAAC,CAAC;YACrE,WAAW,GAAG,MAAM,KAAK,CAAC,OAAO,EAAE,eAAe,EAAE,QAAQ,CAAC,CAAC;SAC/D;KACF;SAAM;QACL,WAAW,GAAG,MAAM,KAAK,CAAC,OAAO,EAAE,GAAG,QAAQ,OAAO,EAAE,QAAQ,CAAC,CAAC;KAClE;IAED,IAAI,CAAC,WAAW,EAAE;QAChB,MAAM,IAAI,KAAK,CAAC,4BAAoB,CAAC,CAAC;KACvC;IACD,IAAI,UAAU,EAAE;QACd,MAAM,MAAM,GAAG,WAAW,CAAC,UAAU,CAAC,CAAC;QACvC,IAAI,CAAC,MAAM,EAAE;YACX,MAAM,IAAI,KAAK,CAAC,wBAAgB,CAAC,CAAC;SACnC;QACD,IAAI,aAAa,EAAE;YACjB,MAAM,SAAS,GAAG,MAAM,CAAC,aAAa,CAAC,CAAC;YACxC,IAAI,CAAC,SAAS,EAAE;gBACd,MAAM,IAAI,KAAK,CAAC,wBAAgB,CAAC,CAAC;aACnC;YACD,OAAO,SAAS,CAAC;SAClB;QACD,OAAO,MAAM,CAAC;KACf;IACD,OAAO,WAAW,CAAC;AACrB,CAAC;AA1CD,kCA0CC","sourcesContent":["import { logger } from '../../logger';\nimport { ensureTrailingSlash } from '../../util/url';\nimport { Preset } from './common';\n\nexport const PRESET_DEP_NOT_FOUND = 'dep not found';\nexport const PRESET_NOT_FOUND = 'preset not found';\n\nexport type PresetFetcher = (\n  repo: string,\n  fileName: string,\n  endpoint: string\n) => Promise<Preset>;\n\nexport type FetchPresetConfig = {\n  pkgName: string;\n  filePreset: string;\n  endpoint: string;\n  fetch: PresetFetcher;\n};\n\nexport async function fetchPreset({\n  pkgName,\n  filePreset,\n  endpoint,\n  fetch,\n}: FetchPresetConfig): Promise<Preset | undefined> {\n  // eslint-disable-next-line no-param-reassign\n  endpoint = ensureTrailingSlash(endpoint);\n  const [fileName, presetName, subPresetName] = filePreset.split('/');\n  let jsonContent: any | undefined;\n  if (fileName === 'default') {\n    try {\n      jsonContent = await fetch(pkgName, 'default.json', endpoint);\n    } catch (err) {\n      if (err.message !== PRESET_DEP_NOT_FOUND) {\n        throw err;\n      }\n      logger.debug('default.json preset not found - trying renovate.json');\n      jsonContent = await fetch(pkgName, 'renovate.json', endpoint);\n    }\n  } else {\n    jsonContent = await fetch(pkgName, `${fileName}.json`, endpoint);\n  }\n\n  if (!jsonContent) {\n    throw new Error(PRESET_DEP_NOT_FOUND);\n  }\n  if (presetName) {\n    const preset = jsonContent[presetName];\n    if (!preset) {\n      throw new Error(PRESET_NOT_FOUND);\n    }\n    if (subPresetName) {\n      const subPreset = preset[subPresetName];\n      if (!subPreset) {\n        throw new Error(PRESET_NOT_FOUND);\n      }\n      return subPreset;\n    }\n    return preset;\n  }\n  return jsonContent;\n}\n"]}