{"version":3,"file":"common.js","sourceRoot":"","sources":["../../lib/config/common.ts"],"names":[],"mappings":"","sourcesContent":["import { LogLevel } from 'bunyan';\nimport { Range } from 'semver';\nimport { HostRule } from '../types';\n\nexport type RenovateConfigStage =\n  | 'global'\n  | 'repository'\n  | 'package'\n  | 'branch'\n  | 'pr';\n\nexport type RepositoryCacheConfig = 'disabled' | 'enabled' | 'reset';\n\nexport interface GroupConfig extends Record<string, unknown> {\n  branchName?: string;\n  branchTopic?: string;\n}\n\n// TODO: Proper typings\nexport interface RenovateSharedConfig {\n  automerge?: boolean;\n  branchPrefix?: string;\n  branchName?: string;\n  manager?: string;\n  commitMessage?: string;\n  draftPR?: boolean;\n  enabled?: boolean;\n  enabledManagers?: string[];\n  fileMatch?: string[];\n  group?: GroupConfig;\n  groupName?: string;\n  groupSlug?: string;\n  includePaths?: string[];\n  ignoreDeps?: string[];\n  ignorePaths?: string[];\n  labels?: string[];\n  managers?: string | string[];\n  dependencyDashboardApproval?: boolean;\n  npmrc?: string;\n  platform?: string;\n  postUpgradeTasks?: PostUpgradeTasks;\n  prBodyColumns?: string[];\n  prBodyDefinitions?: Record<string, string>;\n  prCreation?: 'immediate' | 'not-pending' | 'status-success' | 'approval';\n  productLinks?: Record<string, string>;\n  prPriority?: number;\n  rebaseLabel?: string;\n  rebaseWhen?: string;\n  recreateClosed?: boolean;\n  repository?: string;\n  repositoryCache?: RepositoryCacheConfig;\n  requiredStatusChecks?: string[];\n  schedule?: string[];\n  semanticCommits?: boolean;\n  semanticCommitScope?: string;\n  semanticCommitType?: string;\n  statusCheckVerify?: boolean;\n  suppressNotifications?: string[];\n  timezone?: string;\n  unicodeEmoji?: boolean;\n}\n\nexport interface GlobalConfig {\n  prBanner?: string;\n  prFooter?: string;\n}\n\nexport interface RenovateAdminConfig {\n  allowedPostUpgradeCommands?: string[];\n  autodiscover?: boolean;\n  autodiscoverFilter?: string;\n\n  baseDir?: string;\n  cacheDir?: string;\n  configWarningReuseIssue?: boolean;\n  dryRun?: boolean;\n\n  endpoint?: string;\n\n  global?: GlobalConfig;\n\n  localDir?: string;\n  logFile?: string;\n  logFileLevel?: LogLevel;\n  logLevel?: LogLevel;\n  logContext?: string;\n\n  onboarding?: boolean;\n  onboardingBranch?: string;\n  onboardingPrTitle?: string;\n  onboardingConfig?: RenovateSharedConfig;\n\n  platform?: string;\n  postUpdateOptions?: string[];\n  privateKey?: string | Buffer;\n  repositories?: RenovateRepository[];\n  requireConfig?: boolean;\n  trustLevel?: 'low' | 'high';\n  redisUrl?: string;\n  gitPrivateKey?: string;\n}\n\nexport type PostUpgradeTasks = {\n  commands?: string[];\n  fileFilters?: string[];\n};\n\ntype UpdateConfig<\n  T extends RenovateSharedConfig = RenovateSharedConfig\n> = Partial<Record<UpdateType, T>>;\n\nexport type RenovateRepository =\n  | string\n  | {\n      repository: string;\n    };\n\nexport interface CustomManager {\n  fileMatch: string[];\n  matchStrings: string[];\n  depNameTemplate?: string;\n  datasourceTemplate?: string;\n  lookupNameTemplate?: string;\n  versioningTemplate?: string;\n}\n\n// TODO: Proper typings\nexport interface RenovateConfig\n  extends RenovateAdminConfig,\n    RenovateSharedConfig,\n    UpdateConfig<PackageRule>,\n    AssigneesAndReviewersConfig,\n    Record<string, unknown> {\n  depName?: string;\n  baseBranches?: string[];\n  baseBranch?: string;\n  baseBranchSha?: string;\n  defaultBranch?: string;\n  branchList?: string[];\n  description?: string | string[];\n\n  errors?: ValidationMessage[];\n  extends?: string[];\n\n  gitAuthor?: string;\n\n  hostRules?: HostRule[];\n\n  ignorePresets?: string[];\n  includeForks?: boolean;\n  isFork?: boolean;\n\n  fileList?: string[];\n\n  dependencyDashboard?: boolean;\n  dependencyDashboardAutoclose?: boolean;\n  dependencyDashboardChecks?: Record<string, string>;\n  dependencyDashboardRebaseAllOpen?: boolean;\n  dependencyDashboardTitle?: string;\n  dependencyDashboardHeader?: string;\n  dependencyDashboardFooter?: string;\n  packageFile?: string;\n  packageRules?: PackageRule[];\n  prConcurrentLimit?: number;\n  prHourlyLimit?: number;\n  repoIsOnboarded?: boolean;\n\n  updateType?: UpdateType;\n\n  warnings?: ValidationMessage[];\n  vulnerabilityAlerts?: RenovateSharedConfig;\n  regexManagers?: CustomManager[];\n}\n\nexport interface AssigneesAndReviewersConfig {\n  assigneesFromCodeOwners?: boolean;\n  assignees?: string[];\n  assigneesSampleSize?: number;\n  reviewersFromCodeOwners?: boolean;\n  reviewers?: string[];\n  reviewersSampleSize?: number;\n  additionalReviewers?: string[];\n}\n\nexport type UpdateType =\n  | 'major'\n  | 'minor'\n  | 'patch'\n  | 'pin'\n  | 'digest'\n  | 'lockFileMaintenance'\n  | 'lockfileUpdate'\n  | 'rollback'\n  | 'bump';\n\n// TODO: Proper typings\nexport interface PackageRule\n  extends RenovateSharedConfig,\n    UpdateConfig,\n    Record<string, any> {\n  paths?: string[];\n  languages?: string[];\n  baseBranchList?: string[];\n  datasources?: string[];\n  depTypeList?: string[];\n  packageNames?: string[];\n  packagePatterns?: string[];\n  excludePackageNames?: string[];\n  excludePackagePatterns?: string[];\n  matchCurrentVersion?: string | Range;\n  sourceUrlPrefixes?: string[];\n\n  updateTypes?: UpdateType[];\n}\n\nexport interface ValidationMessage {\n  depName: string;\n  message: string;\n}\n"]}