{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/platform/azure/index.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport {\n  GitPullRequest,\n  GitPullRequestCommentThread,\n  GitPullRequestMergeStrategy,\n} from 'azure-devops-node-api/interfaces/GitInterfaces';\nimport { RenovateConfig } from '../../config/common';\nimport { REPOSITORY_DISABLED } from '../../constants/error-messages';\nimport { PLATFORM_TYPE_AZURE } from '../../constants/platforms';\nimport {\n  PR_STATE_ALL,\n  PR_STATE_NOT_OPEN,\n  PR_STATE_OPEN,\n} from '../../constants/pull-requests';\nimport { logger } from '../../logger';\nimport { BranchStatus } from '../../types';\nimport * as git from '../../util/git';\nimport * as hostRules from '../../util/host-rules';\nimport { sanitize } from '../../util/sanitize';\nimport { ensureTrailingSlash } from '../../util/url';\nimport {\n  BranchStatusConfig,\n  CreatePRConfig,\n  EnsureCommentConfig,\n  EnsureCommentRemovalConfig,\n  EnsureIssueResult,\n  FindPRConfig,\n  Issue,\n  PlatformParams,\n  PlatformResult,\n  Pr,\n  RepoParams,\n  RepoResult,\n  VulnerabilityAlert,\n} from '../common';\nimport { smartTruncate } from '../utils/pr-body';\nimport * as azureApi from './azure-got-wrapper';\nimport * as azureHelper from './azure-helper';\nimport { AzurePr } from './types';\n\ninterface Config {\n  repoForceRebase: boolean;\n  mergeMethod: GitPullRequestMergeStrategy;\n  owner: string;\n  repoId: string;\n  project: string;\n  azureWorkItemId: string;\n  prList: AzurePr[];\n  fileList: null;\n  repository: string;\n}\n\ninterface User {\n  id: string;\n  name: string;\n}\n\nlet config: Config = {} as any;\n\nconst defaults: any = {\n  hostType: PLATFORM_TYPE_AZURE,\n};\n\nexport function initPlatform({\n  endpoint,\n  token,\n  username,\n  password,\n}: PlatformParams): Promise<PlatformResult> {\n  if (!endpoint) {\n    throw new Error('Init: You must configure an Azure DevOps endpoint');\n  }\n  if (!token && !(username && password)) {\n    throw new Error(\n      'Init: You must configure an Azure DevOps token, or a username and password'\n    );\n  }\n  // TODO: Add a connection check that endpoint/token combination are valid\n  const res = {\n    endpoint: ensureTrailingSlash(endpoint),\n  };\n  defaults.endpoint = res.endpoint;\n  azureApi.setEndpoint(res.endpoint);\n  const platformConfig: PlatformResult = {\n    endpoint: defaults.endpoint,\n  };\n  return Promise.resolve(platformConfig);\n}\n\nexport async function getRepos(): Promise<string[]> {\n  logger.debug('Autodiscovering Azure DevOps repositories');\n  const azureApiGit = await azureApi.gitApi();\n  const repos = await azureApiGit.getRepositories();\n  return repos.map((repo) => `${repo.project.name}/${repo.name}`);\n}\n\nexport async function initRepo({\n  repository,\n  localDir,\n  azureWorkItemId,\n  optimizeForDisabled,\n}: RepoParams): Promise<RepoResult> {\n  logger.debug(`initRepo(\"${repository}\")`);\n  config = { repository, azureWorkItemId } as any;\n  const azureApiGit = await azureApi.gitApi();\n  const repos = await azureApiGit.getRepositories();\n  const names = azureHelper.getProjectAndRepo(repository);\n  const repo = repos.filter(\n    (c) =>\n      c.name.toLowerCase() === names.repo.toLowerCase() &&\n      c.project.name.toLowerCase() === names.project.toLowerCase()\n  )[0];\n  logger.debug({ repositoryDetails: repo }, 'Repository details');\n  config.repoId = repo.id;\n  config.project = repo.project.name;\n  config.owner = '?owner?';\n  logger.debug(`${repository} owner = ${config.owner}`);\n  // Use default branch as PR target unless later overridden\n  const defaultBranch = repo.defaultBranch.replace('refs/heads/', '');\n  logger.debug(`${repository} default branch = ${defaultBranch}`);\n  config.mergeMethod = await azureHelper.getMergeMethod(repo.id, names.project);\n  config.repoForceRebase = false;\n\n  if (optimizeForDisabled) {\n    interface RenovateConfig {\n      enabled: boolean;\n    }\n\n    let renovateConfig: RenovateConfig;\n    try {\n      const json = await azureHelper.getFile(\n        repo.id,\n        'renovate.json',\n        defaultBranch\n      );\n      renovateConfig = JSON.parse(json);\n    } catch {\n      // Do nothing\n    }\n    if (renovateConfig && renovateConfig.enabled === false) {\n      throw new Error(REPOSITORY_DISABLED);\n    }\n  }\n\n  const [projectName, repoName] = repository.split('/');\n  const opts = hostRules.find({\n    hostType: defaults.hostType,\n    url: defaults.endpoint,\n  });\n  const url =\n    defaults.endpoint +\n    `${encodeURIComponent(projectName)}/_git/${encodeURIComponent(repoName)}`;\n  await git.initRepo({\n    ...config,\n    localDir,\n    url,\n    extraCloneOpts: azureHelper.getStorageExtraCloneOpts(opts),\n    gitAuthorName: global.gitAuthor?.name,\n    gitAuthorEmail: global.gitAuthor?.email,\n  });\n  const repoConfig: RepoResult = {\n    defaultBranch,\n    isFork: false,\n  };\n  return repoConfig;\n}\n\nexport function getRepoForceRebase(): Promise<boolean> {\n  return Promise.resolve(config.repoForceRebase === true);\n}\n\n// istanbul ignore next\nexport async function setBaseBranch(branchName: string): Promise<string> {\n  logger.debug(`Setting base branch to ${branchName}`);\n  const baseBranchSha = await git.setBranch(branchName);\n  return baseBranchSha;\n}\n\n// istanbul ignore next\nasync function abandonPr(prNo: number): Promise<void> {\n  logger.debug(`abandonPr(prNo)(${prNo})`);\n  const azureApiGit = await azureApi.gitApi();\n  await azureApiGit.updatePullRequest(\n    {\n      status: 2,\n    },\n    config.repoId,\n    prNo\n  );\n}\n\nexport async function getPrList(): Promise<AzurePr[]> {\n  logger.debug('getPrList()');\n  if (!config.prList) {\n    const azureApiGit = await azureApi.gitApi();\n    let prs: GitPullRequest[] = [];\n    let fetchedPrs: GitPullRequest[];\n    let skip = 0;\n    do {\n      fetchedPrs = await azureApiGit.getPullRequests(\n        config.repoId,\n        { status: 4 },\n        config.project,\n        0,\n        skip,\n        100\n      );\n      prs = prs.concat(fetchedPrs);\n      skip += 100;\n    } while (fetchedPrs.length > 0);\n\n    config.prList = prs.map(azureHelper.getRenovatePRFormat);\n    logger.debug({ length: config.prList.length }, 'Retrieved Pull Requests');\n  }\n  return config.prList;\n}\n\nexport async function getPr(pullRequestId: number): Promise<Pr | null> {\n  logger.debug(`getPr(${pullRequestId})`);\n  if (!pullRequestId) {\n    return null;\n  }\n  const azurePr = (await getPrList()).find(\n    (item) => item.number === pullRequestId\n  );\n\n  if (!azurePr) {\n    return null;\n  }\n\n  const azureApiGit = await azureApi.gitApi();\n  const labels = await azureApiGit.getPullRequestLabels(\n    config.repoId,\n    pullRequestId\n  );\n\n  azurePr.labels = labels\n    .filter((label) => label.active)\n    .map((label) => label.name);\n  azurePr.hasReviewers = is.nonEmptyArray(azurePr.reviewers);\n  return azurePr;\n}\n\nexport async function findPr({\n  branchName,\n  prTitle,\n  state = PR_STATE_ALL,\n}: FindPRConfig): Promise<Pr | null> {\n  let prsFiltered: Pr[] = [];\n  try {\n    const prs = await getPrList();\n\n    prsFiltered = prs.filter(\n      (item) => item.sourceRefName === azureHelper.getNewBranchName(branchName)\n    );\n\n    if (prTitle) {\n      prsFiltered = prsFiltered.filter((item) => item.title === prTitle);\n    }\n\n    switch (state) {\n      case PR_STATE_ALL:\n        // no more filter needed, we can go further...\n        break;\n      case PR_STATE_NOT_OPEN:\n        prsFiltered = prsFiltered.filter(\n          (item) => item.state !== PR_STATE_OPEN\n        );\n        break;\n      default:\n        prsFiltered = prsFiltered.filter((item) => item.state === state);\n        break;\n    }\n  } catch (error) {\n    logger.error('findPr ' + error);\n  }\n  if (prsFiltered.length === 0) {\n    return null;\n  }\n  return prsFiltered[0];\n}\n\nexport async function getBranchPr(branchName: string): Promise<Pr | null> {\n  logger.debug(`getBranchPr(${branchName})`);\n  const existingPr = await findPr({\n    branchName,\n    state: PR_STATE_OPEN,\n  });\n  return existingPr ? getPr(existingPr.number) : null;\n}\n\nexport /* istanbul ignore next */ async function deleteBranch(\n  branchName: string,\n  abandonAssociatedPr = false\n): Promise<void> {\n  await git.deleteBranch(branchName);\n  if (abandonAssociatedPr) {\n    const pr = await getBranchPr(branchName);\n    await abandonPr(pr.number);\n  }\n}\n\nexport async function getBranchStatusCheck(\n  branchName: string,\n  context: string\n): Promise<BranchStatus> {\n  logger.trace(`getBranchStatusCheck(${branchName}, ${context})`);\n  const azureApiGit = await azureApi.gitApi();\n  const branch = await azureApiGit.getBranch(\n    config.repoId,\n    azureHelper.getBranchNameWithoutRefsheadsPrefix(branchName)!\n  );\n  if (branch.aheadCount === 0) {\n    return BranchStatus.green;\n  }\n  return BranchStatus.yellow;\n}\n\nexport async function getBranchStatus(\n  branchName: string,\n  requiredStatusChecks: string[]\n): Promise<BranchStatus> {\n  logger.debug(`getBranchStatus(${branchName})`);\n  if (!requiredStatusChecks) {\n    // null means disable status checks, so it always succeeds\n    return BranchStatus.green;\n  }\n  if (requiredStatusChecks.length) {\n    // This is Unsupported\n    logger.warn({ requiredStatusChecks }, `Unsupported requiredStatusChecks`);\n    return BranchStatus.red;\n  }\n  const branchStatusCheck = await getBranchStatusCheck(branchName, null);\n  return branchStatusCheck;\n}\n\nexport async function createPr({\n  branchName,\n  targetBranch,\n  prTitle: title,\n  prBody: body,\n  labels,\n  draftPR = false,\n  platformOptions = {},\n}: CreatePRConfig): Promise<Pr> {\n  const sourceRefName = azureHelper.getNewBranchName(branchName);\n  const targetRefName = azureHelper.getNewBranchName(targetBranch);\n  const description = azureHelper.max4000Chars(sanitize(body));\n  const azureApiGit = await azureApi.gitApi();\n  const workItemRefs = [\n    {\n      id: config.azureWorkItemId,\n    },\n  ];\n  let pr: GitPullRequest = await azureApiGit.createPullRequest(\n    {\n      sourceRefName,\n      targetRefName,\n      title,\n      description,\n      workItemRefs,\n      isDraft: draftPR,\n    },\n    config.repoId\n  );\n  if (platformOptions.azureAutoComplete) {\n    pr = await azureApiGit.updatePullRequest(\n      {\n        autoCompleteSetBy: {\n          id: pr.createdBy.id,\n        },\n        completionOptions: {\n          mergeStrategy: config.mergeMethod,\n          deleteSourceBranch: true,\n        },\n      },\n      config.repoId,\n      pr.pullRequestId\n    );\n  }\n  await Promise.all(\n    labels.map((label) =>\n      azureApiGit.createPullRequestLabel(\n        {\n          name: label,\n        },\n        config.repoId,\n        pr.pullRequestId\n      )\n    )\n  );\n  return azureHelper.getRenovatePRFormat(pr);\n}\n\nexport async function updatePr(\n  prNo: number,\n  title: string,\n  body?: string\n): Promise<void> {\n  logger.debug(`updatePr(${prNo}, ${title}, body)`);\n  const azureApiGit = await azureApi.gitApi();\n  const objToUpdate: GitPullRequest = {\n    title,\n  };\n  if (body) {\n    objToUpdate.description = azureHelper.max4000Chars(sanitize(body));\n  }\n  await azureApiGit.updatePullRequest(objToUpdate, config.repoId, prNo);\n}\n\nexport async function ensureComment({\n  number,\n  topic,\n  content,\n}: EnsureCommentConfig): Promise<boolean> {\n  logger.debug(`ensureComment(${number}, ${topic}, content)`);\n  const header = topic ? `### ${topic}\\n\\n` : '';\n  const body = `${header}${sanitize(content)}`;\n  const azureApiGit = await azureApi.gitApi();\n\n  const threads = await azureApiGit.getThreads(config.repoId, number);\n  let threadIdFound = null;\n  let commentIdFound = null;\n  let commentNeedsUpdating = false;\n  threads.forEach((thread) => {\n    const firstCommentContent = thread.comments[0].content;\n    if (\n      (topic && firstCommentContent?.startsWith(header)) ||\n      (!topic && firstCommentContent === body)\n    ) {\n      threadIdFound = thread.id;\n      commentIdFound = thread.comments[0].id;\n      commentNeedsUpdating = firstCommentContent !== body;\n    }\n  });\n\n  if (!threadIdFound) {\n    await azureApiGit.createThread(\n      {\n        comments: [{ content: body, commentType: 1, parentCommentId: 0 }],\n        status: 1,\n      },\n      config.repoId,\n      number\n    );\n    logger.info(\n      { repository: config.repository, issueNo: number, topic },\n      'Comment added'\n    );\n  } else if (commentNeedsUpdating) {\n    await azureApiGit.updateComment(\n      {\n        content: body,\n      },\n      config.repoId,\n      number,\n      threadIdFound,\n      commentIdFound\n    );\n    logger.debug(\n      { repository: config.repository, issueNo: number, topic },\n      'Comment updated'\n    );\n  } else {\n    logger.debug(\n      { repository: config.repository, issueNo: number, topic },\n      'Comment is already update-to-date'\n    );\n  }\n\n  return true;\n}\n\nexport async function ensureCommentRemoval({\n  number: issueNo,\n  topic,\n  content,\n}: EnsureCommentRemovalConfig): Promise<void> {\n  logger.debug(\n    `Ensuring comment \"${topic || content}\" in #${issueNo} is removed`\n  );\n\n  const azureApiGit = await azureApi.gitApi();\n  const threads = await azureApiGit.getThreads(config.repoId, issueNo);\n\n  const byTopic = (thread: GitPullRequestCommentThread): boolean =>\n    thread.comments[0].content.startsWith(`### ${topic}\\n\\n`);\n  const byContent = (thread: GitPullRequestCommentThread): boolean =>\n    thread.comments[0].content.trim() === content;\n\n  let threadIdFound: number | null = null;\n\n  if (topic) {\n    threadIdFound = threads.find(byTopic)?.id;\n  } else if (content) {\n    threadIdFound = threads.find(byContent)?.id;\n  }\n\n  if (threadIdFound) {\n    await azureApiGit.updateThread(\n      {\n        status: 4, // close\n      },\n      config.repoId,\n      issueNo,\n      threadIdFound\n    );\n  }\n}\n\nexport function setBranchStatus({\n  branchName,\n  context,\n  description,\n  state,\n  url: targetUrl,\n}: BranchStatusConfig): Promise<void> {\n  logger.debug(\n    `setBranchStatus(${branchName}, ${context}, ${description}, ${state}, ${targetUrl}) - Not supported by Azure DevOps (yet!)`\n  );\n  return Promise.resolve();\n}\n\nexport function mergePr(pr: number, branchName: string): Promise<boolean> {\n  logger.debug(`mergePr(pr)(${pr}) - Not supported by Azure DevOps (yet!)`);\n  return Promise.resolve(false);\n}\n\nexport function getPrBody(input: string): string {\n  // Remove any HTML we use\n  return smartTruncate(input, 4000)\n    .replace(\n      'you tick the rebase/retry checkbox',\n      'rename PR to start with \"rebase!\"'\n    )\n    .replace(new RegExp(`\\n---\\n\\n.*?<!-- rebase-check -->.*?\\n`), '')\n    .replace('<summary>', '**')\n    .replace('</summary>', '**')\n    .replace('<details>', '')\n    .replace('</details>', '');\n}\n\nexport /* istanbul ignore next */ function findIssue(): Promise<Issue | null> {\n  logger.warn(`findIssue() is not implemented`);\n  return null;\n}\n\nexport /* istanbul ignore next */ function ensureIssue(): Promise<EnsureIssueResult | null> {\n  logger.warn(`ensureIssue() is not implemented`);\n  return Promise.resolve(null);\n}\n\nexport /* istanbul ignore next */ function ensureIssueClosing(): Promise<void> {\n  return Promise.resolve();\n}\n\nexport /* istanbul ignore next */ function getIssueList(): Promise<Issue[]> {\n  logger.debug(`getIssueList()`);\n  // TODO: Needs implementation\n  return Promise.resolve([]);\n}\n\nasync function getUserIds(users: string[]): Promise<User[]> {\n  const azureApiGit = await azureApi.gitApi();\n  const azureApiCore = await azureApi.coreApi();\n  const repos = await azureApiGit.getRepositories();\n  const repo = repos.filter((c) => c.id === config.repoId)[0];\n  const teams = await azureApiCore.getTeams(repo.project.id);\n  const members = await Promise.all(\n    teams.map(\n      async (t) =>\n        /* eslint-disable no-return-await */\n        await azureApiCore.getTeamMembersWithExtendedProperties(\n          repo.project.id,\n          t.id\n        )\n    )\n  );\n\n  const ids: { id: string; name: string }[] = [];\n  members.forEach((listMembers) => {\n    listMembers.forEach((m) => {\n      users.forEach((r) => {\n        if (\n          r.toLowerCase() === m.identity.displayName.toLowerCase() ||\n          r.toLowerCase() === m.identity.uniqueName.toLowerCase()\n        ) {\n          if (ids.filter((c) => c.id === m.identity.id).length === 0) {\n            ids.push({ id: m.identity.id, name: r });\n          }\n        }\n      });\n    });\n  });\n\n  teams.forEach((t) => {\n    users.forEach((r) => {\n      if (r.toLowerCase() === t.name.toLowerCase()) {\n        if (ids.filter((c) => c.id === t.id).length === 0) {\n          ids.push({ id: t.id, name: r });\n        }\n      }\n    });\n  });\n\n  return ids;\n}\n\n/**\n *\n * @param {number} issueNo\n * @param {string[]} assignees\n */\nexport async function addAssignees(\n  issueNo: number,\n  assignees: string[]\n): Promise<void> {\n  logger.trace(`addAssignees(${issueNo}, ${assignees})`);\n  const ids = await getUserIds(assignees);\n  await ensureComment({\n    number: issueNo,\n    topic: 'Add Assignees',\n    content: ids.map((a) => `@<${a.id}>`).join(', '),\n  });\n}\n\n/**\n *\n * @param {number} prNo\n * @param {string[]} reviewers\n */\nexport async function addReviewers(\n  prNo: number,\n  reviewers: string[]\n): Promise<void> {\n  logger.trace(`addReviewers(${prNo}, ${reviewers})`);\n  const azureApiGit = await azureApi.gitApi();\n\n  const ids = await getUserIds(reviewers);\n\n  await Promise.all(\n    ids.map(async (obj) => {\n      await azureApiGit.createPullRequestReviewer(\n        {},\n        config.repoId,\n        prNo,\n        obj.id\n      );\n      logger.debug(`Reviewer added: ${obj.name}`);\n    })\n  );\n}\n\nexport /* istanbul ignore next */ async function deleteLabel(\n  prNumber: number,\n  label: string\n): Promise<void> {\n  logger.debug(`Deleting label ${label} from #${prNumber}`);\n  const azureApiGit = await azureApi.gitApi();\n  await azureApiGit.deletePullRequestLabels(config.repoId, prNumber, label);\n}\n\nexport function getVulnerabilityAlerts(): Promise<VulnerabilityAlert[]> {\n  return Promise.resolve([]);\n}\n"]}