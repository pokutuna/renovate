{"version":3,"file":"azure-got-wrapper.js","sourceRoot":"","sources":["../../../lib/platform/azure/azure-got-wrapper.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,6DAA+C;AAC/C,iEAA6E;AAK7E,yDAAgE;AAEhE,iEAAmD;AAEnD,MAAM,QAAQ,GAAG,+BAAmB,CAAC;AACrC,IAAI,QAAgB,CAAC;AAErB,SAAS,wBAAwB,CAAC,MAAgB;IAChD,IAAI,CAAC,MAAM,CAAC,KAAK,IAAI,MAAM,CAAC,QAAQ,IAAI,MAAM,CAAC,QAAQ,EAAE;QACvD,OAAO,uCAAe,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC;KAC1D;IACD,OAAO,2CAAmB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AAC3C,CAAC;AAED,SAAgB,QAAQ;IACtB,MAAM,MAAM,GAAG,SAAS,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,GAAG,EAAE,QAAQ,EAAE,CAAC,CAAC;IAC3D,IAAI,CAAC,MAAM,CAAC,KAAK,IAAI,CAAC,CAAC,MAAM,CAAC,QAAQ,IAAI,MAAM,CAAC,QAAQ,CAAC,EAAE;QAC1D,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;KAC9C;IACD,MAAM,WAAW,GAAG,wBAAwB,CAAC,MAAM,CAAC,CAAC;IACrD,OAAO,IAAI,KAAK,CAAC,MAAM,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;AACjD,CAAC;AAPD,4BAOC;AAED,SAAgB,MAAM;IACpB,OAAO,QAAQ,EAAE,CAAC,SAAS,EAAE,CAAC;AAChC,CAAC;AAFD,wBAEC;AAED,SAAgB,OAAO;IACrB,OAAO,QAAQ,EAAE,CAAC,UAAU,EAAE,CAAC;AACjC,CAAC;AAFD,0BAEC;AAED,SAAgB,SAAS;IACvB,OAAO,QAAQ,EAAE,CAAC,YAAY,EAAE,CAAC;AACnC,CAAC;AAFD,8BAEC;AAED,SAAgB,WAAW,CAAC,CAAS;IACnC,QAAQ,GAAG,CAAC,CAAC;AACf,CAAC;AAFD,kCAEC","sourcesContent":["import * as azure from 'azure-devops-node-api';\nimport { getBasicHandler, getHandlerFromToken } from 'azure-devops-node-api';\nimport { ICoreApi } from 'azure-devops-node-api/CoreApi';\nimport { IGitApi } from 'azure-devops-node-api/GitApi';\nimport { IPolicyApi } from 'azure-devops-node-api/PolicyApi';\nimport { IRequestHandler } from 'azure-devops-node-api/interfaces/common/VsoBaseInterfaces';\nimport { PLATFORM_TYPE_AZURE } from '../../constants/platforms';\nimport { HostRule } from '../../types';\nimport * as hostRules from '../../util/host-rules';\n\nconst hostType = PLATFORM_TYPE_AZURE;\nlet endpoint: string;\n\nfunction getAuthenticationHandler(config: HostRule): IRequestHandler {\n  if (!config.token && config.username && config.password) {\n    return getBasicHandler(config.username, config.password);\n  }\n  return getHandlerFromToken(config.token);\n}\n\nexport function azureObj(): azure.WebApi {\n  const config = hostRules.find({ hostType, url: endpoint });\n  if (!config.token && !(config.username && config.password)) {\n    throw new Error(`No config found for azure`);\n  }\n  const authHandler = getAuthenticationHandler(config);\n  return new azure.WebApi(endpoint, authHandler);\n}\n\nexport function gitApi(): Promise<IGitApi> {\n  return azureObj().getGitApi();\n}\n\nexport function coreApi(): Promise<ICoreApi> {\n  return azureObj().getCoreApi();\n}\n\nexport function policyApi(): Promise<IPolicyApi> {\n  return azureObj().getPolicyApi();\n}\n\nexport function setEndpoint(e: string): void {\n  endpoint = e;\n}\n"]}