{"version":3,"file":"azure-helper.js","sourceRoot":"","sources":["../../../lib/platform/azure/azure-helper.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  GitCommit,\n  GitPullRequest,\n  GitPullRequestMergeStrategy,\n  GitRef,\n} from 'azure-devops-node-api/interfaces/GitInterfaces';\nimport { Options } from 'simple-git';\nimport {\n  PR_STATE_CLOSED,\n  PR_STATE_MERGED,\n  PR_STATE_OPEN,\n} from '../../constants/pull-requests';\nimport { logger } from '../../logger';\n\nimport { HostRule } from '../../types';\nimport * as azureApi from './azure-got-wrapper';\nimport { AzurePr } from './types';\n\nconst mergePolicyGuid = 'fa4e907d-c16b-4a4c-9dfa-4916e5d171ab'; // Magic GUID for merge strategy policy configurations\n\nfunction toBase64(from: string): string {\n  return Buffer.from(from).toString('base64');\n}\n\nexport function getStorageExtraCloneOpts(config: HostRule): Options {\n  let header: string;\n  const headerName = 'AUTHORIZATION';\n  if (!config.token && config.username && config.password) {\n    header = `${headerName}: basic ${toBase64(\n      `${config.username}:${config.password}`\n    )}`;\n  } else if (config.token.length !== 52) {\n    header = `${headerName}: bearer ${config.token}`;\n  } else {\n    header = `${headerName}: basic ${toBase64(`:${config.token}`)}`;\n  }\n  return { '--config': `http.extraheader=${header}` };\n}\n\nexport function getNewBranchName(branchName?: string): string {\n  if (branchName && !branchName.startsWith('refs/heads/')) {\n    return `refs/heads/${branchName}`;\n  }\n  return branchName;\n}\n\nexport function getBranchNameWithoutRefsheadsPrefix(\n  branchPath: string\n): string | undefined {\n  if (!branchPath) {\n    logger.error(`getBranchNameWithoutRefsheadsPrefix(${branchPath})`);\n    return undefined;\n  }\n  if (!branchPath.startsWith('refs/heads/')) {\n    logger.trace(\n      `The refs/heads/ name should have started with 'refs/heads/' but it didn't. (${branchPath})`\n    );\n    return branchPath;\n  }\n  return branchPath.substring(11, branchPath.length);\n}\n\nfunction getBranchNameWithoutRefsPrefix(\n  branchPath?: string\n): string | undefined {\n  if (!branchPath) {\n    logger.error(`getBranchNameWithoutRefsPrefix(${branchPath})`);\n    return undefined;\n  }\n  if (!branchPath.startsWith('refs/')) {\n    logger.trace(\n      `The ref name should have started with 'refs/' but it didn't. (${branchPath})`\n    );\n    return branchPath;\n  }\n  return branchPath.substring(5, branchPath.length);\n}\n\nexport async function getRefs(\n  repoId: string,\n  branchName?: string\n): Promise<GitRef[]> {\n  logger.debug(`getRefs(${repoId}, ${branchName})`);\n  const azureApiGit = await azureApi.gitApi();\n  const refs = await azureApiGit.getRefs(\n    repoId,\n    undefined,\n    getBranchNameWithoutRefsPrefix(branchName)\n  );\n  return refs;\n}\n\nexport interface AzureBranchObj {\n  name: string;\n  oldObjectId: string;\n}\n\nexport async function getAzureBranchObj(\n  repoId: string,\n  branchName: string,\n  from?: string\n): Promise<AzureBranchObj> {\n  const fromBranchName = getNewBranchName(from);\n  const refs = await getRefs(repoId, fromBranchName);\n  if (refs.length === 0) {\n    logger.debug(`getAzureBranchObj without a valid from, so initial commit.`);\n    return {\n      name: getNewBranchName(branchName),\n      oldObjectId: '0000000000000000000000000000000000000000',\n    };\n  }\n  return {\n    name: getNewBranchName(branchName),\n    oldObjectId: refs[0].objectId,\n  };\n}\n\nasync function streamToString(stream: NodeJS.ReadableStream): Promise<string> {\n  const chunks: string[] = [];\n  /* eslint-disable promise/avoid-new */\n  const p = await new Promise<string>((resolve) => {\n    stream.on('data', (chunk: any) => {\n      chunks.push(chunk.toString());\n    });\n    stream.on('end', () => {\n      resolve(chunks.join(''));\n    });\n  });\n  return p;\n}\n\n// if no branchName, look globaly\nexport async function getFile(\n  repoId: string,\n  filePath: string,\n  branchName: string\n): Promise<string | null> {\n  logger.trace(`getFile(filePath=${filePath}, branchName=${branchName})`);\n  const azureApiGit = await azureApi.gitApi();\n  const item = await azureApiGit.getItemText(\n    repoId,\n    filePath,\n    undefined,\n    undefined,\n    0, // because we look for 1 file\n    false,\n    false,\n    true,\n    {\n      versionType: 0, // branch\n      versionOptions: 0,\n      version: getBranchNameWithoutRefsheadsPrefix(branchName),\n    }\n  );\n\n  if (item?.readable) {\n    const fileContent = await streamToString(item);\n    try {\n      const jTmp = JSON.parse(fileContent);\n      if (jTmp.typeKey === 'GitItemNotFoundException') {\n        // file not found\n        return null;\n      }\n      if (jTmp.typeKey === 'GitUnresolvableToCommitException') {\n        // branch not found\n        return null;\n      }\n    } catch (error) {\n      // it 's not a JSON, so I send the content directly with the line under\n    }\n    return fileContent;\n  }\n  return null; // no file found\n}\n\nexport function max4000Chars(str: string): string {\n  if (str && str.length >= 4000) {\n    return str.substring(0, 3999);\n  }\n  return str;\n}\n\nexport function getRenovatePRFormat(azurePr: GitPullRequest): AzurePr {\n  const pr: AzurePr = azurePr as any;\n\n  pr.displayNumber = `Pull Request #${azurePr.pullRequestId}`;\n  pr.number = azurePr.pullRequestId;\n  pr.body = azurePr.description;\n  pr.targetBranch = getBranchNameWithoutRefsheadsPrefix(azurePr.targetRefName);\n  pr.branchName = pr.targetBranch;\n  pr.createdAt = azurePr.creationDate?.toISOString();\n\n  // status\n  // export declare enum PullRequestStatus {\n  //   NotSet = 0,\n  //   Active = 1,\n  //   Abandoned = 2,\n  //   Completed = 3,\n  //   All = 4,\n  // }\n  if (azurePr.status === 2) {\n    pr.state = PR_STATE_CLOSED;\n  } else if (azurePr.status === 3) {\n    pr.state = PR_STATE_MERGED;\n  } else {\n    pr.state = PR_STATE_OPEN;\n  }\n\n  // mergeStatus\n  // export declare enum PullRequestAsyncStatus {\n  //   NotSet = 0,\n  //   Queued = 1,\n  //   Conflicts = 2,\n  //   Succeeded = 3,\n  //   RejectedByPolicy = 4,\n  //   Failure = 5,\n  // }\n  if (azurePr.mergeStatus === 2) {\n    pr.isConflicted = true;\n  }\n\n  return pr;\n}\n\nexport async function getCommitDetails(\n  commit: string,\n  repoId: string\n): Promise<GitCommit> {\n  logger.debug(`getCommitDetails(${commit}, ${repoId})`);\n  const azureApiGit = await azureApi.gitApi();\n  const results = await azureApiGit.getCommit(commit, repoId);\n  return results;\n}\n\nexport function getProjectAndRepo(\n  str: string\n): { project: string; repo: string } {\n  logger.trace(`getProjectAndRepo(${str})`);\n  const strSplited = str.split(`/`);\n  if (strSplited.length === 1) {\n    return {\n      project: str,\n      repo: str,\n    };\n  }\n  if (strSplited.length === 2) {\n    return {\n      project: strSplited[0],\n      repo: strSplited[1],\n    };\n  }\n  const msg = `${str} can be only structured this way : 'repository' or 'projectName/repository'!`;\n  logger.error(msg);\n  throw new Error(msg);\n}\n\nexport async function getMergeMethod(\n  repoId: string,\n  project: string\n): Promise<GitPullRequestMergeStrategy> {\n  const policyConfigurations = (\n    await (await azureApi.policyApi()).getPolicyConfigurations(project)\n  )\n    .filter(\n      (p) =>\n        p.settings.scope.some((s) => s.repositoryId === repoId) &&\n        p.type.id === mergePolicyGuid\n    )\n    .map((p) => p.settings)[0];\n\n  try {\n    return Object.keys(policyConfigurations)\n      .map((p) => GitPullRequestMergeStrategy[p.slice(5)])\n      .find((p) => p);\n  } catch (err) {\n    return GitPullRequestMergeStrategy.NoFastForward;\n  }\n}\n"]}