{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../lib/platform/bitbucket/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import url from 'url';\nimport { PR_STATE_CLOSED } from '../../constants/pull-requests';\nimport { BranchStatus } from '../../types';\nimport { HttpResponse } from '../../util/http';\nimport { BitbucketHttp } from '../../util/http/bitbucket';\nimport { Pr } from '../common';\n\nconst bitbucketHttp = new BitbucketHttp();\n\nexport interface Config {\n  defaultBranch: string;\n  has_issues: boolean;\n  mergeMethod: string;\n  owner: string;\n  prList: Pr[];\n  repository: string;\n  bbUseDefaultReviewers: boolean;\n\n  username: string;\n}\n\nexport interface PagedResult<T = any> {\n  pagelen: number;\n  size?: number;\n  next?: string;\n  values: T[];\n}\n\nexport interface RepoInfo {\n  isFork: boolean;\n  owner: string;\n  mainbranch: string;\n  mergeMethod: string;\n  has_issues: boolean;\n}\n\nexport type BitbucketBranchState = 'SUCCESSFUL' | 'FAILED' | 'INPROGRESS';\nexport interface BitbucketStatus {\n  key: string;\n  state: BitbucketBranchState;\n}\n\nexport function repoInfoTransformer(repoInfoBody: any): RepoInfo {\n  return {\n    isFork: !!repoInfoBody.parent,\n    owner: repoInfoBody.owner.username,\n    mainbranch: repoInfoBody.mainbranch.name,\n    mergeMethod: 'merge',\n    has_issues: repoInfoBody.has_issues,\n  };\n}\n\nexport const prStates = {\n  open: ['OPEN'],\n  notOpen: ['MERGED', 'DECLINED', 'SUPERSEDED'],\n  merged: ['MERGED'],\n  closed: ['DECLINED', 'SUPERSEDED'],\n  all: ['OPEN', 'MERGED', 'DECLINED', 'SUPERSEDED'],\n};\n\nexport const buildStates: Record<BranchStatus, BitbucketBranchState> = {\n  green: 'SUCCESSFUL',\n  red: 'FAILED',\n  yellow: 'INPROGRESS',\n};\n\nconst addMaxLength = (inputUrl: string, pagelen = 100): string => {\n  const { search, ...parsedUrl } = url.parse(inputUrl, true); // eslint-disable-line @typescript-eslint/no-unused-vars\n  const maxedUrl = url.format({\n    ...parsedUrl,\n    query: { ...parsedUrl.query, pagelen },\n  });\n  return maxedUrl;\n};\n\nfunction callApi<T>(\n  apiUrl: string,\n  method: string,\n  options?: any\n): Promise<HttpResponse<T>> {\n  /* istanbul ignore next */\n  switch (method.toLowerCase()) {\n    case 'post':\n      return bitbucketHttp.postJson<T>(apiUrl, options);\n    case 'put':\n      return bitbucketHttp.putJson<T>(apiUrl, options);\n    case 'patch':\n      return bitbucketHttp.patchJson<T>(apiUrl, options);\n    case 'head':\n      return bitbucketHttp.headJson<T>(apiUrl, options);\n    case 'delete':\n      return bitbucketHttp.deleteJson<T>(apiUrl, options);\n    case 'get':\n    default:\n      return bitbucketHttp.getJson<T>(apiUrl, options);\n  }\n}\n\nexport async function accumulateValues<T = any>(\n  reqUrl: string,\n  method = 'get',\n  options?: any,\n  pagelen?: number\n): Promise<T[]> {\n  let accumulator: T[] = [];\n  let nextUrl = addMaxLength(reqUrl, pagelen);\n\n  while (typeof nextUrl !== 'undefined') {\n    const { body } = await callApi<{ values: T[]; next: string }>(\n      nextUrl,\n      method,\n      options\n    );\n    accumulator = [...accumulator, ...body.values];\n    nextUrl = body.next;\n  }\n\n  return accumulator;\n}\n\nexport /* istanbul ignore next */ function isConflicted(files: any): boolean {\n  for (const file of files) {\n    for (const chunk of file.chunks) {\n      for (const change of chunk.changes) {\n        if (change.content === '+=======') {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\nexport function prInfo(pr: any): Pr {\n  return {\n    number: pr.id,\n    body: pr.summary ? pr.summary.raw : /* istanbul ignore next */ undefined,\n    branchName: pr.source.branch.name,\n    targetBranch: pr.destination.branch.name,\n    title: pr.title,\n    state: prStates.closed.includes(pr.state)\n      ? /* istanbul ignore next */ PR_STATE_CLOSED\n      : pr.state.toLowerCase(),\n    createdAt: pr.created_on,\n  };\n}\n"]}