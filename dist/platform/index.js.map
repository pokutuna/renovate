{"version":3,"file":"index.js","sourceRoot":"","sources":["../../lib/platform/index.ts"],"names":[],"mappings":"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","sourcesContent":["import URL from 'url';\nimport addrs from 'email-addresses';\nimport { RenovateConfig } from '../config/common';\nimport { PLATFORM_NOT_FOUND } from '../constants/error-messages';\nimport { logger } from '../logger';\nimport { setPrivateKey } from '../util/git';\nimport * as hostRules from '../util/host-rules';\nimport platforms from './api.generated';\nimport { Platform } from './common';\n\nexport * from './common';\n\nexport const getPlatformList = (): string[] => Array.from(platforms.keys());\nexport const getPlatforms = (): Map<string, Platform> => platforms;\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet _platform: Platform;\n\nconst handler: ProxyHandler<Platform> = {\n  get(_target: Platform, prop: keyof Platform) {\n    if (!_platform) {\n      throw new Error(PLATFORM_NOT_FOUND);\n    }\n    return _platform[prop];\n  },\n};\n\nexport const platform = new Proxy<Platform>({} as any, handler);\n\nexport function setPlatformApi(name: string): void {\n  if (!platforms.has(name)) {\n    throw new Error(\n      `Init: Platform \"${name}\" not found. Must be one of: ${getPlatformList().join(\n        ', '\n      )}`\n    );\n  }\n  _platform = platforms.get(name);\n}\n\ninterface GitAuthor {\n  name?: string;\n  address?: string;\n}\n\nexport function parseGitAuthor(input: string): GitAuthor | null {\n  let result: GitAuthor = null;\n  if (!input) {\n    return null;\n  }\n  try {\n    result = addrs.parseOneAddress(input);\n    if (result) {\n      return result;\n    }\n    if (input.includes('[bot]@')) {\n      // invalid github app/bot addresses\n      const parsed = addrs.parseOneAddress(\n        input.replace('[bot]@', '@')\n      ) as addrs.ParsedMailbox;\n      if (parsed?.address) {\n        result = {\n          name: parsed.name || input.replace(/@.*/, ''),\n          address: parsed.address.replace('@', '[bot]@'),\n        };\n        return result;\n      }\n    }\n    if (input.includes('<') && input.includes('>')) {\n      // try wrapping the name part in quotations\n      result = addrs.parseOneAddress('\"' + input.replace(/(\\s?<)/, '\"$1'));\n      if (result) {\n        return result;\n      }\n    }\n  } catch (err) /* istanbul ignore next */ {\n    logger.error({ err }, 'Unknown error parsing gitAuthor');\n  }\n  // give up\n  return null;\n}\n\nexport async function initPlatform(\n  config: RenovateConfig\n): Promise<RenovateConfig> {\n  setPrivateKey(config.gitPrivateKey);\n  setPlatformApi(config.platform);\n  // TODO: types\n  const platformInfo = await platform.initPlatform(config);\n  const returnConfig: any = { ...config, ...platformInfo };\n  let gitAuthor: string;\n  if (config?.gitAuthor) {\n    logger.debug(`Using configured gitAuthor (${config.gitAuthor})`);\n    gitAuthor = config.gitAuthor;\n  } else if (!platformInfo?.gitAuthor) {\n    logger.debug(\n      'Using default gitAuthor: Renovate Bot <renovate@whitesourcesoftware.com>'\n    );\n    gitAuthor = 'Renovate Bot <renovate@whitesourcesoftware.com>';\n  } /* istanbul ignore next */ else {\n    logger.debug('Using platform gitAuthor: ' + platformInfo.gitAuthor);\n    gitAuthor = platformInfo.gitAuthor;\n  }\n  const gitAuthorParsed = parseGitAuthor(gitAuthor);\n  // istanbul ignore if\n  if (!gitAuthorParsed) {\n    throw new Error('Init: gitAuthor is not parsed as valid RFC5322 format');\n  }\n  global.gitAuthor = {\n    name: gitAuthorParsed.name,\n    email: gitAuthorParsed.address,\n  };\n  // TODO: types\n  const platformRule: any = {\n    hostType: returnConfig.platform,\n    hostName: URL.parse(returnConfig.endpoint).hostname,\n  };\n  ['token', 'username', 'password'].forEach((field) => {\n    if (config[field]) {\n      platformRule[field] = config[field];\n      delete returnConfig[field];\n    }\n  });\n  returnConfig.hostRules = returnConfig.hostRules || [];\n  returnConfig.hostRules.push(platformRule);\n  hostRules.add(platformRule);\n  return returnConfig;\n}\n"]}