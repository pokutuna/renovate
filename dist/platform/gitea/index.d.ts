import { BranchStatus } from '../../types';
import { BranchStatusConfig, CreatePRConfig, EnsureCommentConfig, EnsureIssueConfig, FindPRConfig, Issue, PlatformParams, PlatformResult, Pr, RepoParams, RepoResult } from '../common';
export declare const addAssignees: (number: number, assignees: string[]) => Promise<void>, addReviewers: (number: number, reviewers: string[]) => Promise<void>, createPr: (prConfig: CreatePRConfig) => Promise<Pr>, deleteBranch: (branchName: string, closePr?: boolean) => Promise<void>, deleteLabel: (number: number, label: string) => Promise<void>, ensureComment: (ensureComment: EnsureCommentConfig) => Promise<boolean>, ensureCommentRemoval: (ensureCommentRemoval: import("../common").EnsureCommentRemovalConfigByTopic | import("../common").EnsureCommentRemovalConfigByContent) => Promise<void>, ensureIssue: (issueConfig: EnsureIssueConfig) => Promise<import("../common").EnsureIssueResult>, ensureIssueClosing: (title: string) => Promise<void>, findIssue: (title: string) => Promise<Issue>, findPr: (findPRConfig: FindPRConfig) => Promise<Pr>, getBranchPr: (branchName: string) => Promise<Pr>, getBranchStatus: (branchName: string, requiredStatusChecks?: string[]) => Promise<BranchStatus>, getBranchStatusCheck: (branchName: string, context: string) => Promise<BranchStatus>, getIssueList: () => Promise<Issue[]>, getPr: (number: number) => Promise<Pr>, getPrBody: (prBody: string) => string, getPrList: () => Promise<Pr[]>, getRepoForceRebase: () => Promise<boolean>, getRepos: () => Promise<string[]>, getVulnerabilityAlerts: () => Promise<import("../../types").VulnerabilityAlert[]>, initPlatform: (config: PlatformParams) => Promise<PlatformResult>, initRepo: (config: RepoParams) => Promise<RepoResult>, mergePr: (number: number, branchName: string) => Promise<boolean>, setBaseBranch: (branchName: string) => Promise<string>, setBranchStatus: (branchStatusConfig: BranchStatusConfig) => Promise<void>, updatePr: (number: number, prTitle: string, prBody?: string) => Promise<void>;
