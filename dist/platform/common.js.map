{"version":3,"file":"common.js","sourceRoot":"","sources":["../../lib/platform/common.ts"],"names":[],"mappings":"","sourcesContent":["import {\n  BranchStatus,\n  VulnerabilityAlert as _VulnerabilityAlert,\n} from '../types';\n\nexport type VulnerabilityAlert = _VulnerabilityAlert;\n\nexport interface PlatformParams {\n  endpoint?: string;\n  token?: string;\n  username?: string;\n  password?: string;\n}\n\nexport interface PlatformResult {\n  endpoint: string;\n  renovateUsername?: any;\n  gitAuthor?: any;\n}\n\nexport interface RepoResult {\n  defaultBranch: string;\n  defaultBranchSha?: string;\n  isFork: boolean;\n}\n\nexport interface RepoParams {\n  azureWorkItemId?: number; // shouldn't this be configurable within a renovate.json?\n  bbUseDefaultReviewers?: boolean; // shouldn't this be configurable within a renovate.json?\n  localDir: string;\n  optimizeForDisabled: boolean;\n  repository: string;\n  endpoint?: string;\n  forkMode?: string;\n  forkToken?: string;\n  includeForks?: boolean;\n  renovateUsername?: string;\n}\n\n/**\n *\n */\nexport interface Pr {\n  body?: string;\n  branchName: string;\n  canMerge?: boolean;\n  canMergeReason?: string;\n  createdAt?: string;\n  displayNumber?: string;\n  hasAssignees?: boolean;\n  hasReviewers?: boolean;\n  isConflicted?: boolean;\n  labels?: string[];\n  number?: number;\n  reviewers?: string[];\n  sha?: string;\n  sourceRepo?: string;\n  state: string;\n  targetBranch?: string;\n  title: string;\n}\n\n/**\n * TODO: Proper typing\n */\nexport interface Issue {\n  body?: string;\n  number?: number;\n  state?: string;\n  title?: string;\n}\nexport type PlatformPrOptions = {\n  azureAutoComplete?: boolean;\n  statusCheckVerify?: boolean;\n  gitLabAutomerge?: boolean;\n};\nexport interface CreatePRConfig {\n  branchName: string;\n  targetBranch: string;\n  prTitle: string;\n  prBody: string;\n  labels?: string[] | null;\n  platformOptions?: PlatformPrOptions;\n  draftPR?: boolean;\n}\nexport interface EnsureIssueConfig {\n  title: string;\n  reuseTitle?: string;\n  body: string;\n  once?: boolean;\n  shouldReOpen?: boolean;\n}\nexport interface BranchStatusConfig {\n  branchName: string;\n  context: string;\n  description: string;\n  state: BranchStatus;\n  url?: string;\n}\nexport interface FindPRConfig {\n  branchName: string;\n  prTitle?: string | null;\n  state?: 'open' | 'closed' | '!open' | 'all';\n  refreshCache?: boolean;\n}\nexport interface EnsureCommentConfig {\n  number: number;\n  topic: string;\n  content: string;\n}\n\nexport interface EnsureCommentRemovalConfigByTopic {\n  number: number;\n  topic: string;\n}\nexport interface EnsureCommentRemovalConfigByContent {\n  number: number;\n  content: string;\n}\nexport interface EnsureCommentRemovalConfig {\n  number: number;\n  content?: string;\n  topic?: string;\n}\n\nexport type EnsureIssueResult = 'updated' | 'created';\n\nexport interface Platform {\n  findIssue(title: string): Promise<Issue | null>;\n  getIssueList(): Promise<Issue[]>;\n  getVulnerabilityAlerts(): Promise<VulnerabilityAlert[]>;\n  initRepo(config: RepoParams): Promise<RepoResult>;\n  getPrList(): Promise<Pr[]>;\n  ensureIssueClosing(title: string): Promise<void>;\n  ensureIssue(\n    issueConfig: EnsureIssueConfig\n  ): Promise<EnsureIssueResult | null>;\n  getPrBody(prBody: string): string;\n  updatePr(number: number, prTitle: string, prBody?: string): Promise<void>;\n  mergePr(number: number, branchName: string): Promise<boolean>;\n  addReviewers(number: number, reviewers: string[]): Promise<void>;\n  addAssignees(number: number, assignees: string[]): Promise<void>;\n  createPr(prConfig: CreatePRConfig): Promise<Pr>;\n  getRepos(): Promise<string[]>;\n  getRepoForceRebase(): Promise<boolean>;\n  deleteLabel(number: number, label: string): Promise<void>;\n  setBranchStatus(branchStatusConfig: BranchStatusConfig): Promise<void>;\n  getBranchStatusCheck(\n    branchName: string,\n    context: string\n  ): Promise<BranchStatus | null>;\n  ensureCommentRemoval(\n    ensureCommentRemoval:\n      | EnsureCommentRemovalConfigByTopic\n      | EnsureCommentRemovalConfigByContent\n  ): Promise<void>;\n  deleteBranch(branchName: string, closePr?: boolean): Promise<void>;\n  ensureComment(ensureComment: EnsureCommentConfig): Promise<boolean>;\n  setBaseBranch(branchName: string): Promise<string>;\n  getPr(number: number): Promise<Pr>;\n  findPr(findPRConfig: FindPRConfig): Promise<Pr>;\n  refreshPr?(number: number): Promise<void>;\n  getBranchStatus(\n    branchName: string,\n    requiredStatusChecks?: string[] | null\n  ): Promise<BranchStatus>;\n  getBranchPr(branchName: string): Promise<Pr | null>;\n  initPlatform(config: PlatformParams): Promise<PlatformResult>;\n}\n"]}