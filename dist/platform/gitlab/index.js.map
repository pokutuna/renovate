{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/platform/gitlab/index.ts"],"names":[],"mappings":"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","sourcesContent":["import URL, { URLSearchParams } from 'url';\nimport is from '@sindresorhus/is';\n\nimport delay from 'delay';\nimport { configFileNames } from '../../config/app-strings';\nimport { RenovateConfig } from '../../config/common';\nimport {\n  PLATFORM_AUTHENTICATION_ERROR,\n  REPOSITORY_ACCESS_FORBIDDEN,\n  REPOSITORY_ARCHIVED,\n  REPOSITORY_CHANGED,\n  REPOSITORY_DISABLED,\n  REPOSITORY_EMPTY,\n  REPOSITORY_MIRRORED,\n  REPOSITORY_NOT_FOUND,\n} from '../../constants/error-messages';\nimport { PLATFORM_TYPE_GITLAB } from '../../constants/platforms';\nimport { PR_STATE_ALL, PR_STATE_OPEN } from '../../constants/pull-requests';\nimport { logger } from '../../logger';\nimport { BranchStatus } from '../../types';\nimport * as git from '../../util/git';\nimport * as hostRules from '../../util/host-rules';\nimport { HttpResponse } from '../../util/http';\nimport { GitlabHttp, setBaseUrl } from '../../util/http/gitlab';\nimport { sanitize } from '../../util/sanitize';\nimport { ensureTrailingSlash } from '../../util/url';\nimport {\n  BranchStatusConfig,\n  CreatePRConfig,\n  EnsureCommentConfig,\n  EnsureCommentRemovalConfig,\n  EnsureIssueConfig,\n  FindPRConfig,\n  Issue,\n  PlatformParams,\n  PlatformResult,\n  Pr,\n  RepoParams,\n  RepoResult,\n  VulnerabilityAlert,\n} from '../common';\nimport { smartTruncate } from '../utils/pr-body';\n\nconst gitlabApi = new GitlabHttp();\n\ntype MergeMethod = 'merge' | 'rebase_merge' | 'ff';\ntype RepoResponse = {\n  archived: boolean;\n  mirror: boolean;\n  default_branch: string;\n  empty_repo: boolean;\n  http_url_to_repo: string;\n  forked_from_project: boolean;\n  repository_access_level: 'disabled' | 'private' | 'enabled';\n  merge_requests_access_level: 'disabled' | 'private' | 'enabled';\n  merge_method: MergeMethod;\n  path_with_namespace: string;\n};\nconst defaultConfigFile = configFileNames[0];\nlet config: {\n  repository: string;\n  localDir: string;\n  email: string;\n  prList: any[];\n  issueList: any[];\n  optimizeForDisabled: boolean;\n  mergeMethod: MergeMethod;\n} = {} as any;\n\nconst defaults = {\n  hostType: PLATFORM_TYPE_GITLAB,\n  endpoint: 'https://gitlab.com/api/v4/',\n};\n\nlet authorId: number;\n\nexport async function initPlatform({\n  endpoint,\n  token,\n}: PlatformParams): Promise<PlatformResult> {\n  if (!token) {\n    throw new Error('Init: You must configure a GitLab personal access token');\n  }\n  if (endpoint) {\n    defaults.endpoint = ensureTrailingSlash(endpoint);\n    setBaseUrl(defaults.endpoint);\n  } else {\n    logger.debug('Using default GitLab endpoint: ' + defaults.endpoint);\n  }\n  let gitAuthor: string;\n  try {\n    const user = (\n      await gitlabApi.getJson<{ email: string; name: string; id: number }>(\n        `user`,\n        { token }\n      )\n    ).body;\n    gitAuthor = `${user.name} <${user.email}>`;\n    authorId = user.id;\n  } catch (err) {\n    logger.debug(\n      { err },\n      'Error authenticating with GitLab. Check that your token includes \"user\" permissions'\n    );\n    throw new Error('Init: Authentication failure');\n  }\n  const platformConfig: PlatformResult = {\n    endpoint: defaults.endpoint,\n    gitAuthor,\n  };\n  return platformConfig;\n}\n\n// Get all repositories that the user has access to\nexport async function getRepos(): Promise<string[]> {\n  logger.debug('Autodiscovering GitLab repositories');\n  try {\n    const url = `projects?membership=true&per_page=100&with_merge_requests_enabled=true&min_access_level=30`;\n    const res = await gitlabApi.getJson<RepoResponse[]>(url, {\n      paginate: true,\n    });\n    logger.debug(`Discovered ${res.body.length} project(s)`);\n    return res.body\n      .filter((repo) => !repo.mirror && !repo.archived)\n      .map((repo) => repo.path_with_namespace);\n  } catch (err) {\n    logger.error({ err }, `GitLab getRepos error`);\n    throw err;\n  }\n}\n\nfunction urlEscape(str: string): string {\n  return str ? str.replace(/\\//g, '%2F') : str;\n}\n\n// Initialize GitLab by getting base branch\nexport async function initRepo({\n  repository,\n  localDir,\n  optimizeForDisabled,\n}: RepoParams): Promise<RepoResult> {\n  config = {} as any;\n  config.repository = urlEscape(repository);\n  config.localDir = localDir;\n\n  let res: HttpResponse<RepoResponse>;\n  let defaultBranch: string;\n  try {\n    res = await gitlabApi.getJson<RepoResponse>(\n      `projects/${config.repository}`\n    );\n    if (res.body.archived) {\n      logger.debug(\n        'Repository is archived - throwing error to abort renovation'\n      );\n      throw new Error(REPOSITORY_ARCHIVED);\n    }\n    if (res.body.mirror) {\n      logger.debug(\n        'Repository is a mirror - throwing error to abort renovation'\n      );\n      throw new Error(REPOSITORY_MIRRORED);\n    }\n    if (res.body.repository_access_level === 'disabled') {\n      logger.debug(\n        'Repository portion of project is disabled - throwing error to abort renovation'\n      );\n      throw new Error(REPOSITORY_DISABLED);\n    }\n    if (res.body.merge_requests_access_level === 'disabled') {\n      logger.debug(\n        'MRs are disabled for the project - throwing error to abort renovation'\n      );\n      throw new Error(REPOSITORY_DISABLED);\n    }\n    if (res.body.default_branch === null || res.body.empty_repo) {\n      throw new Error(REPOSITORY_EMPTY);\n    }\n    if (optimizeForDisabled) {\n      let renovateConfig: RenovateConfig;\n      try {\n        renovateConfig = JSON.parse(\n          Buffer.from(\n            (\n              await gitlabApi.getJson<{ content: string }>(\n                `projects/${config.repository}/repository/files/${defaultConfigFile}?ref=${res.body.default_branch}`\n              )\n            ).body.content,\n            'base64'\n          ).toString()\n        );\n      } catch (err) {\n        // Do nothing\n      }\n      if (renovateConfig && renovateConfig.enabled === false) {\n        throw new Error(REPOSITORY_DISABLED);\n      }\n    }\n    defaultBranch = res.body.default_branch;\n    config.mergeMethod = res.body.merge_method || 'merge';\n    logger.debug(`${repository} default branch = ${defaultBranch}`);\n    delete config.prList;\n    logger.debug('Enabling Git FS');\n    const opts = hostRules.find({\n      hostType: defaults.hostType,\n      url: defaults.endpoint,\n    });\n    let url: string;\n    if (\n      process.env.GITLAB_IGNORE_REPO_URL ||\n      res.body.http_url_to_repo === null\n    ) {\n      logger.debug('no http_url_to_repo found. Falling back to old behaviour.');\n      const { host, protocol } = URL.parse(defaults.endpoint);\n      url = git.getUrl({\n        protocol: protocol.slice(0, -1) as any,\n        auth: 'oauth2:' + opts.token,\n        host,\n        repository,\n      });\n    } else {\n      logger.debug(`${repository} http URL = ${res.body.http_url_to_repo}`);\n      const repoUrl = URL.parse(`${res.body.http_url_to_repo}`);\n      repoUrl.auth = 'oauth2:' + opts.token;\n      url = URL.format(repoUrl);\n    }\n    await git.initRepo({\n      ...config,\n      url,\n      gitAuthorName: global.gitAuthor?.name,\n      gitAuthorEmail: global.gitAuthor?.email,\n    });\n  } catch (err) /* istanbul ignore next */ {\n    logger.debug({ err }, 'Caught initRepo error');\n    if (err.message.includes('HEAD is not a symbolic ref')) {\n      throw new Error(REPOSITORY_EMPTY);\n    }\n    if ([REPOSITORY_ARCHIVED, REPOSITORY_EMPTY].includes(err.message)) {\n      throw err;\n    }\n    if (err.statusCode === 403) {\n      throw new Error(REPOSITORY_ACCESS_FORBIDDEN);\n    }\n    if (err.statusCode === 404) {\n      throw new Error(REPOSITORY_NOT_FOUND);\n    }\n    if (err.message === REPOSITORY_DISABLED) {\n      throw err;\n    }\n    logger.debug({ err }, 'Unknown GitLab initRepo error');\n    throw err;\n  }\n  const repoConfig: RepoResult = {\n    defaultBranch,\n    isFork: !!res.body.forked_from_project,\n  };\n  return repoConfig;\n}\n\nexport function getRepoForceRebase(): Promise<boolean> {\n  return Promise.resolve(config?.mergeMethod !== 'merge');\n}\n\nexport async function setBaseBranch(branchName: string): Promise<string> {\n  const baseBranchSha = await git.setBranch(branchName);\n  return baseBranchSha;\n}\n\ntype BranchState = 'pending' | 'running' | 'success' | 'failed' | 'canceled';\n\ninterface GitlabBranchStatus {\n  status: BranchState;\n  name: string;\n  allow_failure?: boolean;\n}\n\nasync function getStatus(\n  branchName: string,\n  useCache = true\n): Promise<GitlabBranchStatus[]> {\n  const branchSha = await git.getBranchCommit(branchName);\n  const url = `projects/${config.repository}/repository/commits/${branchSha}/statuses`;\n\n  return (\n    await gitlabApi.getJson<GitlabBranchStatus[]>(url, {\n      paginate: true,\n      useCache,\n    })\n  ).body;\n}\n\nconst gitlabToRenovateStatusMapping: Record<string, BranchStatus> = {\n  pending: BranchStatus.yellow,\n  created: BranchStatus.yellow,\n  manual: BranchStatus.yellow,\n  running: BranchStatus.yellow,\n  success: BranchStatus.green,\n  failed: BranchStatus.red,\n  canceled: BranchStatus.red,\n  skipped: BranchStatus.red,\n};\n\n// Returns the combined status for a branch.\nexport async function getBranchStatus(\n  branchName: string,\n  requiredStatusChecks?: string[] | null\n): Promise<BranchStatus> {\n  logger.debug(`getBranchStatus(${branchName})`);\n  if (!requiredStatusChecks) {\n    // null means disable status checks, so it always succeeds\n    return BranchStatus.green;\n  }\n  if (Array.isArray(requiredStatusChecks) && requiredStatusChecks.length) {\n    // This is Unsupported\n    logger.warn({ requiredStatusChecks }, `Unsupported requiredStatusChecks`);\n    return BranchStatus.red;\n  }\n\n  if (!(await git.branchExists(branchName))) {\n    throw new Error(REPOSITORY_CHANGED);\n  }\n\n  const res = await getStatus(branchName);\n  logger.debug(`Got res with ${res.length} results`);\n  if (res.length === 0) {\n    // Return 'pending' if we have no status checks\n    return BranchStatus.yellow;\n  }\n  let status: BranchStatus = BranchStatus.green; // default to green\n  res\n    .filter((check) => !check.allow_failure)\n    .forEach((check) => {\n      if (status !== BranchStatus.red) {\n        // if red, stay red\n        let mappedStatus: BranchStatus =\n          gitlabToRenovateStatusMapping[check.status];\n        if (!mappedStatus) {\n          logger.warn(\n            { check },\n            'Could not map GitLab check.status to Renovate status'\n          );\n          mappedStatus = BranchStatus.yellow;\n        }\n        if (mappedStatus !== BranchStatus.green) {\n          logger.trace({ check }, 'Found non-green check');\n          status = mappedStatus;\n        }\n      }\n    });\n  return status;\n}\n\n// Pull Request\n\nexport async function createPr({\n  branchName,\n  targetBranch,\n  prTitle: title,\n  prBody: rawDescription,\n  labels,\n  platformOptions,\n}: CreatePRConfig): Promise<Pr> {\n  const description = sanitize(rawDescription);\n  logger.debug(`Creating Merge Request: ${title}`);\n  const res = await gitlabApi.postJson<Pr & { iid: number }>(\n    `projects/${config.repository}/merge_requests`,\n    {\n      body: {\n        source_branch: branchName,\n        target_branch: targetBranch,\n        remove_source_branch: true,\n        title,\n        description,\n        labels: is.array(labels) ? labels.join(',') : null,\n      },\n    }\n  );\n  const pr = res.body;\n  pr.number = pr.iid;\n  pr.branchName = branchName;\n  pr.displayNumber = `Merge Request #${pr.iid}`;\n  // istanbul ignore if\n  if (config.prList) {\n    config.prList.push(pr);\n  }\n  if (platformOptions?.gitLabAutomerge) {\n    try {\n      const desiredStatus = 'can_be_merged';\n      const retryTimes = 5;\n\n      // Check for correct merge request status before setting `merge_when_pipeline_succeeds` to  `true`.\n      for (let attempt = 1; attempt <= retryTimes; attempt += 1) {\n        const { body } = await gitlabApi.getJson<{\n          merge_status: string;\n          pipeline: string;\n        }>(`projects/${config.repository}/merge_requests/${pr.iid}`);\n        // Only continue if the merge request can be merged and has a pipeline.\n        if (body.merge_status === desiredStatus && body.pipeline !== null) {\n          break;\n        }\n        await delay(500 * attempt);\n      }\n\n      await gitlabApi.putJson(\n        `projects/${config.repository}/merge_requests/${pr.iid}/merge`,\n        {\n          body: {\n            should_remove_source_branch: true,\n            merge_when_pipeline_succeeds: true,\n          },\n        }\n      );\n    } catch (err) /* istanbul ignore next */ {\n      logger.debug({ err }, 'Automerge on PR creation failed');\n    }\n  }\n\n  return pr;\n}\n\nexport async function getPr(iid: number): Promise<Pr> {\n  logger.debug(`getPr(${iid})`);\n  const url = `projects/${config.repository}/merge_requests/${iid}?include_diverged_commits_count=1`;\n  const pr = (\n    await gitlabApi.getJson<\n      Pr & {\n        iid: number;\n        source_branch: string;\n        target_branch: string;\n        description: string;\n        diverged_commits_count: number;\n        merge_status: string;\n        assignee?: { id?: number };\n        assignees?: { id?: number }[];\n      }\n    >(url)\n  ).body;\n  // Harmonize fields with GitHub\n  pr.branchName = pr.source_branch;\n  pr.targetBranch = pr.target_branch;\n  pr.number = pr.iid;\n  pr.displayNumber = `Merge Request #${pr.iid}`;\n  pr.body = pr.description;\n  pr.state = pr.state === 'opened' ? PR_STATE_OPEN : pr.state;\n  pr.hasAssignees = !!(pr.assignee?.id || pr.assignees?.[0]?.id);\n  delete pr.assignee;\n  delete pr.assignees;\n  pr.hasReviewers = false;\n  if (pr.merge_status === 'cannot_be_merged') {\n    logger.debug('pr cannot be merged');\n    pr.canMerge = false;\n    pr.isConflicted = true;\n  } else if (pr.state === PR_STATE_OPEN) {\n    const branchStatus = await getBranchStatus(pr.branchName, []);\n    if (branchStatus === BranchStatus.green) {\n      pr.canMerge = true;\n    }\n  }\n  return pr;\n}\n\n// istanbul ignore next\nasync function closePr(iid: number): Promise<void> {\n  await gitlabApi.putJson(\n    `projects/${config.repository}/merge_requests/${iid}`,\n    {\n      body: {\n        state_event: 'close',\n      },\n    }\n  );\n}\n\nexport async function updatePr(\n  iid: number,\n  title: string,\n  description: string\n): Promise<void> {\n  await gitlabApi.putJson(\n    `projects/${config.repository}/merge_requests/${iid}`,\n    {\n      body: {\n        title,\n        description: sanitize(description),\n      },\n    }\n  );\n}\n\nexport async function mergePr(iid: number): Promise<boolean> {\n  try {\n    await gitlabApi.putJson(\n      `projects/${config.repository}/merge_requests/${iid}/merge`,\n      {\n        body: {\n          should_remove_source_branch: true,\n        },\n      }\n    );\n    return true;\n  } catch (err) /* istanbul ignore next */ {\n    if (err.statusCode === 401) {\n      logger.debug('No permissions to merge PR');\n      return false;\n    }\n    if (err.statusCode === 406) {\n      logger.debug({ err }, 'PR not acceptable for merging');\n      return false;\n    }\n    logger.debug({ err }, 'merge PR error');\n    logger.debug('PR merge failed');\n    return false;\n  }\n}\n\nexport function getPrBody(input: string): string {\n  return smartTruncate(\n    input\n      .replace(/Pull Request/g, 'Merge Request')\n      .replace(/PR/g, 'MR')\n      .replace(/\\]\\(\\.\\.\\/pull\\//g, '](!'),\n    50000\n  );\n}\n\n// Branch\n\n// Returns the Pull Request for a branch. Null if not exists.\nexport async function getBranchPr(branchName: string): Promise<Pr> {\n  logger.debug(`getBranchPr(${branchName})`);\n  // istanbul ignore if\n  if (!(await git.branchExists(branchName))) {\n    return null;\n  }\n  const query = new URLSearchParams({\n    per_page: '100',\n    state: 'opened',\n    source_branch: branchName,\n  }).toString();\n  const urlString = `projects/${config.repository}/merge_requests?${query}`;\n  const res = await gitlabApi.getJson<{ source_branch: string }[]>(urlString, {\n    paginate: true,\n  });\n  logger.debug(`Got res with ${res.body.length} results`);\n  let pr: any = null;\n  res.body.forEach((result) => {\n    if (result.source_branch === branchName) {\n      pr = result;\n    }\n  });\n  if (!pr) {\n    return null;\n  }\n  return getPr(pr.iid);\n}\n\nexport async function deleteBranch(\n  branchName: string,\n  shouldClosePr = false\n): Promise<void> {\n  if (shouldClosePr) {\n    logger.debug('Closing PR');\n    const pr = await getBranchPr(branchName);\n    // istanbul ignore if\n    if (pr) {\n      await closePr(pr.number);\n    }\n  }\n  return git.deleteBranch(branchName);\n}\n\nexport async function getBranchStatusCheck(\n  branchName: string,\n  context: string\n): Promise<BranchStatus | null> {\n  // cache-bust in case we have rebased\n  const res = await getStatus(branchName, false);\n  logger.debug(`Got res with ${res.length} results`);\n  for (const check of res) {\n    if (check.name === context) {\n      return gitlabToRenovateStatusMapping[check.status] || BranchStatus.yellow;\n    }\n  }\n  return null;\n}\n\nexport async function setBranchStatus({\n  branchName,\n  context,\n  description,\n  state: renovateState,\n  url: targetUrl,\n}: BranchStatusConfig): Promise<void> {\n  // First, get the branch commit SHA\n  const branchSha = await git.getBranchCommit(branchName);\n  // Now, check the statuses for that commit\n  const url = `projects/${config.repository}/statuses/${branchSha}`;\n  let state = 'success';\n  if (renovateState === BranchStatus.yellow) {\n    state = 'pending';\n  } else if (renovateState === BranchStatus.red) {\n    state = 'failed';\n  }\n  const options: any = {\n    state,\n    description,\n    context,\n  };\n  if (targetUrl) {\n    options.target_url = targetUrl;\n  }\n  try {\n    await gitlabApi.postJson(url, { body: options });\n\n    // update status cache\n    await getStatus(branchName, false);\n  } catch (err) /* istanbul ignore next */ {\n    if (\n      err.body?.message?.startsWith(\n        'Cannot transition status via :enqueue from :pending'\n      )\n    ) {\n      // https://gitlab.com/gitlab-org/gitlab-foss/issues/25807\n      logger.debug('Ignoring status transition error');\n    } else {\n      logger.debug({ err });\n      logger.warn('Failed to set branch status');\n    }\n  }\n}\n\n// Issue\n\nexport async function getIssueList(): Promise<any[]> {\n  if (!config.issueList) {\n    const query = new URLSearchParams({\n      per_page: '100',\n      author_id: `${authorId}`,\n      state: 'opened',\n    }).toString();\n    const res = await gitlabApi.getJson<{ iid: number; title: string }[]>(\n      `projects/${config.repository}/issues?${query}`,\n      {\n        useCache: false,\n        paginate: true,\n      }\n    );\n    // istanbul ignore if\n    if (!is.array(res.body)) {\n      logger.warn({ responseBody: res.body }, 'Could not retrieve issue list');\n      return [];\n    }\n    config.issueList = res.body.map((i) => ({\n      iid: i.iid,\n      title: i.title,\n    }));\n  }\n  return config.issueList;\n}\n\nexport async function findIssue(title: string): Promise<Issue | null> {\n  logger.debug(`findIssue(${title})`);\n  try {\n    const issueList = await getIssueList();\n    const issue = issueList.find((i: { title: string }) => i.title === title);\n    if (!issue) {\n      return null;\n    }\n    const issueBody = (\n      await gitlabApi.getJson<{ description: string }>(\n        `projects/${config.repository}/issues/${issue.iid}`\n      )\n    ).body.description;\n    return {\n      number: issue.iid,\n      body: issueBody,\n    };\n  } catch (err) /* istanbul ignore next */ {\n    logger.warn('Error finding issue');\n    return null;\n  }\n}\n\nexport async function ensureIssue({\n  title,\n  reuseTitle,\n  body,\n}: EnsureIssueConfig): Promise<'updated' | 'created' | null> {\n  logger.debug(`ensureIssue()`);\n  const description = getPrBody(sanitize(body));\n  try {\n    const issueList = await getIssueList();\n    let issue = issueList.find((i: { title: string }) => i.title === title);\n    if (!issue) {\n      issue = issueList.find((i: { title: string }) => i.title === reuseTitle);\n    }\n    if (issue) {\n      const existingDescription = (\n        await gitlabApi.getJson<{ description: string }>(\n          `projects/${config.repository}/issues/${issue.iid}`\n        )\n      ).body.description;\n      if (issue.title !== title || existingDescription !== description) {\n        logger.debug('Updating issue');\n        await gitlabApi.putJson(\n          `projects/${config.repository}/issues/${issue.iid}`,\n          {\n            body: { title, description },\n          }\n        );\n        return 'updated';\n      }\n    } else {\n      await gitlabApi.postJson(`projects/${config.repository}/issues`, {\n        body: {\n          title,\n          description,\n        },\n      });\n      logger.info('Issue created');\n      // delete issueList so that it will be refetched as necessary\n      delete config.issueList;\n      return 'created';\n    }\n  } catch (err) /* istanbul ignore next */ {\n    if (err.message.startsWith('Issues are disabled for this repo')) {\n      logger.debug(`Could not create issue: ${err.message}`);\n    } else {\n      logger.warn({ err }, 'Could not ensure issue');\n    }\n  }\n  return null;\n}\n\nexport async function ensureIssueClosing(title: string): Promise<void> {\n  logger.debug(`ensureIssueClosing()`);\n  const issueList = await getIssueList();\n  for (const issue of issueList) {\n    if (issue.title === title) {\n      logger.debug({ issue }, 'Closing issue');\n      await gitlabApi.putJson(\n        `projects/${config.repository}/issues/${issue.iid}`,\n        {\n          body: { state_event: 'close' },\n        }\n      );\n    }\n  }\n}\n\nexport async function addAssignees(\n  iid: number,\n  assignees: string[]\n): Promise<void> {\n  logger.debug(`Adding assignees ${assignees} to #${iid}`);\n  try {\n    let assigneeId = (\n      await gitlabApi.getJson<{ id: number }[]>(\n        `users?username=${assignees[0]}`\n      )\n    ).body[0].id;\n    let url = `projects/${config.repository}/merge_requests/${iid}?assignee_id=${assigneeId}`;\n    await gitlabApi.putJson(url);\n    try {\n      if (assignees.length > 1) {\n        url = `projects/${config.repository}/merge_requests/${iid}?assignee_ids[]=${assigneeId}`;\n        for (let i = 1; i < assignees.length; i += 1) {\n          assigneeId = (\n            await gitlabApi.getJson<{ id: number }[]>(\n              `users?username=${assignees[i]}`\n            )\n          ).body[0].id;\n          url += `&assignee_ids[]=${assigneeId}`;\n        }\n        await gitlabApi.putJson(url);\n      }\n    } catch (error) {\n      logger.error({ iid, assignees }, 'Failed to add multiple assignees');\n    }\n  } catch (err) {\n    logger.debug({ err }, 'addAssignees error');\n    logger.warn({ iid, assignees }, 'Failed to add assignees');\n  }\n}\n\nexport function addReviewers(iid: number, reviewers: string[]): Promise<void> {\n  logger.debug(`addReviewers('${iid}, '${reviewers})`);\n  logger.warn('Unimplemented in GitLab: approvals');\n  return Promise.resolve();\n}\n\nexport async function deleteLabel(\n  issueNo: number,\n  label: string\n): Promise<void> {\n  logger.debug(`Deleting label ${label} from #${issueNo}`);\n  try {\n    const pr = await getPr(issueNo);\n    const labels = (pr.labels || []).filter((l: string) => l !== label).join();\n    await gitlabApi.putJson(\n      `projects/${config.repository}/merge_requests/${issueNo}`,\n      {\n        body: { labels },\n      }\n    );\n  } catch (err) /* istanbul ignore next */ {\n    logger.warn({ err, issueNo, label }, 'Failed to delete label');\n  }\n}\n\nasync function getComments(issueNo: number): Promise<GitlabComment[]> {\n  // GET projects/:owner/:repo/merge_requests/:number/notes\n  logger.debug(`Getting comments for #${issueNo}`);\n  const url = `projects/${config.repository}/merge_requests/${issueNo}/notes`;\n  const comments = (\n    await gitlabApi.getJson<GitlabComment[]>(url, { paginate: true })\n  ).body;\n  logger.debug(`Found ${comments.length} comments`);\n  return comments;\n}\n\nasync function addComment(issueNo: number, body: string): Promise<void> {\n  // POST projects/:owner/:repo/merge_requests/:number/notes\n  await gitlabApi.postJson(\n    `projects/${config.repository}/merge_requests/${issueNo}/notes`,\n    {\n      body: { body },\n    }\n  );\n}\n\nasync function editComment(\n  issueNo: number,\n  commentId: number,\n  body: string\n): Promise<void> {\n  // PUT projects/:owner/:repo/merge_requests/:number/notes/:id\n  await gitlabApi.putJson(\n    `projects/${config.repository}/merge_requests/${issueNo}/notes/${commentId}`,\n    {\n      body: { body },\n    }\n  );\n}\n\nasync function deleteComment(\n  issueNo: number,\n  commentId: number\n): Promise<void> {\n  // DELETE projects/:owner/:repo/merge_requests/:number/notes/:id\n  await gitlabApi.deleteJson(\n    `projects/${config.repository}/merge_requests/${issueNo}/notes/${commentId}`\n  );\n}\n\nexport async function ensureComment({\n  number,\n  topic,\n  content,\n}: EnsureCommentConfig): Promise<boolean> {\n  const sanitizedContent = sanitize(content);\n  const massagedTopic = topic\n    ? topic.replace(/Pull Request/g, 'Merge Request').replace(/PR/g, 'MR')\n    : topic;\n  const comments = await getComments(number);\n  let body: string;\n  let commentId: number;\n  let commentNeedsUpdating: boolean;\n  if (topic) {\n    logger.debug(`Ensuring comment \"${massagedTopic}\" in #${number}`);\n    body = `### ${topic}\\n\\n${sanitizedContent}`;\n    body = body.replace(/Pull Request/g, 'Merge Request').replace(/PR/g, 'MR');\n    comments.forEach((comment: { body: string; id: number }) => {\n      if (comment.body.startsWith(`### ${massagedTopic}\\n\\n`)) {\n        commentId = comment.id;\n        commentNeedsUpdating = comment.body !== body;\n      }\n    });\n  } else {\n    logger.debug(`Ensuring content-only comment in #${number}`);\n    body = `${sanitizedContent}`;\n    comments.forEach((comment: { body: string; id: number }) => {\n      if (comment.body === body) {\n        commentId = comment.id;\n        commentNeedsUpdating = false;\n      }\n    });\n  }\n  if (!commentId) {\n    await addComment(number, body);\n    logger.debug(\n      { repository: config.repository, issueNo: number },\n      'Added comment'\n    );\n  } else if (commentNeedsUpdating) {\n    await editComment(number, commentId, body);\n    logger.debug(\n      { repository: config.repository, issueNo: number },\n      'Updated comment'\n    );\n  } else {\n    logger.debug('Comment is already update-to-date');\n  }\n  return true;\n}\n\ntype GitlabComment = {\n  body: string;\n  id: number;\n};\n\nexport async function ensureCommentRemoval({\n  number: issueNo,\n  topic,\n  content,\n}: EnsureCommentRemovalConfig): Promise<void> {\n  logger.debug(\n    `Ensuring comment \"${topic || content}\" in #${issueNo} is removed`\n  );\n\n  const comments = await getComments(issueNo);\n  let commentId: number | null = null;\n\n  const byTopic = (comment: GitlabComment): boolean =>\n    comment.body.startsWith(`### ${topic}\\n\\n`);\n  const byContent = (comment: GitlabComment): boolean =>\n    comment.body.trim() === content;\n\n  if (topic) {\n    commentId = comments.find(byTopic)?.id;\n  } else if (content) {\n    commentId = comments.find(byContent)?.id;\n  }\n\n  if (commentId) {\n    await deleteComment(issueNo, commentId);\n  }\n}\n\nasync function fetchPrList(): Promise<Pr[]> {\n  const query = new URLSearchParams({\n    per_page: '100',\n    author_id: `${authorId}`,\n  }).toString();\n  const urlString = `projects/${config.repository}/merge_requests?${query}`;\n  try {\n    const res = await gitlabApi.getJson<\n      {\n        iid: number;\n        source_branch: string;\n        title: string;\n        state: string;\n        created_at: string;\n      }[]\n    >(urlString, { paginate: true });\n    return res.body.map((pr) => ({\n      number: pr.iid,\n      branchName: pr.source_branch,\n      title: pr.title,\n      state: pr.state === 'opened' ? PR_STATE_OPEN : pr.state,\n      createdAt: pr.created_at,\n    }));\n  } catch (err) /* istanbul ignore next */ {\n    logger.debug({ err }, 'Error fetching PR list');\n    if (err.statusCode === 403) {\n      throw new Error(PLATFORM_AUTHENTICATION_ERROR);\n    }\n    throw err;\n  }\n}\n\nexport async function getPrList(): Promise<Pr[]> {\n  if (!config.prList) {\n    config.prList = await fetchPrList();\n  }\n  return config.prList;\n}\n\nfunction matchesState(state: string, desiredState: string): boolean {\n  if (desiredState === PR_STATE_ALL) {\n    return true;\n  }\n  if (desiredState.startsWith('!')) {\n    return state !== desiredState.substring(1);\n  }\n  return state === desiredState;\n}\n\nexport async function findPr({\n  branchName,\n  prTitle,\n  state = PR_STATE_ALL,\n}: FindPRConfig): Promise<Pr> {\n  logger.debug(`findPr(${branchName}, ${prTitle}, ${state})`);\n  const prList = await getPrList();\n  return prList.find(\n    (p: { branchName: string; title: string; state: string }) =>\n      p.branchName === branchName &&\n      (!prTitle || p.title === prTitle) &&\n      matchesState(p.state, state)\n  );\n}\n\nexport function getVulnerabilityAlerts(): Promise<VulnerabilityAlert[]> {\n  return Promise.resolve([]);\n}\n"]}